Unity Editor version:    2021.3.10f1 (1c7d0df0160b)
Branch:                  2021.3/staging
Build type:              Release
Batch mode:              YES
macOS version:           Version 11.5.2 (Build 20G95)
Darwin version:          20.6.0
Architecture:            x86_64
Running under Rosetta:   NO
Available memory:        8192 MB
Using pre-set license
Pro License: YES

COMMAND LINE ARGUMENTS:
/Applications/Unity/Hub/Editor/2021.3.10f1/Unity.app/Contents/MacOS/Unity
-adb2
-batchMode
-noUpm
-name
AssetImportWorker1
-projectPath
/Users/hb21a035/Documents/MakeBread_Git/MakeBread
-logFile
Logs/AssetImportWorker1.log
-srvPort
49995
Successfully changed project path to: /Users/hb21a035/Documents/MakeBread_Git/MakeBread
/Users/hb21a035/Documents/MakeBread_Git/MakeBread
[UnityMemory] Configuration Parameters - Can be set up in boot.config
    "memorysetup-bucket-allocator-granularity=16"
    "memorysetup-bucket-allocator-bucket-count=8"
    "memorysetup-bucket-allocator-block-size=33554432"
    "memorysetup-bucket-allocator-block-count=8"
    "memorysetup-main-allocator-block-size=16777216"
    "memorysetup-thread-allocator-block-size=16777216"
    "memorysetup-gfx-main-allocator-block-size=16777216"
    "memorysetup-gfx-thread-allocator-block-size=16777216"
    "memorysetup-cache-allocator-block-size=4194304"
    "memorysetup-typetree-allocator-block-size=2097152"
    "memorysetup-profiler-bucket-allocator-granularity=16"
    "memorysetup-profiler-bucket-allocator-bucket-count=8"
    "memorysetup-profiler-bucket-allocator-block-size=33554432"
    "memorysetup-profiler-bucket-allocator-block-count=8"
    "memorysetup-profiler-allocator-block-size=16777216"
    "memorysetup-profiler-editor-allocator-block-size=1048576"
    "memorysetup-temp-allocator-size-main=16777216"
    "memorysetup-job-temp-allocator-block-size=2097152"
    "memorysetup-job-temp-allocator-block-size-background=1048576"
    "memorysetup-job-temp-allocator-reduction-small-platforms=262144"
    "memorysetup-temp-allocator-size-background-worker=32768"
    "memorysetup-temp-allocator-size-job-worker=262144"
    "memorysetup-temp-allocator-size-preload-manager=33554432"
    "memorysetup-temp-allocator-size-nav-mesh-worker=65536"
    "memorysetup-temp-allocator-size-audio-worker=65536"
    "memorysetup-temp-allocator-size-cloud-worker=32768"
    "memorysetup-temp-allocator-size-gi-baking-worker=262144"
    "memorysetup-temp-allocator-size-gfx=262144"
Refreshing native plugins compatible for Editor in 137.94 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Initialize engine version: 2021.3.10f1 (1c7d0df0160b)
[Subsystems] Discovering subsystems at path /Applications/Unity/Hub/Editor/2021.3.10f1/Unity.app/Contents/Resources/UnitySubsystems
[Subsystems] Discovering subsystems at path /Users/hb21a035/Documents/MakeBread_Git/MakeBread/Assets
GfxDevice: creating device client; threaded=0; jobified=0
Color LCD preferred device: Intel(R) Iris(TM) Plus Graphics 645 (low power)
Metal devices available: 1
0: Intel(R) Iris(TM) Plus Graphics 645 (low power)
Using device Intel(R) Iris(TM) Plus Graphics 645 (low power)
Initializing Metal device caps: Intel(R) Iris(TM) Plus Graphics 645
Initialize mono
Mono path[0] = '/Applications/Unity/Hub/Editor/2021.3.10f1/Unity.app/Contents/Managed'
Mono path[1] = '/Applications/Unity/Hub/Editor/2021.3.10f1/Unity.app/Contents/MonoBleedingEdge/lib/mono/unityjit-macos'
Mono config path = '/Applications/Unity/Hub/Editor/2021.3.10f1/Unity.app/Contents/MonoBleedingEdge/etc'
Using monoOptions --debugger-agent=transport=dt_socket,embedding=1,server=y,suspend=n,address=127.0.0.1:56088
Begin MonoManager ReloadAssembly
Registering precompiled unity dll's ...
Register platform support module: /Applications/Unity/Hub/Editor/2021.3.10f1/PlaybackEngines/WebGLSupport/UnityEditor.WebGL.Extensions.dll
Register platform support module: /Applications/Unity/Hub/Editor/2021.3.10f1/Unity.app/Contents/PlaybackEngines/MacStandaloneSupport/UnityEditor.OSXStandalone.Extensions.dll
Register platform support module: /Applications/Unity/Hub/Editor/2021.3.10f1/PlaybackEngines/AndroidPlayer/UnityEditor.Android.Extensions.dll
Register platform support module: /Applications/Unity/Hub/Editor/2021.3.10f1/PlaybackEngines/iOSSupport/UnityEditor.iOS.Extensions.dll
Register platform support module: /Applications/Unity/Hub/Editor/2021.3.10f1/PlaybackEngines/WindowsStandaloneSupport/UnityEditor.WindowsStandalone.Extensions.dll
Registered in 0.006420 seconds.
Native extension for WindowsStandalone target not found
[usbmuxd] Start listen thread
[usbmuxd] Listen thread started
[usbmuxd] Send listen message
Native extension for iOS target not found
Native extension for Android target not found
Native extension for OSXStandalone target not found
Native extension for WebGL target not found
Refreshing native plugins compatible for Editor in 111.30 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Mono: successfully reloaded assembly
- Completed reload, in  1.099 seconds
Domain Reload Profiling:
	ReloadAssembly (1099ms)
		BeginReloadAssembly (156ms)
			ExecutionOrderSort (0ms)
			DisableScriptedObjects (0ms)
			BackupInstance (0ms)
			ReleaseScriptingObjects (0ms)
			CreateAndSetChildDomain (1ms)
		EndReloadAssembly (768ms)
			LoadAssemblies (160ms)
			RebuildTransferFunctionScriptingTraits (1ms)
			SetupTypeCache (193ms)
			ReleaseScriptCaches (0ms)
			RebuildScriptCaches (48ms)
			SetupLoadedEditorAssemblies (451ms)
				LogAssemblyErrors (0ms)
				InitializePlatformSupportModulesInManaged (106ms)
				SetLoadedEditorAssemblies (0ms)
				RefreshPlugins (111ms)
				BeforeProcessingInitializeOnLoad (2ms)
				ProcessInitializeOnLoadAttributes (163ms)
				ProcessInitializeOnLoadMethodAttributes (68ms)
				AfterProcessingInitializeOnLoad (0ms)
				EditorAssembliesLoaded (0ms)
			ExecutionOrderSort2 (0ms)
			AwakeInstancesAfterBackupRestoration (0ms)
Platform modules already initialized, skipping
Registering precompiled user dll's ...
Registered in 0.011788 seconds.
Begin MonoManager ReloadAssembly
Symbol file LoadedFromMemory doesn't match image /Users/hb21a035/Documents/MakeBread_Git/MakeBread/Library/PackageCache/com.unity.visualscripting@1.7.8/Editor/VisualScripting.Core/Dependencies/YamlDotNet/Unity.VisualScripting.YamlDotNet.dll
Symbol file LoadedFromMemory doesn't match image /Users/hb21a035/Documents/MakeBread_Git/MakeBread/Library/PackageCache/com.unity.visualscripting@1.7.8/Editor/VisualScripting.Core/Dependencies/DotNetZip/Unity.VisualScripting.IonicZip.dll
Native extension for WindowsStandalone target not found
Native extension for iOS target not found
Native extension for Android target not found
Native extension for OSXStandalone target not found
Native extension for WebGL target not found
Refreshing native plugins compatible for Editor in 107.01 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Mono: successfully reloaded assembly
- Completed reload, in  1.869 seconds
Domain Reload Profiling:
	ReloadAssembly (1870ms)
		BeginReloadAssembly (159ms)
			ExecutionOrderSort (0ms)
			DisableScriptedObjects (11ms)
			BackupInstance (0ms)
			ReleaseScriptingObjects (0ms)
			CreateAndSetChildDomain (42ms)
		EndReloadAssembly (1564ms)
			LoadAssemblies (155ms)
			RebuildTransferFunctionScriptingTraits (0ms)
			SetupTypeCache (521ms)
			ReleaseScriptCaches (1ms)
			RebuildScriptCaches (83ms)
			SetupLoadedEditorAssemblies (730ms)
				LogAssemblyErrors (0ms)
				InitializePlatformSupportModulesInManaged (41ms)
				SetLoadedEditorAssemblies (0ms)
				RefreshPlugins (107ms)
				BeforeProcessingInitializeOnLoad (121ms)
				ProcessInitializeOnLoadAttributes (369ms)
				ProcessInitializeOnLoadMethodAttributes (88ms)
				AfterProcessingInitializeOnLoad (3ms)
				EditorAssembliesLoaded (0ms)
			ExecutionOrderSort2 (0ms)
			AwakeInstancesAfterBackupRestoration (5ms)
Platform modules already initialized, skipping
========================================================================
Worker process is ready to serve import requests
Launching external process: /Applications/Unity/Hub/Editor/2021.3.10f1/Unity.app/Contents/Tools/UnityShaderCompiler
Launched and connected shader compiler UnityShaderCompiler after 0.03 seconds
Compilation failed: 

program_source:829:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:837:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
                             ^
program_source:838:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
                                               ^
program_source:1096:49: error: member reference base type 'uint' (aka 'unsigned int') is not a structure or union
                u_xlatu3 = input.cp[0].TEXCOORD8.x;
                           ~~~~~~~~~~~~~~~~~~~~~^~



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float3 NORMAL0 [[ attribute(9) ]] ;
    float4 TANGENT0 [[ attribute(10) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    uint mtl_VertexID,
    uint mtl_BaseVertex,
    Mtl_VertexIn input)
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseVertex = 0;
#endif
    mtl_VertexID = mtl_VertexID - mtl_BaseVertex;
    Mtl_VertexOut output;
    output.mtl_Position = input.POSITION0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = input.TEXCOORD1.xy;
    output.TEXCOORD2.xy = input.TEXCOORD2.xy;
    output.TEXCOORD3.xy = input.TEXCOORD3.xy;
    output.TEXCOORD4.xy = input.TEXCOORD4.xy;
    output.TEXCOORD5.xy = input.TEXCOORD5.xy;
    output.TEXCOORD6.xy = input.TEXCOORD6.xy;
    output.TEXCOORD7.xy = input.TEXCOORD7.xy;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TANGENT0 = input.TANGENT0;
    output.TEXCOORD8 = mtl_VertexID;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(11) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float3 NORMAL0 [[ attribute(9) ]] ;
    float4 TANGENT0 [[ attribute(10) ]] ;
    uint TEXCOORD8 [[ attribute(12) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
    float3 unity_LightColor0;
    float3 unity_LightColor1;
    float3 unity_LightColor2;
    float3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
    float4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _LightColor0;
    float4 _SpecColor;
    bool4 unity_MetaVertexControl;
    bool4 unity_MetaFragmentControl;
    int unity_VisualizationMode;
    float unity_OneOverOutputBoost;
    float unity_MaxOutputValue;
    float unity_UseLinearSpace;
    float4 _lilBackgroundTexture_TexelSize;
    float4 _LightDirectionOverride;
    float4 _BackfaceColor;
    float4 _PreColor;
    float4 _Color;
    float4 _MainTex_ST;
    float4 _MainTex_ScrollRotate;
    float4 _MainTexHSVG;
    float4 _Color2nd;
    float4 _Main2ndTex_ST;
    float4 _Main2ndTex_ScrollRotate;
    float4 _Main2ndDistanceFade;
    float4 _Main2ndTexDecalAnimation;
    float4 _Main2ndTexDecalSubParam;
    float4 _Main2ndDissolveMask_ST;
    float4 _Main2ndDissolveColor;
    float4 _Main2ndDissolveParams;
    float4 _Main2ndDissolvePos;
    float4 _Main2ndDissolveNoiseMask_ST;
    float4 _Main2ndDissolveNoiseMask_ScrollRotate;
    float4 _Color3rd;
    float4 _Main3rdTex_ST;
    float4 _Main3rdTex_ScrollRotate;
    float4 _Main3rdDistanceFade;
    float4 _Main3rdTexDecalAnimation;
    float4 _Main3rdTexDecalSubParam;
    float4 _Main3rdDissolveMask_ST;
    float4 _Main3rdDissolveColor;
    float4 _Main3rdDissolveParams;
    float4 _Main3rdDissolvePos;
    float4 _Main3rdDissolveNoiseMask_ST;
    float4 _Main3rdDissolveNoiseMask_ScrollRotate;
    float4 _ShadowColor;
    float4 _Shadow2ndColor;
    float4 _Shadow3rdColor;
    float4 _ShadowBorderColor;
    float4 _ShadowAOShift;
    float4 _ShadowAOShift2;
    float4 _RimShadeColor;
    float4 _BacklightColor;
    float4 _BacklightColorTex_ST;
    float4 _EmissionColor;
    float4 _EmissionBlink;
    float4 _EmissionMap_ST;
    float4 _EmissionMap_ScrollRotate;
    float4 _EmissionBlendMask_ST;
    float4 _EmissionBlendMask_ScrollRotate;
    float4 _Emission2ndColor;
    float4 _Emission2ndBlink;
    float4 _Emission2ndMap_ST;
    float4 _Emission2ndMap_ScrollRotate;
    float4 _Emission2ndBlendMask_ST;
    float4 _Emission2ndBlendMask_ScrollRotate;
    float4 _BumpMap_ST;
    float4 _Bump2ndMap_ST;
    float4 _Bump2ndScaleMask_ST;
    float4 _AnisotropyTangentMap_ST;
    float4 _AnisotropyScaleMask_ST;
    float4 _AnisotropyShiftNoiseMask_ST;
    float4 _ReflectionColor;
    float4 _MetallicGlossMap_ST;
    float4 _ReflectionColorTex_ST;
    float4 _SmoothnessTex_ST;
    float4 _ReflectionCubeColor;
    float4 _ReflectionCubeTex_HDR;
    float4 _MatCapColor;
    float4 _MatCapTex_ST;
    float4 _MatCapBlendMask_ST;
    float4 _MatCapBlendUV1;
    float4 _MatCapBumpMap_ST;
    float4 _MatCap2ndColor;
    float4 _MatCap2ndTex_ST;
    float4 _MatCap2ndBlendMask_ST;
    float4 _MatCap2ndBlendUV1;
    float4 _MatCap2ndBumpMap_ST;
    float4 _RimColor;
    float4 _RimColorTex_ST;
    float4 _RimIndirColor;
    float4 _GlitterColor;
    float4 _GlitterColorTex_ST;
    float4 _GlitterParams1;
    float4 _GlitterParams2;
    float4 _GlitterShapeTex_ST;
    float4 _GlitterAtras;
    float4 _DistanceFade;
    float4 _DistanceFadeColor;
    float4 _DistanceFadeRimColor;
    float4 _DitherTex_TexelSize;
    float4 _AudioLinkMask_ST;
    float4 _AudioLinkMask_ScrollRotate;
    float4 _AudioLinkDefaultValue;
    float4 _AudioLinkUVParams;
    float4 _AudioLinkStart;
    float4 _AudioLinkVertexUVParams;
    float4 _AudioLinkVertexStart;
    float4 _AudioLinkVertexStrength;
    float4 _AudioLinkLocalMapParams;
    float4 _DissolveMask_ST;
    float4 _DissolveColor;
    float4 _DissolveParams;
    float4 _DissolvePos;
    float4 _DissolveNoiseMask_ST;
    float4 _DissolveNoiseMask_ScrollRotate;
    float4 _OutlineColor;
    float4 _OutlineLitColor;
    float4 _OutlineTex_ST;
    float4 _OutlineTex_ScrollRotate;
    float4 _OutlineTexHSVG;
    float _AsUnlit;
    float _Cutoff;
    float _PreCutoff;
    float _SubpassCutoff;
    float _FlipNormal;
    float _ShiftBackfaceUV;
    float _VertexLightStrength;
    float _LightMinLimit;
    float _LightMaxLimit;
    float _MonochromeLighting;
    float _AAStrength;
    float _AlphaBoostFA;
    float _MainGradationStrength;
    float _Main2ndTexAngle;
    float _Main2ndEnableLighting;
    float _Main2ndDissolveNoiseStrength;
    float _Main3rdTexAngle;
    float _Main3rdEnableLighting;
    float _Main3rdDissolveNoiseStrength;
    float4 _AlphaMask_ST;
    float _AlphaMaskScale;
    float _AlphaMaskValue;
    float _BackfaceForceShadow;
    float _ShadowStrength;
    float _ShadowNormalStrength;
    float _ShadowBorder;
    float _ShadowBlur;
    float _ShadowStrengthMaskLOD;
    float _ShadowBorderMaskLOD;
    float _ShadowBlurMaskLOD;
    float _Shadow2ndNormalStrength;
    float _Shadow2ndBorder;
    float _Shadow2ndBlur;
    float _Shadow3rdNormalStrength;
    float _Shadow3rdBorder;
    float _Shadow3rdBlur;
    float _ShadowMainStrength;
    float _ShadowEnvStrength;
    float _ShadowBorderRange;
    float _ShadowReceive;
    float _Shadow2ndReceive;
    float _Shadow3rdReceive;
    float _ShadowFlatBlur;
    float _ShadowFlatBorder;
    float _RimShadeNormalStrength;
    float _RimShadeBorder;
    float _RimShadeBlur;
    float _RimShadeFresnelPower;
    float _BacklightNormalStrength;
    float _BacklightBorder;
    float _BacklightBlur;
    float _BacklightDirectivity;
    float _BacklightViewStrength;
    float _BacklightBackfaceMask;
    float _BacklightMainStrength;
    float _BumpScale;
    float _Bump2ndScale;
    float _AnisotropyScale;
    float _AnisotropyTangentWidth;
    float _AnisotropyBitangentWidth;
    float _AnisotropyShift;
    float _AnisotropyShiftNoiseScale;
    float _AnisotropySpecularStrength;
    float _Anisotropy2ndTangentWidth;
    float _Anisotropy2ndBitangentWidth;
    float _Anisotropy2ndShift;
    float _Anisotropy2ndShiftNoiseScale;
    float _Anisotropy2ndSpecularStrength;
    float _Reflectance;
    float _SpecularNormalStrength;
    float _SpecularBorder;
    float _SpecularBlur;
    float _ReflectionNormalStrength;
    float _ReflectionCubeEnableLighting;
    float _Smoothness;
    float _Metallic;
    float _GSAAStrength;
    float _MatCapBlend;
    float _MatCapEnableLighting;
    float _MatCapShadowMask;
    float _MatCapVRParallaxStrength;
    float _MatCapBackfaceMask;
    float _MatCapLod;
    float _MatCapNormalStrength;
    float _MatCapMainStrength;
    float _MatCapBumpScale;
    float _MatCap2ndBlend;
    float _MatCap2ndEnableLighting;
    float _MatCap2ndShadowMask;
    float _MatCap2ndVRParallaxStrength;
    float _MatCap2ndBackfaceMask;
    float _MatCap2ndLod;
    float _MatCap2ndNormalStrength;
    float _MatCap2ndMainStrength;
    float _MatCap2ndBumpScale;
    float _RimNormalStrength;
    float _RimBorder;
    float _RimBlur;
    float _RimFresnelPower;
    float _RimEnableLighting;
    float _RimShadowMask;
    float _RimVRParallaxStrength;
    float _RimBackfaceMask;
    float _RimMainStrength;
    float _RimDirStrength;
    float _RimDirRange;
    float _RimIndirRange;
    float _RimIndirBorder;
    float _RimIndirBlur;
    float _GlitterMainStrength;
    float _GlitterPostContrast;
    float _GlitterSensitivity;
    float _GlitterNormalStrength;
    float _GlitterEnableLighting;
    float _GlitterShadowMask;
    float _GlitterVRParallaxStrength;
    float _GlitterBackfaceMask;
    float _GlitterScaleRandomize;
    float _DistanceFadeRimFresnelPower;
    float _EmissionBlend;
    float _EmissionParallaxDepth;
    float _EmissionFluorescence;
    float _EmissionMainStrength;
    float _EmissionGradSpeed;
    float _Emission2ndBlend;
    float _Emission2ndParallaxDepth;
    float _Emission2ndFluorescence;
    float _Emission2ndMainStrength;
    float _Emission2ndGradSpeed;
    float _Parallax;
    float _ParallaxOffset;
    float _DitherMaxValue;
    float _AudioLink2EmissionGrad;
    float _AudioLink2Emission2ndGrad;
    float _DissolveNoiseStrength;
    float _IDMask1;
    float _IDMask2;
    float _IDMask3;
    float _IDMask4;
    float _IDMask5;
    float _IDMask6;
    float _IDMask7;
    float _IDMask8;
    float _IDMaskPrior1;
    float _IDMaskPrior2;
    float _IDMaskPrior3;
    float _IDMaskPrior4;
    float _IDMaskPrior5;
    float _IDMaskPrior6;
    float _IDMaskPrior7;
    float _IDMaskPrior8;
    float _UDIMDiscardCompile;
    float _UDIMDiscardMode;
    float _UDIMDiscardUV;
    float _UDIMDiscardRow3_0;
    float _UDIMDiscardRow3_1;
    float _UDIMDiscardRow3_2;
    float _UDIMDiscardRow3_3;
    float _UDIMDiscardRow2_0;
    float _UDIMDiscardRow2_1;
    float _UDIMDiscardRow2_2;
    float _UDIMDiscardRow2_3;
    float _UDIMDiscardRow1_0;
    float _UDIMDiscardRow1_1;
    float _UDIMDiscardRow1_2;
    float _UDIMDiscardRow1_3;
    float _UDIMDiscardRow0_0;
    float _UDIMDiscardRow0_1;
    float _UDIMDiscardRow0_2;
    float _UDIMDiscardRow0_3;
    float _lilShadowCasterBias;
    float _OutlineLitScale;
    float _OutlineLitOffset;
    float _OutlineWidth;
    float _OutlineEnableLighting;
    float _OutlineVectorScale;
    float _OutlineFixWidth;
    float _OutlineZBias;
    float _TessEdge;
    float _TessStrength;
    float _TessShrink;
    float _TessFactorMax;
    int _IDMaskIndex1;
    int _IDMaskIndex2;
    int _IDMaskIndex3;
    int _IDMaskIndex4;
    int _IDMaskIndex5;
    int _IDMaskIndex6;
    int _IDMaskIndex7;
    int _IDMaskIndex8;
    uint _IDMaskFrom;
    uint _IDMaskIsBitmap;
    uint _IDMaskControlsDissolve;
    uint _Cull;
    uint _OutlineCull;
    uint _PreOutType;
    uint _Main2ndTexBlendMode;
    uint _Main2ndTexAlphaMode;
    uint _Main2ndTex_UVMode;
    uint _Main2ndTex_Cull;
    uint _Main3rdTexBlendMode;
    uint _Main3rdTexAlphaMode;
    uint _Main3rdTex_UVMode;
    uint _Main3rdTex_Cull;
    uint _AlphaMaskMode;
    uint _ShadowColorType;
    uint _ShadowMaskType;
    uint _Bump2ndMap_UVMode;
    uint _ReflectionBlendMode;
    uint _MatCapBlendMode;
    uint _MatCap2ndBlendMode;
    uint _RimBlendMode;
    uint _GlitterUVMode;
    uint _EmissionMap_UVMode;
    uint _EmissionBlendMode;
    uint _Emission2ndMap_UVMode;
    uint _Emission2ndBlendMode;
    uint _AudioLinkUVMode;
    uint _AudioLinkMask_UVMode;
    uint _AudioLinkVertexUVMode;
    uint _DistanceFadeMode;
    uint _UseDither;
    uint _OutlineVertexR2Width;
    uint _OutlineVectorUVMode;
    uint _Invisible;
    uint _UseMain2ndTex;
    uint _Main2ndTexIsMSDF;
    uint _Main2ndTexIsDecal;
    uint _Main2ndTexIsLeftOnly;
    uint _Main2ndTexIsRightOnly;
    uint _Main2ndTexShouldCopy;
    uint _Main2ndTexShouldFlipMirror;
    uint _Main2ndTexShouldFlipCopy;
    uint _UseMain3rdTex;
    uint _Main3rdTexIsMSDF;
    uint _Main3rdTexIsDecal;
    uint _Main3rdTexIsLeftOnly;
    uint _Main3rdTexIsRightOnly;
    uint _Main3rdTexShouldCopy;
    uint _Main3rdTexShouldFlipMirror;
    uint _Main3rdTexShouldFlipCopy;
    uint _UseShadow;
    uint _ShadowPostAO;
    uint _UseRimShade;
    uint _UseBacklight;
    uint _BacklightReceiveShadow;
    uint _UseBumpMap;
    uint _UseBump2ndMap;
    uint _UseAnisotropy;
    uint _Anisotropy2Reflection;
    uint _Anisotropy2MatCap;
    uint _Anisotropy2MatCap2nd;
    uint _UseReflection;
    uint _ApplySpecular;
    uint _ApplySpecularFA;
    uint _ApplyReflection;
    uint _SpecularToon;
    uint _ReflectionApplyTransparency;
    uint _ReflectionCubeOverride;
    uint _UseMatCap;
    uint _MatCapApplyTransparency;
    uint _MatCapPerspective;
    uint _MatCapZRotCancel;
    uint _MatCapCustomNormal;
    uint _UseMatCap2nd;
    uint _MatCap2ndApplyTransparency;
    uint _MatCap2ndPerspective;
    uint _MatCap2ndZRotCancel;
    uint _MatCap2ndCustomNormal;
    uint _UseRim;
    uint _RimApplyTransparency;
    uint _UseGlitter;
    uint _GlitterColorTex_UVMode;
    uint _GlitterApplyTransparency;
    uint _GlitterApplyShape;
    uint _GlitterAngleRandomize;
    uint _UseEmission;
    uint _EmissionUseGrad;
    uint _UseEmission2nd;
    uint _Emission2ndUseGrad;
    uint _UseParallax;
    uint _UsePOM;
    uint _UseAudioLink;
    uint _AudioLink2Main2nd;
    uint _AudioLink2Main3rd;
    uint _AudioLink2Emission;
    uint _AudioLink2Emission2nd;
    uint _AudioLink2Vertex;
    uint _AudioLinkAsLocal;
    uint _OutlineLitApplyTex;
    uint _OutlineLitShadowReceive;
    uint _OutlineDeleteMesh;
    uint _OutlineDisableInVR;
    float4 _AudioTexture_TexelSize;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    // mtl_VertexID generated in compute kernel,
    // mtl_BaseVertex generated in compute kernel,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(mtl_VertexID, mtl_BaseVertex, vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.TEXCOORD4 = input.cp[controlPointID].TEXCOORD4;
        output.TEXCOORD5 = input.cp[controlPointID].TEXCOORD5;
        output.TEXCOORD6 = input.cp[controlPointID].TEXCOORD6;
        output.TEXCOORD7 = input.cp[controlPointID].TEXCOORD7;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float4 u_xlat1;
    int2 u_xlati1;
    bool4 u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    bool2 u_xlatb3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float3 u_xlat11;
    float u_xlat22;
    bool2 u_xlatb23;
    int2 u_xlati24;
    bool2 u_xlatb24;
    float u_xlat33;
    float u_xlat34;
    // fork_phase2
    {
        if((VGlobals._Invisible)!=uint(0)){
            tessFactor.edgeTessellationFactor[0] = 0.0;
            tessFactor.edgeTessellationFactor[1] = 0.0;
            tessFactor.edgeTessellationFactor[2] = 0.0;
            tessFactor.insideTessellationFactor = 0.0;
            return;
        }
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].mtl_Position.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].mtl_Position.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].mtl_Position.zzz, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].mtl_Position.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].mtl_Position.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].mtl_Position.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat3.xyz = u_xlat2.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].mtl_Position.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].mtl_Position.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].mtl_Position.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat4.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat4.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat6.x = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
        u_xlat7.x = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat7.xyz = float3(u_xlat33) * u_xlat7.xyz;
        u_xlat8.x = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat8.y = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat8.z = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
        u_xlat9.xyz = u_xlat2.xyz + u_xlat4.xyz;
        u_xlat9.xyz = fma(u_xlat9.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat9.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
        u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.x = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat4.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat4.xyz;
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.y = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.z = max(u_xlat33, 1.0);
        u_xlat9.xyz = min(u_xlat9.xyz, float3(VGlobals._TessFactorMax));
        u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
        u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
        u_xlat11.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat34 = dot(u_xlat11.xyz, u_xlat11.xyz);
        u_xlat34 = rsqrt(u_xlat34);
        u_xlat11.xyz = u_xlat11.xyz * float3(u_xlat34);
        u_xlat0.y = dot(u_xlat7.xyz, u_xlat11.xyz);
        u_xlat2.xyz = (-u_xlat4.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat22 = rsqrt(u_xlat22);
        u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
        u_xlat0.z = dot(u_xlat8.xyz, u_xlat2.xyz);
        u_xlat2.xyz = abs(u_xlat0.zxy) + abs(u_xlat0.yzx);
        u_xlat0.xyz = fma((-u_xlat2.xyz), float3(0.5, 0.5, 0.5), float3(1.0, 1.0, 1.0));
        u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
        u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xyz;
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat34 = u_xlat0.y + u_xlat0.x;
        u_xlat34 = u_xlat0.z + u_xlat34;
        u_xlat0.w = u_xlat34 * 0.333333343;
        u_xlat1.xy = u_xlat1.xy / abs(u_xlat1.zz);
        u_xlat1.zw = u_xlat3.xy / abs(u_xlat3.zz);
        u_xlat2.xy = u_xlat5.xy / abs(u_xlat5.zz);
        u_xlatb24.xy = (float2(1.00999999, 1.00999999)<u_xlat1.xy);
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat1.zw);
        u_xlati24.xy = int2((uint2(u_xlatb24.xy) * 0xffffffffu) & (uint2(u_xlatb3.xy) * 0xffffffffu));
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat2.xy);
        u_xlati24.xy = int2((uint2(u_xlatb3.xy) * 0xffffffffu) & uint2(u_xlati24.xy));
        u_xlatb1 = (u_xlat1<float4(-1.00999999, -1.00999999, -1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb1.zw) * 0xffffffffu) & (uint2(u_xlatb1.xy) * 0xffffffffu));
        u_xlatb23.xy = (u_xlat2.xy<float2(-1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb23.xy) * 0xffffffffu) & uint2(u_xlati1.xy));
        u_xlati1.x = int(uint(u_xlati1.x) | uint(u_xlati24.x));
        u_xlati1.x = int(uint(u_xlati24.y) | uint(u_xlati1.x));
        u_xlati1.x = int(uint(u_xlati1.y) | uint(u_xlati1.x));
        u_xlat0 = (u_xlati1.x != 0) ? float4(0.0, 0.0, 0.0, 0.0) : u_xlat0;
        tessFactor.edgeTessellationFactor[0] = u_xlat0.x;
        tessFactor.edgeTessellationFactor[1] = u_xlat0.y;
        tessFactor.edgeTessellationFactor[2] = u_xlat0.z;
        tessFactor.insideTessellationFactor = u_xlat0.w;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float TEXCOORD9 [[ user(TEXCOORD9) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
};
		template <typename UVecType> UVecType bitFieldInsert(const UVecType width, const UVecType offset, const UVecType src2, const UVecType src3)
		{
			UVecType bitmask = (((UVecType(1) << width)-1) << offset) & 0xffffffff;
			return ((src2 << offset) & bitmask) | (src3 & ~bitmask);
		}; 
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    // mtl_VertexID unused,
    // mtl_BaseVertex unused,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    texture2d<float, access::sample > _AudioLinkLocalMap [[ texture(0) ]] ,
    texture2d<float, access::sample > _AudioTexture [[ texture(1) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    constexpr sampler lil_sampler_trilinear_repeat(filter::linear,mip_filter::linear,address::repeat);
    constexpr sampler lil_sampler_linear_clamp(filter::linear,mip_filter::nearest,address::clamp_to_edge);
        float4 phase0_Input0_1[3];
        phase0_Input0_1[2] = float4(input.cp[2].TEXCOORD0, input.cp[2].TEXCOORD1);
        phase0_Input0_1[1] = float4(input.cp[1].TEXCOORD0, input.cp[1].TEXCOORD1);
        phase0_Input0_1[0] = float4(input.cp[0].TEXCOORD0, input.cp[0].TEXCOORD1);
        float4 phase0_Input0_2[3];
        phase0_Input0_2[2] = float4(input.cp[2].TEXCOORD2, input.cp[2].TEXCOORD3);
        phase0_Input0_2[1] = float4(input.cp[1].TEXCOORD2, input.cp[1].TEXCOORD3);
        phase0_Input0_2[0] = float4(input.cp[0].TEXCOORD2, input.cp[0].TEXCOORD3);
    float4 phase0_Output0_4;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    int3 u_xlati3;
    uint u_xlatu3;
    bool u_xlatb3;
    float4 u_xlat4;
    int u_xlati4;
    bool u_xlatb4;
    float3 u_xlat5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    bool4 u_xlatb7;
    float4 u_xlat8;
    int4 u_xlati8;
    bool4 u_xlatb8;
    float4 u_xlat9;
    int4 u_xlati9;
    float4 u_xlat10;
    bool4 u_xlatb10;
    bool4 u_xlatb11;
    float4 u_xlat12;
    int4 u_xlati12;
    float4 u_xlat13;
    float3 u_xlat17;
    int u_xlati17;
    uint u_xlatu17;
    bool u_xlatb17;
    int u_xlati18;
    float2 u_xlat31;
    int2 u_xlati31;
    uint u_xlatu31;
    bool u_xlatb31;
    float u_xlat32;
    bool u_xlatb32;
    float2 u_xlat33;
    int u_xlati33;
    bool u_xlatb33;
    float u_xlat42;
    float u_xlat45;
    bool u_xlatb45;
    if((VGlobals._Invisible)==uint(0)){
        u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].mtl_Position.xyz;
        u_xlat0.xyz = fma(mtl_TessCoord.xxx, input.cp[0].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat0.xyz = fma(mtl_TessCoord.zzz, input.cp[2].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat1 = mtl_TessCoord.yyyy * phase0_Input0_1[1];
        u_xlat1 = fma(mtl_TessCoord.xxxx, phase0_Input0_1[0], u_xlat1);
        u_xlat1 = fma(mtl_TessCoord.zzzz, phase0_Input0_1[2], u_xlat1);
        u_xlat2 = mtl_TessCoord.yyyy * phase0_Input0_2[1];
        u_xlat2 = fma(mtl_TessCoord.xxxx, phase0_Input0_2[0], u_xlat2);
        u_xlat2 = fma(mtl_TessCoord.zzzz, phase0_Input0_2[2], u_xlat2);
        u_xlat3.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
        u_xlat3.xyz = fma(mtl_TessCoord.xxx, input.cp[0].NORMAL0.xyz, u_xlat3.xyz);
        u_xlat3.xyz = fma(mtl_TessCoord.zzz, input.cp[2].NORMAL0.xyz, u_xlat3.xyz);
        u_xlat4 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
        u_xlat4 = fma(mtl_TessCoord.xxxx, input.cp[0].TANGENT0, u_xlat4);
        u_xlat4 = fma(mtl_TessCoord.zzzz, input.cp[2].TANGENT0, u_xlat4);
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat3.xyz = float3(u_xlat42) * u_xlat3.xyz;
        u_xlat42 = dot(input.cp[0].mtl_Position.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat5.xyz = float3(u_xlat42) * input.cp[0].NORMAL0.xyz;
        u_xlat42 = dot(input.cp[1].mtl_Position.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat6.xyz = float3(u_xlat42) * input.cp[1].NORMAL0.xyz;
        u_xlat42 = dot(input.cp[2].mtl_Position.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat7.xyz = float3(u_xlat42) * input.cp[2].NORMAL0.xyz;
        u_xlat6.xyz = u_xlat6.xyz * mtl_TessCoord.yyy;
        u_xlat5.xyz = fma(u_xlat5.xyz, mtl_TessCoord.xxx, u_xlat6.xyz);
        u_xlat5.xyz = fma(u_xlat7.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
        u_xlat0.xyz = fma(u_xlat5.xyz, float3(VGlobals._TessStrength), u_xlat0.xyz);
        u_xlatb45 = int(VGlobals._UseAudioLink)!=0x0;
        u_xlatb5.x = int(VGlobals._AudioLink2Vertex)!=0x0;
        u_xlatb45 = u_xlatb45 && u_xlatb5.x;
        if(u_xlatb45){
            u_xlatb5.xy = (int2(VGlobals._AudioLinkVertexUVMode)==int2(0x1, 0x2));
            u_xlat6.xyz = u_xlat0.xyz + (-VGlobals._AudioLinkVertexStart.xyz);
            u_xlat45 = dot(u_xlat6.xyz, u_xlat6.xyz);
            u_xlat45 = sqrt(u_xlat45);
            u_xlat45 = fma(u_xlat45, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat45 = (u_xlatb5.x) ? u_xlat45 : VGlobals._AudioLinkVertexUVParams.y;
            u_xlat5.x = sin(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat6.x = cos(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat33.xy = u_xlat1.xy + float2(-0.5, -0.5);
            u_xlat5.x = u_xlat5.x * u_xlat33.y;
            u_xlat5.x = fma(u_xlat33.x, u_xlat6.x, (-u_xlat5.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = fma(u_xlat5.x, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat5.x = (u_xlatb5.y) ? u_xlat5.x : u_xlat45;
            if((VGlobals._AudioLinkAsLocal)!=uint(0)){
                u_xlat45 = (-VGlobals._Time.y) * VGlobals._AudioLinkLocalMapParams.x;
                u_xlat45 = u_xlat45 * VGlobals._AudioLinkLocalMapParams.y;
                u_xlat45 = u_xlat45 * 0.0166666675;
                u_xlat45 = fract(u_xlat45);
                u_xlat45 = u_xlat45 + VGlobals._AudioLinkLocalMapParams.z;
                u_xlat6.x = u_xlat45 + u_xlat5.x;
                u_xlat6.y = VGlobals._AudioLinkVertexUVParams.w;
                u_xlat45 = _AudioLinkLocalMap.sample(lil_sampler_trilinear_repeat, u_xlat6.xy, level(0.0)).x;
            } else {
                u_xlat33.x = float(_AudioTexture.get_width(0x0));
                u_xlati33 = int(u_xlat33.x);
                u_xlatb33 = 0x10<u_xlati33;
                if(u_xlatb33){
                    u_xlat5.y = VGlobals._AudioLinkVertexUVParams.w * 0.0625;
                    u_xlat45 = _AudioTexture.sample(lil_sampler_linear_clamp, u_xlat5.xy, level(0.0)).x;
                    u_xlat45 = u_xlat45;
                    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
                } else {
                    u_xlat5.x = fma(VGlobals._Time.y, VGlobals._AudioLinkDefaultValue.z, (-u_xlat5.x));
                    u_xlat5.x = fract(u_xlat5.x);
                    u_xlat5.x = u_xlat5.x + VGlobals._AudioLinkDefaultValue.w;
                    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
                    u_xlat5.x = u_xlat5.x * VGlobals._AudioLinkDefaultValue.y;
                    u_xlat45 = fma((-u_xlat5.x), VGlobals._AudioLinkDefaultValue.x, VGlobals._AudioLinkDefaultValue.x);
                    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
                }
            }
            u_xlat5.xyz = fma(u_xlat3.xyz, VGlobals._AudioLinkVertexStrength.www, VGlobals._AudioLinkVertexStrength.xyz);
            u_xlat0.xyz = fma(u_xlat5.xyz, float3(u_xlat45), u_xlat0.xyz);
        }
        u_xlat5.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat6 = u_xlat5.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
        u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat5.xxxx, u_xlat6);
        u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat5.zzzz, u_xlat6);
        u_xlat6 = u_xlat6 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
        u_xlat7.x = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        output.TEXCOORD4.xyz = u_xlat3.xxx * u_xlat7.xyz;
        u_xlat3.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat4.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat4.zzz, u_xlat3.xyz);
        u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat45 = rsqrt(u_xlat45);
        output.TEXCOORD5.xyz = float3(u_xlat45) * u_xlat3.xyz;
        u_xlat3.x = dot(VGlobals._LightColor0.xyz, float3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat17.xyz = VGlobals.unity_SHAg.xyz * float3(0.333332986, 0.333332986, 0.333332986);
        u_xlat17.xyz = fma(VGlobals.unity_SHAr.xyz, float3(0.333332986, 0.333332986, 0.333332986), u_xlat17.xyz);
        u_xlat7.xyz = fma(VGlobals.unity_SHAb.xyz, float3(0.333332986, 0.333332986, 0.333332986), u_xlat17.xyz);
        u_xlat7.w = abs(u_xlat7.y);
        u_xlat17.x = dot(VGlobals._LightDirectionOverride.xyz, VGlobals._LightDirectionOverride.xyz);
        u_xlat17.x = sqrt(u_xlat17.x);
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * VGlobals._LightDirectionOverride.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals._LightDirectionOverride.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, VGlobals._LightDirectionOverride.zzz, u_xlat4.xyz);
        u_xlat31.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat31.x = rsqrt(u_xlat31.x);
        u_xlat4.xyz = u_xlat31.xxx * u_xlat4.xyz;
        u_xlat17.xyz = u_xlat17.xxx * u_xlat4.xyz;
        u_xlatb4 = float(0.0)!=VGlobals._LightDirectionOverride.w;
        u_xlat17.xyz = (bool(u_xlatb4)) ? u_xlat17.xyz : VGlobals._LightDirectionOverride.xyz;
        u_xlat4.xyz = fma(VGlobals._WorldSpaceLightPos0.xyz, u_xlat3.xxx, u_xlat7.xwz);
        u_xlat17.xyz = u_xlat17.xyz + u_xlat4.xyz;
        u_xlat4.x = dot(u_xlat17.xyz, u_xlat17.xyz);
        u_xlat4.x = rsqrt(u_xlat4.x);
        output.TEXCOORD7.xyz = u_xlat17.xyz * u_xlat4.xxx;
        u_xlat3.xyz = fma(VGlobals._WorldSpaceLightPos0.xyz, u_xlat3.xxx, u_xlat7.xyz);
        u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlatb4 = u_xlat45<9.99999997e-07;
        u_xlat45 = rsqrt(u_xlat45);
        u_xlat3.xyz = float3(u_xlat45) * u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz * float3(0.666665971, 0.666665971, 0.666665971);
        u_xlat3.xyz = (bool(u_xlatb4)) ? float3(0.0, 0.0, 0.0) : u_xlat3.xyz;
        u_xlat7 = u_xlat3.yzzx * u_xlat3.xyzz;
        u_xlat45 = dot(VGlobals.unity_SHBr, u_xlat7);
        u_xlat4.x = u_xlat45 + VGlobals.unity_SHAr.w;
        u_xlat45 = dot(VGlobals.unity_SHBg, u_xlat7);
        u_xlat4.y = u_xlat45 + VGlobals.unity_SHAg.w;
        u_xlat45 = dot(VGlobals.unity_SHBb, u_xlat7);
        u_xlat4.z = u_xlat45 + VGlobals.unity_SHAb.w;
        u_xlat45 = u_xlat3.y * u_xlat3.y;
        u_xlat45 = fma(u_xlat3.x, u_xlat3.x, (-u_xlat45));
        u_xlat4.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat45), u_xlat4.xyz);
        u_xlat7.x = dot(VGlobals.unity_SHAr.xyz, u_xlat3.xyz);
        u_xlat7.y = dot(VGlobals.unity_SHAg.xyz, u_xlat3.xyz);
        u_xlat7.z = dot(VGlobals.unity_SHAb.xyz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat4.xyz + u_xlat7.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-u_xlat7.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals._LightColor0.xyz;
        u_xlat3.xyz = max(u_xlat3.xyz, float3(VGlobals._LightMinLimit));
        u_xlat3.xyz = min(u_xlat3.xyz, float3(VGlobals._LightMaxLimit));
        u_xlat45 = dot(u_xlat3.xyz, float3(0.333333343, 0.333333343, 0.333333343));
        u_xlat7.xyz = (-u_xlat3.xyz) + float3(u_xlat45);
        u_xlat3.xyz = fma(float3(VGlobals._MonochromeLighting), u_xlat7.xyz, u_xlat3.xyz);
        u_xlat7.xyz = (-u_xlat3.xyz) + float3(1.0, 1.0, 1.0);
        output.TEXCOORD6.xyz = fma(float3(VGlobals._AsUnlit), u_xlat7.xyz, u_xlat3.xyz);
        output.TEXCOORD8.xyz = u_xlat4.xyz * float3(VGlobals._ShadowEnvStrength);
        switch(int(int(VGlobals._IDMaskFrom))){
            case 0x0:
                u_xlatu3 = uint(u_xlat1.x);
                break;
            case 0x1:
                u_xlatu3 = uint(u_xlat1.z);
                break;
            case 0x2:
                u_xlatu3 = uint(u_xlat2.x);
                break;
            case 0x3:
                u_xlatu3 = uint(u_xlat2.z);
                break;
            case 0x4:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD4.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD4.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD4.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            case 0x5:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD5.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD5.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD5.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            case 0x6:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD6.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD6.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD6.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            case 0x7:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD7.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD7.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD7.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            default:
                u_xlatu3 = input.cp[0].TEXCOORD8.x;
                break;
            }
            if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                u_xlat7.x = rint(VGlobals._IDMask1);
                u_xlat7.yzw = rint(float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4));
                u_xlat17.x = dot(u_xlat7, float4(1.0, 2.0, 4.0, 8.0));
                u_xlat7.x = rint(VGlobals._IDMask5);
                u_xlat7.yzw = rint(float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8));
                u_xlat31.x = dot(u_xlat7, float4(16.0, 32.0, 64.0, 128.0));
                u_xlat17.x = u_xlat31.x + u_xlat17.x;
                u_xlatu17 = uint(u_xlat17.x);
                u_xlatb31 = int(u_xlatu3)!=0x0;
                u_xlati17 = int(u_xlatu3 & u_xlatu17);
                u_xlatb17 = int(u_xlatu3)==u_xlati17;
                u_xlati17 = int((uint(u_xlatb17) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            } else {
                u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                u_xlat7.xy = float2(u_xlati31.yx);
                u_xlati8 = int4(u_xlatu3) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                u_xlat8 = float4(u_xlati8.wxyz);
                u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                u_xlat31.xy = float2(u_xlati31.xy);
                u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                u_xlat7.x = (-u_xlat7.x);
                u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                u_xlat8 = (-u_xlat8);
                u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                u_xlat9.zw = u_xlat10.zw;
                u_xlat7.yzw = u_xlat8.yzw;
                u_xlat7 = u_xlat7 * u_xlat9;
                u_xlat10.zw = u_xlat31.xy + float2(1.0, 1.0);
                u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                u_xlat8.yz = (-u_xlat31.xy);
                u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                u_xlat8.w = 1.0;
                u_xlat8 = u_xlat8 * u_xlat10;
                u_xlat9.x = VGlobals._IDMask1;
                u_xlat9.yzw = float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4);
                u_xlat31.x = dot(u_xlat7, u_xlat9);
                u_xlat7.x = VGlobals._IDMask5;
                u_xlat7.yzw = float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8);
                u_xlat45 = dot(u_xlat8, u_xlat7);
                u_xlat31.x = u_xlat45 + u_xlat31.x;
                u_xlati17 = int((float(0.0)!=u_xlat31.x) ? 0xFFFFFFFFu : uint(0));
            }
            if((VGlobals._IDMaskControlsDissolve)!=uint(0)){
                if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                    u_xlat7.x = rint(VGlobals._IDMaskPrior1);
                    u_xlat7.yzw = rint(float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4));
                    u_xlat31.x = dot(u_xlat7, float4(1.0, 2.0, 4.0, 8.0));
                    u_xlat7.x = rint(VGlobals._IDMaskPrior5);
                    u_xlat7.yzw = rint(float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8));
                    u_xlat45 = dot(u_xlat7, float4(16.0, 32.0, 64.0, 128.0));
                    u_xlat31.x = u_xlat45 + u_xlat31.x;
                    u_xlatu31 = uint(u_xlat31.x);
                    u_xlatb45 = int(u_xlatu3)!=0x0;
                    u_xlati31.x = int(u_xlatu3 & u_xlatu31);
                    u_xlatb31 = int(u_xlatu3)==u_xlati31.x;
                    u_xlati18 = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb45) * 0xffffffffu));
                } else {
                    u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                    u_xlat7.xy = float2(u_xlati31.yx);
                    u_xlati8 = int4(u_xlatu3) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                    u_xlat8 = float4(u_xlati8.wxyz);
                    u_xlati3.xz = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                    u_xlat3.xz = float2(u_xlati3.xz);
                    u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                    u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                    u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                    u_xlat7.x = (-u_xlat7.x);
                    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                    u_xlat8 = (-u_xlat8);
                    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                    u_xlat9.zw = u_xlat10.zw;
                    u_xlat7.yzw = u_xlat8.yzw;
                    u_xlat7 = u_xlat7 * u_xlat9;
                    u_xlat10.zw = u_xlat3.xz + float2(1.0, 1.0);
                    u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                    u_xlat8.yz = (-u_xlat3.xz);
                    u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                    u_xlat8.w = 1.0;
                    u_xlat8 = u_xlat8 * u_xlat10;
                    u_xlat9.x = VGlobals._IDMaskPrior1;
                    u_xlat9.yzw = float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4);
                    u_xlat3.x = dot(u_xlat7, u_xlat9);
                    u_xlat7.x = VGlobals._IDMaskPrior5;
                    u_xlat7.yzw = float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8);
                    u_xlat31.x = dot(u_xlat8, u_xlat7);
                    u_xlat3.x = u_xlat31.x + u_xlat3.x;
                    u_xlati18 = int((float(0.0)!=u_xlat3.x) ? 0xFFFFFFFFu : uint(0));
                }
                u_xlati4 = int((u_xlati17!=u_xlati18) ? 0xFFFFFFFFu : uint(0));
                u_xlati17 = int(uint(u_xlati17) & uint(u_xlati18));
            } else {
                u_xlati4 = int(int(0xffffffffu));
                u_xlati18 = int(0x0);
            }
            u_xlatb7 = (float4(VGlobals._UDIMDiscardMode, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV)==float4(0.0, 0.0, 1.0, 2.0));
            u_xlatb3 = VGlobals._UDIMDiscardCompile==1.0;
            u_xlatb3 = u_xlatb3 && u_xlatb7.x;
            u_xlat7.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb7.yzw));
            u_xlat8 = u_xlat1 * u_xlat7.xxyy;
            u_xlat31.xy = u_xlat8.zw + u_xlat8.xy;
            u_xlat31.xy = fma(u_xlat2.xy, u_xlat7.zz, u_xlat31.xy);
            u_xlatb32 = VGlobals._UDIMDiscardUV==3.0;
            u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);
            u_xlat31.xy = fma(u_xlat2.zw, float2(u_xlat32), u_xlat31.xy);
            u_xlatb7 = (u_xlat31.xxxx>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb8 = (u_xlat31.xxxx<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati9 = int4((uint4(u_xlatb7) * 0xffffffffu) & (uint4(u_xlatb8) * 0xffffffffu));
            u_xlat9 = as_type<float4>(uint4(u_xlati9) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlatb10 = (u_xlat31.yyyy>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb11 = (u_xlat31.yyyy<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati12 = int4((uint4(u_xlatb10) * 0xffffffffu) & (uint4(u_xlatb11) * 0xffffffffu));
            u_xlat12 = as_type<float4>(uint4(u_xlati12) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow0_0, VGlobals._UDIMDiscardRow0_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow0_2, VGlobals._UDIMDiscardRow0_3);
            u_xlat31.x = dot(u_xlat13, u_xlat9);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow1_0, VGlobals._UDIMDiscardRow1_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow1_2, VGlobals._UDIMDiscardRow1_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat45 = u_xlat45 * u_xlat12.y;
            u_xlat31.x = fma(u_xlat12.x, u_xlat31.x, u_xlat45);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow2_0, VGlobals._UDIMDiscardRow2_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow2_2, VGlobals._UDIMDiscardRow2_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat31.x = fma(u_xlat12.z, u_xlat45, u_xlat31.x);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow3_0, VGlobals._UDIMDiscardRow3_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow3_2, VGlobals._UDIMDiscardRow3_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat31.x = fma(u_xlat12.w, u_xlat45, u_xlat31.x);
            u_xlatb8.x = u_xlatb10.x;
            u_xlatb8.y = u_xlatb11.w;
            u_xlatb8.z = u_xlatb7.x;
            u_xlat7 = select(float4(0.0, 0.0, 0.0, 0.0), float4(1.0, 1.0, 1.0, 1.0), bool4(u_xlatb8));
            u_xlat45 = dot(u_xlat7, u_xlat7);
            u_xlatb45 = u_xlat45!=0.0;
            u_xlat45 = u_xlatb45 ? 1.0 : float(0.0);
            u_xlat31.x = u_xlat45 * u_xlat31.x;
            u_xlatb31 = 0.00100000005<u_xlat31.x;
            u_xlatb3 = u_xlatb31 && u_xlatb3;
            u_xlati3.x = int((uint(u_xlatb3) * 0xffffffffu) | uint(u_xlati17));
            output.mtl_Position = (u_xlati3.x != 0) ? float4(as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u))) : u_xlat6;
            u_xlati3.x = int(bitFieldInsert(0x1u, 0x1u, uint(u_xlati18), 0x0u));
            u_xlati3.x = int(bitFieldInsert(0x1u, 0x0u, uint(u_xlati4), uint(u_xlati3.x)));
            u_xlat0.w = float(u_xlati3.x);
            output.TEXCOORD0 = u_xlat1;
            output.TEXCOORD1 = u_xlat2;
            output.TEXCOORD2 = u_xlat0;
            phase0_Output0_4.xyz = u_xlat5.xyz;
            phase0_Output0_4.w = 1.0;
            output.TEXCOORD5.w = u_xlat4.w;
        } else {
            output.mtl_Position = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD1 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_4 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD4.xyz = float3(0.0, 0.0, 0.0);
            output.TEXCOORD6.xyz = float3(0.0, 0.0, 0.0);
            output.TEXCOORD7.xyz = float3(0.0, 0.0, 0.0);
            output.TEXCOORD8.xyz = float3(0.0, 0.0, 0.0);
        }
    output.TEXCOORD3 = phase0_Output0_4.xyz;
    output.TEXCOORD9 = phase0_Output0_4.w;
        return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation failed: 

program_source:829:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:837:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
                             ^
program_source:838:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
                                               ^
program_source:1096:49: error: member reference base type 'uint' (aka 'unsigned int') is not a structure or union
                u_xlatu3 = input.cp[0].TEXCOORD8.x;
                           ~~~~~~~~~~~~~~~~~~~~~^~



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float3 NORMAL0 [[ attribute(9) ]] ;
    float4 TANGENT0 [[ attribute(10) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    uint mtl_VertexID,
    uint mtl_BaseVertex,
    Mtl_VertexIn input)
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseVertex = 0;
#endif
    mtl_VertexID = mtl_VertexID - mtl_BaseVertex;
    Mtl_VertexOut output;
    output.mtl_Position = input.POSITION0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = input.TEXCOORD1.xy;
    output.TEXCOORD2.xy = input.TEXCOORD2.xy;
    output.TEXCOORD3.xy = input.TEXCOORD3.xy;
    output.TEXCOORD4.xy = input.TEXCOORD4.xy;
    output.TEXCOORD5.xy = input.TEXCOORD5.xy;
    output.TEXCOORD6.xy = input.TEXCOORD6.xy;
    output.TEXCOORD7.xy = input.TEXCOORD7.xy;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TANGENT0 = input.TANGENT0;
    output.TEXCOORD8 = mtl_VertexID;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(11) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float3 NORMAL0 [[ attribute(9) ]] ;
    float4 TANGENT0 [[ attribute(10) ]] ;
    uint TEXCOORD8 [[ attribute(12) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
    float3 unity_LightColor0;
    float3 unity_LightColor1;
    float3 unity_LightColor2;
    float3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
    float4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _LightColor0;
    float4 _SpecColor;
    bool4 unity_MetaVertexControl;
    bool4 unity_MetaFragmentControl;
    int unity_VisualizationMode;
    float unity_OneOverOutputBoost;
    float unity_MaxOutputValue;
    float unity_UseLinearSpace;
    float4 _lilBackgroundTexture_TexelSize;
    float4 _LightDirectionOverride;
    float4 _BackfaceColor;
    float4 _PreColor;
    float4 _Color;
    float4 _MainTex_ST;
    float4 _MainTex_ScrollRotate;
    float4 _MainTexHSVG;
    float4 _Color2nd;
    float4 _Main2ndTex_ST;
    float4 _Main2ndTex_ScrollRotate;
    float4 _Main2ndDistanceFade;
    float4 _Main2ndTexDecalAnimation;
    float4 _Main2ndTexDecalSubParam;
    float4 _Main2ndDissolveMask_ST;
    float4 _Main2ndDissolveColor;
    float4 _Main2ndDissolveParams;
    float4 _Main2ndDissolvePos;
    float4 _Main2ndDissolveNoiseMask_ST;
    float4 _Main2ndDissolveNoiseMask_ScrollRotate;
    float4 _Color3rd;
    float4 _Main3rdTex_ST;
    float4 _Main3rdTex_ScrollRotate;
    float4 _Main3rdDistanceFade;
    float4 _Main3rdTexDecalAnimation;
    float4 _Main3rdTexDecalSubParam;
    float4 _Main3rdDissolveMask_ST;
    float4 _Main3rdDissolveColor;
    float4 _Main3rdDissolveParams;
    float4 _Main3rdDissolvePos;
    float4 _Main3rdDissolveNoiseMask_ST;
    float4 _Main3rdDissolveNoiseMask_ScrollRotate;
    float4 _ShadowColor;
    float4 _Shadow2ndColor;
    float4 _Shadow3rdColor;
    float4 _ShadowBorderColor;
    float4 _ShadowAOShift;
    float4 _ShadowAOShift2;
    float4 _RimShadeColor;
    float4 _BacklightColor;
    float4 _BacklightColorTex_ST;
    float4 _EmissionColor;
    float4 _EmissionBlink;
    float4 _EmissionMap_ST;
    float4 _EmissionMap_ScrollRotate;
    float4 _EmissionBlendMask_ST;
    float4 _EmissionBlendMask_ScrollRotate;
    float4 _Emission2ndColor;
    float4 _Emission2ndBlink;
    float4 _Emission2ndMap_ST;
    float4 _Emission2ndMap_ScrollRotate;
    float4 _Emission2ndBlendMask_ST;
    float4 _Emission2ndBlendMask_ScrollRotate;
    float4 _BumpMap_ST;
    float4 _Bump2ndMap_ST;
    float4 _Bump2ndScaleMask_ST;
    float4 _AnisotropyTangentMap_ST;
    float4 _AnisotropyScaleMask_ST;
    float4 _AnisotropyShiftNoiseMask_ST;
    float4 _ReflectionColor;
    float4 _MetallicGlossMap_ST;
    float4 _ReflectionColorTex_ST;
    float4 _SmoothnessTex_ST;
    float4 _ReflectionCubeColor;
    float4 _ReflectionCubeTex_HDR;
    float4 _MatCapColor;
    float4 _MatCapTex_ST;
    float4 _MatCapBlendMask_ST;
    float4 _MatCapBlendUV1;
    float4 _MatCapBumpMap_ST;
    float4 _MatCap2ndColor;
    float4 _MatCap2ndTex_ST;
    float4 _MatCap2ndBlendMask_ST;
    float4 _MatCap2ndBlendUV1;
    float4 _MatCap2ndBumpMap_ST;
    float4 _RimColor;
    float4 _RimColorTex_ST;
    float4 _RimIndirColor;
    float4 _GlitterColor;
    float4 _GlitterColorTex_ST;
    float4 _GlitterParams1;
    float4 _GlitterParams2;
    float4 _GlitterShapeTex_ST;
    float4 _GlitterAtras;
    float4 _DistanceFade;
    float4 _DistanceFadeColor;
    float4 _DistanceFadeRimColor;
    float4 _DitherTex_TexelSize;
    float4 _AudioLinkMask_ST;
    float4 _AudioLinkMask_ScrollRotate;
    float4 _AudioLinkDefaultValue;
    float4 _AudioLinkUVParams;
    float4 _AudioLinkStart;
    float4 _AudioLinkVertexUVParams;
    float4 _AudioLinkVertexStart;
    float4 _AudioLinkVertexStrength;
    float4 _AudioLinkLocalMapParams;
    float4 _DissolveMask_ST;
    float4 _DissolveColor;
    float4 _DissolveParams;
    float4 _DissolvePos;
    float4 _DissolveNoiseMask_ST;
    float4 _DissolveNoiseMask_ScrollRotate;
    float4 _OutlineColor;
    float4 _OutlineLitColor;
    float4 _OutlineTex_ST;
    float4 _OutlineTex_ScrollRotate;
    float4 _OutlineTexHSVG;
    float _AsUnlit;
    float _Cutoff;
    float _PreCutoff;
    float _SubpassCutoff;
    float _FlipNormal;
    float _ShiftBackfaceUV;
    float _VertexLightStrength;
    float _LightMinLimit;
    float _LightMaxLimit;
    float _MonochromeLighting;
    float _AAStrength;
    float _AlphaBoostFA;
    float _MainGradationStrength;
    float _Main2ndTexAngle;
    float _Main2ndEnableLighting;
    float _Main2ndDissolveNoiseStrength;
    float _Main3rdTexAngle;
    float _Main3rdEnableLighting;
    float _Main3rdDissolveNoiseStrength;
    float4 _AlphaMask_ST;
    float _AlphaMaskScale;
    float _AlphaMaskValue;
    float _BackfaceForceShadow;
    float _ShadowStrength;
    float _ShadowNormalStrength;
    float _ShadowBorder;
    float _ShadowBlur;
    float _ShadowStrengthMaskLOD;
    float _ShadowBorderMaskLOD;
    float _ShadowBlurMaskLOD;
    float _Shadow2ndNormalStrength;
    float _Shadow2ndBorder;
    float _Shadow2ndBlur;
    float _Shadow3rdNormalStrength;
    float _Shadow3rdBorder;
    float _Shadow3rdBlur;
    float _ShadowMainStrength;
    float _ShadowEnvStrength;
    float _ShadowBorderRange;
    float _ShadowReceive;
    float _Shadow2ndReceive;
    float _Shadow3rdReceive;
    float _ShadowFlatBlur;
    float _ShadowFlatBorder;
    float _RimShadeNormalStrength;
    float _RimShadeBorder;
    float _RimShadeBlur;
    float _RimShadeFresnelPower;
    float _BacklightNormalStrength;
    float _BacklightBorder;
    float _BacklightBlur;
    float _BacklightDirectivity;
    float _BacklightViewStrength;
    float _BacklightBackfaceMask;
    float _BacklightMainStrength;
    float _BumpScale;
    float _Bump2ndScale;
    float _AnisotropyScale;
    float _AnisotropyTangentWidth;
    float _AnisotropyBitangentWidth;
    float _AnisotropyShift;
    float _AnisotropyShiftNoiseScale;
    float _AnisotropySpecularStrength;
    float _Anisotropy2ndTangentWidth;
    float _Anisotropy2ndBitangentWidth;
    float _Anisotropy2ndShift;
    float _Anisotropy2ndShiftNoiseScale;
    float _Anisotropy2ndSpecularStrength;
    float _Reflectance;
    float _SpecularNormalStrength;
    float _SpecularBorder;
    float _SpecularBlur;
    float _ReflectionNormalStrength;
    float _ReflectionCubeEnableLighting;
    float _Smoothness;
    float _Metallic;
    float _GSAAStrength;
    float _MatCapBlend;
    float _MatCapEnableLighting;
    float _MatCapShadowMask;
    float _MatCapVRParallaxStrength;
    float _MatCapBackfaceMask;
    float _MatCapLod;
    float _MatCapNormalStrength;
    float _MatCapMainStrength;
    float _MatCapBumpScale;
    float _MatCap2ndBlend;
    float _MatCap2ndEnableLighting;
    float _MatCap2ndShadowMask;
    float _MatCap2ndVRParallaxStrength;
    float _MatCap2ndBackfaceMask;
    float _MatCap2ndLod;
    float _MatCap2ndNormalStrength;
    float _MatCap2ndMainStrength;
    float _MatCap2ndBumpScale;
    float _RimNormalStrength;
    float _RimBorder;
    float _RimBlur;
    float _RimFresnelPower;
    float _RimEnableLighting;
    float _RimShadowMask;
    float _RimVRParallaxStrength;
    float _RimBackfaceMask;
    float _RimMainStrength;
    float _RimDirStrength;
    float _RimDirRange;
    float _RimIndirRange;
    float _RimIndirBorder;
    float _RimIndirBlur;
    float _GlitterMainStrength;
    float _GlitterPostContrast;
    float _GlitterSensitivity;
    float _GlitterNormalStrength;
    float _GlitterEnableLighting;
    float _GlitterShadowMask;
    float _GlitterVRParallaxStrength;
    float _GlitterBackfaceMask;
    float _GlitterScaleRandomize;
    float _DistanceFadeRimFresnelPower;
    float _EmissionBlend;
    float _EmissionParallaxDepth;
    float _EmissionFluorescence;
    float _EmissionMainStrength;
    float _EmissionGradSpeed;
    float _Emission2ndBlend;
    float _Emission2ndParallaxDepth;
    float _Emission2ndFluorescence;
    float _Emission2ndMainStrength;
    float _Emission2ndGradSpeed;
    float _Parallax;
    float _ParallaxOffset;
    float _DitherMaxValue;
    float _AudioLink2EmissionGrad;
    float _AudioLink2Emission2ndGrad;
    float _DissolveNoiseStrength;
    float _IDMask1;
    float _IDMask2;
    float _IDMask3;
    float _IDMask4;
    float _IDMask5;
    float _IDMask6;
    float _IDMask7;
    float _IDMask8;
    float _IDMaskPrior1;
    float _IDMaskPrior2;
    float _IDMaskPrior3;
    float _IDMaskPrior4;
    float _IDMaskPrior5;
    float _IDMaskPrior6;
    float _IDMaskPrior7;
    float _IDMaskPrior8;
    float _UDIMDiscardCompile;
    float _UDIMDiscardMode;
    float _UDIMDiscardUV;
    float _UDIMDiscardRow3_0;
    float _UDIMDiscardRow3_1;
    float _UDIMDiscardRow3_2;
    float _UDIMDiscardRow3_3;
    float _UDIMDiscardRow2_0;
    float _UDIMDiscardRow2_1;
    float _UDIMDiscardRow2_2;
    float _UDIMDiscardRow2_3;
    float _UDIMDiscardRow1_0;
    float _UDIMDiscardRow1_1;
    float _UDIMDiscardRow1_2;
    float _UDIMDiscardRow1_3;
    float _UDIMDiscardRow0_0;
    float _UDIMDiscardRow0_1;
    float _UDIMDiscardRow0_2;
    float _UDIMDiscardRow0_3;
    float _lilShadowCasterBias;
    float _OutlineLitScale;
    float _OutlineLitOffset;
    float _OutlineWidth;
    float _OutlineEnableLighting;
    float _OutlineVectorScale;
    float _OutlineFixWidth;
    float _OutlineZBias;
    float _TessEdge;
    float _TessStrength;
    float _TessShrink;
    float _TessFactorMax;
    int _IDMaskIndex1;
    int _IDMaskIndex2;
    int _IDMaskIndex3;
    int _IDMaskIndex4;
    int _IDMaskIndex5;
    int _IDMaskIndex6;
    int _IDMaskIndex7;
    int _IDMaskIndex8;
    uint _IDMaskFrom;
    uint _IDMaskIsBitmap;
    uint _IDMaskControlsDissolve;
    uint _Cull;
    uint _OutlineCull;
    uint _PreOutType;
    uint _Main2ndTexBlendMode;
    uint _Main2ndTexAlphaMode;
    uint _Main2ndTex_UVMode;
    uint _Main2ndTex_Cull;
    uint _Main3rdTexBlendMode;
    uint _Main3rdTexAlphaMode;
    uint _Main3rdTex_UVMode;
    uint _Main3rdTex_Cull;
    uint _AlphaMaskMode;
    uint _ShadowColorType;
    uint _ShadowMaskType;
    uint _Bump2ndMap_UVMode;
    uint _ReflectionBlendMode;
    uint _MatCapBlendMode;
    uint _MatCap2ndBlendMode;
    uint _RimBlendMode;
    uint _GlitterUVMode;
    uint _EmissionMap_UVMode;
    uint _EmissionBlendMode;
    uint _Emission2ndMap_UVMode;
    uint _Emission2ndBlendMode;
    uint _AudioLinkUVMode;
    uint _AudioLinkMask_UVMode;
    uint _AudioLinkVertexUVMode;
    uint _DistanceFadeMode;
    uint _UseDither;
    uint _OutlineVertexR2Width;
    uint _OutlineVectorUVMode;
    uint _Invisible;
    uint _UseMain2ndTex;
    uint _Main2ndTexIsMSDF;
    uint _Main2ndTexIsDecal;
    uint _Main2ndTexIsLeftOnly;
    uint _Main2ndTexIsRightOnly;
    uint _Main2ndTexShouldCopy;
    uint _Main2ndTexShouldFlipMirror;
    uint _Main2ndTexShouldFlipCopy;
    uint _UseMain3rdTex;
    uint _Main3rdTexIsMSDF;
    uint _Main3rdTexIsDecal;
    uint _Main3rdTexIsLeftOnly;
    uint _Main3rdTexIsRightOnly;
    uint _Main3rdTexShouldCopy;
    uint _Main3rdTexShouldFlipMirror;
    uint _Main3rdTexShouldFlipCopy;
    uint _UseShadow;
    uint _ShadowPostAO;
    uint _UseRimShade;
    uint _UseBacklight;
    uint _BacklightReceiveShadow;
    uint _UseBumpMap;
    uint _UseBump2ndMap;
    uint _UseAnisotropy;
    uint _Anisotropy2Reflection;
    uint _Anisotropy2MatCap;
    uint _Anisotropy2MatCap2nd;
    uint _UseReflection;
    uint _ApplySpecular;
    uint _ApplySpecularFA;
    uint _ApplyReflection;
    uint _SpecularToon;
    uint _ReflectionApplyTransparency;
    uint _ReflectionCubeOverride;
    uint _UseMatCap;
    uint _MatCapApplyTransparency;
    uint _MatCapPerspective;
    uint _MatCapZRotCancel;
    uint _MatCapCustomNormal;
    uint _UseMatCap2nd;
    uint _MatCap2ndApplyTransparency;
    uint _MatCap2ndPerspective;
    uint _MatCap2ndZRotCancel;
    uint _MatCap2ndCustomNormal;
    uint _UseRim;
    uint _RimApplyTransparency;
    uint _UseGlitter;
    uint _GlitterColorTex_UVMode;
    uint _GlitterApplyTransparency;
    uint _GlitterApplyShape;
    uint _GlitterAngleRandomize;
    uint _UseEmission;
    uint _EmissionUseGrad;
    uint _UseEmission2nd;
    uint _Emission2ndUseGrad;
    uint _UseParallax;
    uint _UsePOM;
    uint _UseAudioLink;
    uint _AudioLink2Main2nd;
    uint _AudioLink2Main3rd;
    uint _AudioLink2Emission;
    uint _AudioLink2Emission2nd;
    uint _AudioLink2Vertex;
    uint _AudioLinkAsLocal;
    uint _OutlineLitApplyTex;
    uint _OutlineLitShadowReceive;
    uint _OutlineDeleteMesh;
    uint _OutlineDisableInVR;
    float4 _AudioTexture_TexelSize;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    // mtl_VertexID generated in compute kernel,
    // mtl_BaseVertex generated in compute kernel,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(mtl_VertexID, mtl_BaseVertex, vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.TEXCOORD4 = input.cp[controlPointID].TEXCOORD4;
        output.TEXCOORD5 = input.cp[controlPointID].TEXCOORD5;
        output.TEXCOORD6 = input.cp[controlPointID].TEXCOORD6;
        output.TEXCOORD7 = input.cp[controlPointID].TEXCOORD7;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float4 u_xlat1;
    int2 u_xlati1;
    bool4 u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    bool2 u_xlatb3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float3 u_xlat11;
    float u_xlat22;
    bool2 u_xlatb23;
    int2 u_xlati24;
    bool2 u_xlatb24;
    float u_xlat33;
    float u_xlat34;
    // fork_phase2
    {
        if((VGlobals._Invisible)!=uint(0)){
            tessFactor.edgeTessellationFactor[0] = 0.0;
            tessFactor.edgeTessellationFactor[1] = 0.0;
            tessFactor.edgeTessellationFactor[2] = 0.0;
            tessFactor.insideTessellationFactor = 0.0;
            return;
        }
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].mtl_Position.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].mtl_Position.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].mtl_Position.zzz, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].mtl_Position.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].mtl_Position.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].mtl_Position.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat3.xyz = u_xlat2.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].mtl_Position.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].mtl_Position.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].mtl_Position.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat4.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat4.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat6.x = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
        u_xlat7.x = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat7.xyz = float3(u_xlat33) * u_xlat7.xyz;
        u_xlat8.x = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat8.y = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat8.z = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
        u_xlat9.xyz = u_xlat2.xyz + u_xlat4.xyz;
        u_xlat9.xyz = fma(u_xlat9.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat9.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
        u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.x = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat4.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat4.xyz;
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.y = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.z = max(u_xlat33, 1.0);
        u_xlat9.xyz = min(u_xlat9.xyz, float3(VGlobals._TessFactorMax));
        u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
        u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
        u_xlat11.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat34 = dot(u_xlat11.xyz, u_xlat11.xyz);
        u_xlat34 = rsqrt(u_xlat34);
        u_xlat11.xyz = u_xlat11.xyz * float3(u_xlat34);
        u_xlat0.y = dot(u_xlat7.xyz, u_xlat11.xyz);
        u_xlat2.xyz = (-u_xlat4.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat22 = rsqrt(u_xlat22);
        u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
        u_xlat0.z = dot(u_xlat8.xyz, u_xlat2.xyz);
        u_xlat2.xyz = abs(u_xlat0.zxy) + abs(u_xlat0.yzx);
        u_xlat0.xyz = fma((-u_xlat2.xyz), float3(0.5, 0.5, 0.5), float3(1.0, 1.0, 1.0));
        u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
        u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xyz;
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat34 = u_xlat0.y + u_xlat0.x;
        u_xlat34 = u_xlat0.z + u_xlat34;
        u_xlat0.w = u_xlat34 * 0.333333343;
        u_xlat1.xy = u_xlat1.xy / abs(u_xlat1.zz);
        u_xlat1.zw = u_xlat3.xy / abs(u_xlat3.zz);
        u_xlat2.xy = u_xlat5.xy / abs(u_xlat5.zz);
        u_xlatb24.xy = (float2(1.00999999, 1.00999999)<u_xlat1.xy);
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat1.zw);
        u_xlati24.xy = int2((uint2(u_xlatb24.xy) * 0xffffffffu) & (uint2(u_xlatb3.xy) * 0xffffffffu));
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat2.xy);
        u_xlati24.xy = int2((uint2(u_xlatb3.xy) * 0xffffffffu) & uint2(u_xlati24.xy));
        u_xlatb1 = (u_xlat1<float4(-1.00999999, -1.00999999, -1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb1.zw) * 0xffffffffu) & (uint2(u_xlatb1.xy) * 0xffffffffu));
        u_xlatb23.xy = (u_xlat2.xy<float2(-1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb23.xy) * 0xffffffffu) & uint2(u_xlati1.xy));
        u_xlati1.x = int(uint(u_xlati1.x) | uint(u_xlati24.x));
        u_xlati1.x = int(uint(u_xlati24.y) | uint(u_xlati1.x));
        u_xlati1.x = int(uint(u_xlati1.y) | uint(u_xlati1.x));
        u_xlat0 = (u_xlati1.x != 0) ? float4(0.0, 0.0, 0.0, 0.0) : u_xlat0;
        tessFactor.edgeTessellationFactor[0] = u_xlat0.x;
        tessFactor.edgeTessellationFactor[1] = u_xlat0.y;
        tessFactor.edgeTessellationFactor[2] = u_xlat0.z;
        tessFactor.insideTessellationFactor = u_xlat0.w;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float TEXCOORD9 [[ user(TEXCOORD9) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
};
		template <typename UVecType> UVecType bitFieldInsert(const UVecType width, const UVecType offset, const UVecType src2, const UVecType src3)
		{
			UVecType bitmask = (((UVecType(1) << width)-1) << offset) & 0xffffffff;
			return ((src2 << offset) & bitmask) | (src3 & ~bitmask);
		}; 
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    // mtl_VertexID unused,
    // mtl_BaseVertex unused,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    texture2d<float, access::sample > _AudioLinkLocalMap [[ texture(0) ]] ,
    texture2d<float, access::sample > _AudioTexture [[ texture(1) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    constexpr sampler lil_sampler_trilinear_repeat(filter::linear,mip_filter::linear,address::repeat);
    constexpr sampler lil_sampler_linear_clamp(filter::linear,mip_filter::nearest,address::clamp_to_edge);
        float4 phase0_Input0_1[3];
        phase0_Input0_1[2] = float4(input.cp[2].TEXCOORD0, input.cp[2].TEXCOORD1);
        phase0_Input0_1[1] = float4(input.cp[1].TEXCOORD0, input.cp[1].TEXCOORD1);
        phase0_Input0_1[0] = float4(input.cp[0].TEXCOORD0, input.cp[0].TEXCOORD1);
        float4 phase0_Input0_2[3];
        phase0_Input0_2[2] = float4(input.cp[2].TEXCOORD2, input.cp[2].TEXCOORD3);
        phase0_Input0_2[1] = float4(input.cp[1].TEXCOORD2, input.cp[1].TEXCOORD3);
        phase0_Input0_2[0] = float4(input.cp[0].TEXCOORD2, input.cp[0].TEXCOORD3);
    float4 phase0_Output0_4;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    int3 u_xlati3;
    uint u_xlatu3;
    bool u_xlatb3;
    float4 u_xlat4;
    int u_xlati4;
    bool u_xlatb4;
    float3 u_xlat5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    bool4 u_xlatb7;
    float4 u_xlat8;
    int4 u_xlati8;
    bool4 u_xlatb8;
    float4 u_xlat9;
    int4 u_xlati9;
    float4 u_xlat10;
    bool4 u_xlatb10;
    bool4 u_xlatb11;
    float4 u_xlat12;
    int4 u_xlati12;
    float4 u_xlat13;
    float3 u_xlat17;
    int u_xlati17;
    uint u_xlatu17;
    bool u_xlatb17;
    int u_xlati18;
    float2 u_xlat31;
    int2 u_xlati31;
    uint u_xlatu31;
    bool u_xlatb31;
    float u_xlat32;
    bool u_xlatb32;
    float2 u_xlat33;
    int u_xlati33;
    bool u_xlatb33;
    float u_xlat42;
    float u_xlat45;
    bool u_xlatb45;
    if((VGlobals._Invisible)==uint(0)){
        u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].mtl_Position.xyz;
        u_xlat0.xyz = fma(mtl_TessCoord.xxx, input.cp[0].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat0.xyz = fma(mtl_TessCoord.zzz, input.cp[2].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat1 = mtl_TessCoord.yyyy * phase0_Input0_1[1];
        u_xlat1 = fma(mtl_TessCoord.xxxx, phase0_Input0_1[0], u_xlat1);
        u_xlat1 = fma(mtl_TessCoord.zzzz, phase0_Input0_1[2], u_xlat1);
        u_xlat2 = mtl_TessCoord.yyyy * phase0_Input0_2[1];
        u_xlat2 = fma(mtl_TessCoord.xxxx, phase0_Input0_2[0], u_xlat2);
        u_xlat2 = fma(mtl_TessCoord.zzzz, phase0_Input0_2[2], u_xlat2);
        u_xlat3.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
        u_xlat3.xyz = fma(mtl_TessCoord.xxx, input.cp[0].NORMAL0.xyz, u_xlat3.xyz);
        u_xlat3.xyz = fma(mtl_TessCoord.zzz, input.cp[2].NORMAL0.xyz, u_xlat3.xyz);
        u_xlat4 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
        u_xlat4 = fma(mtl_TessCoord.xxxx, input.cp[0].TANGENT0, u_xlat4);
        u_xlat4 = fma(mtl_TessCoord.zzzz, input.cp[2].TANGENT0, u_xlat4);
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat3.xyz = float3(u_xlat42) * u_xlat3.xyz;
        u_xlat42 = dot(input.cp[0].mtl_Position.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat5.xyz = float3(u_xlat42) * input.cp[0].NORMAL0.xyz;
        u_xlat42 = dot(input.cp[1].mtl_Position.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat6.xyz = float3(u_xlat42) * input.cp[1].NORMAL0.xyz;
        u_xlat42 = dot(input.cp[2].mtl_Position.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat7.xyz = float3(u_xlat42) * input.cp[2].NORMAL0.xyz;
        u_xlat6.xyz = u_xlat6.xyz * mtl_TessCoord.yyy;
        u_xlat5.xyz = fma(u_xlat5.xyz, mtl_TessCoord.xxx, u_xlat6.xyz);
        u_xlat5.xyz = fma(u_xlat7.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
        u_xlat0.xyz = fma(u_xlat5.xyz, float3(VGlobals._TessStrength), u_xlat0.xyz);
        u_xlatb45 = int(VGlobals._UseAudioLink)!=0x0;
        u_xlatb5.x = int(VGlobals._AudioLink2Vertex)!=0x0;
        u_xlatb45 = u_xlatb45 && u_xlatb5.x;
        if(u_xlatb45){
            u_xlatb5.xy = (int2(VGlobals._AudioLinkVertexUVMode)==int2(0x1, 0x2));
            u_xlat6.xyz = u_xlat0.xyz + (-VGlobals._AudioLinkVertexStart.xyz);
            u_xlat45 = dot(u_xlat6.xyz, u_xlat6.xyz);
            u_xlat45 = sqrt(u_xlat45);
            u_xlat45 = fma(u_xlat45, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat45 = (u_xlatb5.x) ? u_xlat45 : VGlobals._AudioLinkVertexUVParams.y;
            u_xlat5.x = sin(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat6.x = cos(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat33.xy = u_xlat1.xy + float2(-0.5, -0.5);
            u_xlat5.x = u_xlat5.x * u_xlat33.y;
            u_xlat5.x = fma(u_xlat33.x, u_xlat6.x, (-u_xlat5.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = fma(u_xlat5.x, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat5.x = (u_xlatb5.y) ? u_xlat5.x : u_xlat45;
            if((VGlobals._AudioLinkAsLocal)!=uint(0)){
                u_xlat45 = (-VGlobals._Time.y) * VGlobals._AudioLinkLocalMapParams.x;
                u_xlat45 = u_xlat45 * VGlobals._AudioLinkLocalMapParams.y;
                u_xlat45 = u_xlat45 * 0.0166666675;
                u_xlat45 = fract(u_xlat45);
                u_xlat45 = u_xlat45 + VGlobals._AudioLinkLocalMapParams.z;
                u_xlat6.x = u_xlat45 + u_xlat5.x;
                u_xlat6.y = VGlobals._AudioLinkVertexUVParams.w;
                u_xlat45 = _AudioLinkLocalMap.sample(lil_sampler_trilinear_repeat, u_xlat6.xy, level(0.0)).x;
            } else {
                u_xlat33.x = float(_AudioTexture.get_width(0x0));
                u_xlati33 = int(u_xlat33.x);
                u_xlatb33 = 0x10<u_xlati33;
                if(u_xlatb33){
                    u_xlat5.y = VGlobals._AudioLinkVertexUVParams.w * 0.0625;
                    u_xlat45 = _AudioTexture.sample(lil_sampler_linear_clamp, u_xlat5.xy, level(0.0)).x;
                    u_xlat45 = u_xlat45;
                    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
                } else {
                    u_xlat5.x = fma(VGlobals._Time.y, VGlobals._AudioLinkDefaultValue.z, (-u_xlat5.x));
                    u_xlat5.x = fract(u_xlat5.x);
                    u_xlat5.x = u_xlat5.x + VGlobals._AudioLinkDefaultValue.w;
                    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
                    u_xlat5.x = u_xlat5.x * VGlobals._AudioLinkDefaultValue.y;
                    u_xlat45 = fma((-u_xlat5.x), VGlobals._AudioLinkDefaultValue.x, VGlobals._AudioLinkDefaultValue.x);
                    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
                }
            }
            u_xlat5.xyz = fma(u_xlat3.xyz, VGlobals._AudioLinkVertexStrength.www, VGlobals._AudioLinkVertexStrength.xyz);
            u_xlat0.xyz = fma(u_xlat5.xyz, float3(u_xlat45), u_xlat0.xyz);
        }
        u_xlat5.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat6 = u_xlat5.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
        u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat5.xxxx, u_xlat6);
        u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat5.zzzz, u_xlat6);
        u_xlat6 = u_xlat6 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
        u_xlat7.x = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        output.TEXCOORD4.xyz = u_xlat3.xxx * u_xlat7.xyz;
        u_xlat3.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat4.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat4.zzz, u_xlat3.xyz);
        u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat45 = rsqrt(u_xlat45);
        output.TEXCOORD5.xyz = float3(u_xlat45) * u_xlat3.xyz;
        u_xlat3.x = dot(VGlobals._LightColor0.xyz, float3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat17.xyz = VGlobals.unity_SHAg.xyz * float3(0.333332986, 0.333332986, 0.333332986);
        u_xlat17.xyz = fma(VGlobals.unity_SHAr.xyz, float3(0.333332986, 0.333332986, 0.333332986), u_xlat17.xyz);
        u_xlat7.xyz = fma(VGlobals.unity_SHAb.xyz, float3(0.333332986, 0.333332986, 0.333332986), u_xlat17.xyz);
        u_xlat7.w = abs(u_xlat7.y);
        u_xlat17.x = dot(VGlobals._LightDirectionOverride.xyz, VGlobals._LightDirectionOverride.xyz);
        u_xlat17.x = sqrt(u_xlat17.x);
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * VGlobals._LightDirectionOverride.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals._LightDirectionOverride.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, VGlobals._LightDirectionOverride.zzz, u_xlat4.xyz);
        u_xlat31.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat31.x = rsqrt(u_xlat31.x);
        u_xlat4.xyz = u_xlat31.xxx * u_xlat4.xyz;
        u_xlat17.xyz = u_xlat17.xxx * u_xlat4.xyz;
        u_xlatb4 = float(0.0)!=VGlobals._LightDirectionOverride.w;
        u_xlat17.xyz = (bool(u_xlatb4)) ? u_xlat17.xyz : VGlobals._LightDirectionOverride.xyz;
        u_xlat4.xyz = fma(VGlobals._WorldSpaceLightPos0.xyz, u_xlat3.xxx, u_xlat7.xwz);
        u_xlat17.xyz = u_xlat17.xyz + u_xlat4.xyz;
        u_xlat4.x = dot(u_xlat17.xyz, u_xlat17.xyz);
        u_xlat4.x = rsqrt(u_xlat4.x);
        output.TEXCOORD7.xyz = u_xlat17.xyz * u_xlat4.xxx;
        u_xlat3.xyz = fma(VGlobals._WorldSpaceLightPos0.xyz, u_xlat3.xxx, u_xlat7.xyz);
        u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlatb4 = u_xlat45<9.99999997e-07;
        u_xlat45 = rsqrt(u_xlat45);
        u_xlat3.xyz = float3(u_xlat45) * u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz * float3(0.666665971, 0.666665971, 0.666665971);
        u_xlat3.xyz = (bool(u_xlatb4)) ? float3(0.0, 0.0, 0.0) : u_xlat3.xyz;
        u_xlat7 = u_xlat3.yzzx * u_xlat3.xyzz;
        u_xlat45 = dot(VGlobals.unity_SHBr, u_xlat7);
        u_xlat4.x = u_xlat45 + VGlobals.unity_SHAr.w;
        u_xlat45 = dot(VGlobals.unity_SHBg, u_xlat7);
        u_xlat4.y = u_xlat45 + VGlobals.unity_SHAg.w;
        u_xlat45 = dot(VGlobals.unity_SHBb, u_xlat7);
        u_xlat4.z = u_xlat45 + VGlobals.unity_SHAb.w;
        u_xlat45 = u_xlat3.y * u_xlat3.y;
        u_xlat45 = fma(u_xlat3.x, u_xlat3.x, (-u_xlat45));
        u_xlat4.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat45), u_xlat4.xyz);
        u_xlat7.x = dot(VGlobals.unity_SHAr.xyz, u_xlat3.xyz);
        u_xlat7.y = dot(VGlobals.unity_SHAg.xyz, u_xlat3.xyz);
        u_xlat7.z = dot(VGlobals.unity_SHAb.xyz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat4.xyz + u_xlat7.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-u_xlat7.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals._LightColor0.xyz;
        u_xlat3.xyz = max(u_xlat3.xyz, float3(VGlobals._LightMinLimit));
        u_xlat3.xyz = min(u_xlat3.xyz, float3(VGlobals._LightMaxLimit));
        u_xlat45 = dot(u_xlat3.xyz, float3(0.333333343, 0.333333343, 0.333333343));
        u_xlat7.xyz = (-u_xlat3.xyz) + float3(u_xlat45);
        u_xlat3.xyz = fma(float3(VGlobals._MonochromeLighting), u_xlat7.xyz, u_xlat3.xyz);
        u_xlat7.xyz = (-u_xlat3.xyz) + float3(1.0, 1.0, 1.0);
        output.TEXCOORD6.xyz = fma(float3(VGlobals._AsUnlit), u_xlat7.xyz, u_xlat3.xyz);
        output.TEXCOORD8.xyz = u_xlat4.xyz * float3(VGlobals._ShadowEnvStrength);
        switch(int(int(VGlobals._IDMaskFrom))){
            case 0x0:
                u_xlatu3 = uint(u_xlat1.x);
                break;
            case 0x1:
                u_xlatu3 = uint(u_xlat1.z);
                break;
            case 0x2:
                u_xlatu3 = uint(u_xlat2.x);
                break;
            case 0x3:
                u_xlatu3 = uint(u_xlat2.z);
                break;
            case 0x4:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD4.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD4.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD4.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            case 0x5:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD5.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD5.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD5.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            case 0x6:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD6.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD6.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD6.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            case 0x7:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD7.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD7.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD7.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            default:
                u_xlatu3 = input.cp[0].TEXCOORD8.x;
                break;
            }
            if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                u_xlat7.x = rint(VGlobals._IDMask1);
                u_xlat7.yzw = rint(float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4));
                u_xlat17.x = dot(u_xlat7, float4(1.0, 2.0, 4.0, 8.0));
                u_xlat7.x = rint(VGlobals._IDMask5);
                u_xlat7.yzw = rint(float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8));
                u_xlat31.x = dot(u_xlat7, float4(16.0, 32.0, 64.0, 128.0));
                u_xlat17.x = u_xlat31.x + u_xlat17.x;
                u_xlatu17 = uint(u_xlat17.x);
                u_xlatb31 = int(u_xlatu3)!=0x0;
                u_xlati17 = int(u_xlatu3 & u_xlatu17);
                u_xlatb17 = int(u_xlatu3)==u_xlati17;
                u_xlati17 = int((uint(u_xlatb17) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            } else {
                u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                u_xlat7.xy = float2(u_xlati31.yx);
                u_xlati8 = int4(u_xlatu3) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                u_xlat8 = float4(u_xlati8.wxyz);
                u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                u_xlat31.xy = float2(u_xlati31.xy);
                u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                u_xlat7.x = (-u_xlat7.x);
                u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                u_xlat8 = (-u_xlat8);
                u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                u_xlat9.zw = u_xlat10.zw;
                u_xlat7.yzw = u_xlat8.yzw;
                u_xlat7 = u_xlat7 * u_xlat9;
                u_xlat10.zw = u_xlat31.xy + float2(1.0, 1.0);
                u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                u_xlat8.yz = (-u_xlat31.xy);
                u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                u_xlat8.w = 1.0;
                u_xlat8 = u_xlat8 * u_xlat10;
                u_xlat9.x = VGlobals._IDMask1;
                u_xlat9.yzw = float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4);
                u_xlat31.x = dot(u_xlat7, u_xlat9);
                u_xlat7.x = VGlobals._IDMask5;
                u_xlat7.yzw = float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8);
                u_xlat45 = dot(u_xlat8, u_xlat7);
                u_xlat31.x = u_xlat45 + u_xlat31.x;
                u_xlati17 = int((float(0.0)!=u_xlat31.x) ? 0xFFFFFFFFu : uint(0));
            }
            if((VGlobals._IDMaskControlsDissolve)!=uint(0)){
                if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                    u_xlat7.x = rint(VGlobals._IDMaskPrior1);
                    u_xlat7.yzw = rint(float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4));
                    u_xlat31.x = dot(u_xlat7, float4(1.0, 2.0, 4.0, 8.0));
                    u_xlat7.x = rint(VGlobals._IDMaskPrior5);
                    u_xlat7.yzw = rint(float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8));
                    u_xlat45 = dot(u_xlat7, float4(16.0, 32.0, 64.0, 128.0));
                    u_xlat31.x = u_xlat45 + u_xlat31.x;
                    u_xlatu31 = uint(u_xlat31.x);
                    u_xlatb45 = int(u_xlatu3)!=0x0;
                    u_xlati31.x = int(u_xlatu3 & u_xlatu31);
                    u_xlatb31 = int(u_xlatu3)==u_xlati31.x;
                    u_xlati18 = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb45) * 0xffffffffu));
                } else {
                    u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                    u_xlat7.xy = float2(u_xlati31.yx);
                    u_xlati8 = int4(u_xlatu3) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                    u_xlat8 = float4(u_xlati8.wxyz);
                    u_xlati3.xz = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                    u_xlat3.xz = float2(u_xlati3.xz);
                    u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                    u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                    u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                    u_xlat7.x = (-u_xlat7.x);
                    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                    u_xlat8 = (-u_xlat8);
                    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                    u_xlat9.zw = u_xlat10.zw;
                    u_xlat7.yzw = u_xlat8.yzw;
                    u_xlat7 = u_xlat7 * u_xlat9;
                    u_xlat10.zw = u_xlat3.xz + float2(1.0, 1.0);
                    u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                    u_xlat8.yz = (-u_xlat3.xz);
                    u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                    u_xlat8.w = 1.0;
                    u_xlat8 = u_xlat8 * u_xlat10;
                    u_xlat9.x = VGlobals._IDMaskPrior1;
                    u_xlat9.yzw = float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4);
                    u_xlat3.x = dot(u_xlat7, u_xlat9);
                    u_xlat7.x = VGlobals._IDMaskPrior5;
                    u_xlat7.yzw = float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8);
                    u_xlat31.x = dot(u_xlat8, u_xlat7);
                    u_xlat3.x = u_xlat31.x + u_xlat3.x;
                    u_xlati18 = int((float(0.0)!=u_xlat3.x) ? 0xFFFFFFFFu : uint(0));
                }
                u_xlati4 = int((u_xlati17!=u_xlati18) ? 0xFFFFFFFFu : uint(0));
                u_xlati17 = int(uint(u_xlati17) & uint(u_xlati18));
            } else {
                u_xlati4 = int(int(0xffffffffu));
                u_xlati18 = int(0x0);
            }
            u_xlatb7 = (float4(VGlobals._UDIMDiscardMode, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV)==float4(0.0, 0.0, 1.0, 2.0));
            u_xlatb3 = VGlobals._UDIMDiscardCompile==1.0;
            u_xlatb3 = u_xlatb3 && u_xlatb7.x;
            u_xlat7.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb7.yzw));
            u_xlat8 = u_xlat1 * u_xlat7.xxyy;
            u_xlat31.xy = u_xlat8.zw + u_xlat8.xy;
            u_xlat31.xy = fma(u_xlat2.xy, u_xlat7.zz, u_xlat31.xy);
            u_xlatb32 = VGlobals._UDIMDiscardUV==3.0;
            u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);
            u_xlat31.xy = fma(u_xlat2.zw, float2(u_xlat32), u_xlat31.xy);
            u_xlatb7 = (u_xlat31.xxxx>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb8 = (u_xlat31.xxxx<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati9 = int4((uint4(u_xlatb7) * 0xffffffffu) & (uint4(u_xlatb8) * 0xffffffffu));
            u_xlat9 = as_type<float4>(uint4(u_xlati9) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlatb10 = (u_xlat31.yyyy>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb11 = (u_xlat31.yyyy<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati12 = int4((uint4(u_xlatb10) * 0xffffffffu) & (uint4(u_xlatb11) * 0xffffffffu));
            u_xlat12 = as_type<float4>(uint4(u_xlati12) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow0_0, VGlobals._UDIMDiscardRow0_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow0_2, VGlobals._UDIMDiscardRow0_3);
            u_xlat31.x = dot(u_xlat13, u_xlat9);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow1_0, VGlobals._UDIMDiscardRow1_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow1_2, VGlobals._UDIMDiscardRow1_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat45 = u_xlat45 * u_xlat12.y;
            u_xlat31.x = fma(u_xlat12.x, u_xlat31.x, u_xlat45);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow2_0, VGlobals._UDIMDiscardRow2_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow2_2, VGlobals._UDIMDiscardRow2_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat31.x = fma(u_xlat12.z, u_xlat45, u_xlat31.x);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow3_0, VGlobals._UDIMDiscardRow3_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow3_2, VGlobals._UDIMDiscardRow3_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat31.x = fma(u_xlat12.w, u_xlat45, u_xlat31.x);
            u_xlatb8.x = u_xlatb10.x;
            u_xlatb8.y = u_xlatb11.w;
            u_xlatb8.z = u_xlatb7.x;
            u_xlat7 = select(float4(0.0, 0.0, 0.0, 0.0), float4(1.0, 1.0, 1.0, 1.0), bool4(u_xlatb8));
            u_xlat45 = dot(u_xlat7, u_xlat7);
            u_xlatb45 = u_xlat45!=0.0;
            u_xlat45 = u_xlatb45 ? 1.0 : float(0.0);
            u_xlat31.x = u_xlat45 * u_xlat31.x;
            u_xlatb31 = 0.00100000005<u_xlat31.x;
            u_xlatb3 = u_xlatb31 && u_xlatb3;
            u_xlati3.x = int((uint(u_xlatb3) * 0xffffffffu) | uint(u_xlati17));
            output.mtl_Position = (u_xlati3.x != 0) ? float4(as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u))) : u_xlat6;
            u_xlati3.x = int(bitFieldInsert(0x1u, 0x1u, uint(u_xlati18), 0x0u));
            u_xlati3.x = int(bitFieldInsert(0x1u, 0x0u, uint(u_xlati4), uint(u_xlati3.x)));
            u_xlat0.w = float(u_xlati3.x);
            output.TEXCOORD0 = u_xlat1;
            output.TEXCOORD1 = u_xlat2;
            output.TEXCOORD2 = u_xlat0;
            phase0_Output0_4.xyz = u_xlat5.xyz;
            phase0_Output0_4.w = 1.0;
            output.TEXCOORD5.w = u_xlat4.w;
        } else {
            output.mtl_Position = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD1 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_4 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD4.xyz = float3(0.0, 0.0, 0.0);
            output.TEXCOORD6.xyz = float3(0.0, 0.0, 0.0);
            output.TEXCOORD7.xyz = float3(0.0, 0.0, 0.0);
            output.TEXCOORD8.xyz = float3(0.0, 0.0, 0.0);
        }
    output.TEXCOORD3 = phase0_Output0_4.xyz;
    output.TEXCOORD9 = phase0_Output0_4.w;
        return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation failed: 

program_source:832:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:842:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
                             ^
program_source:843:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
                                               ^
program_source:1194:50: error: member reference base type 'uint' (aka 'unsigned int') is not a structure or union
                u_xlatu42 = input.cp[0].TEXCOORD8.x;
                            ~~~~~~~~~~~~~~~~~~~~~^~



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float4 COLOR0 [[ attribute(9) ]] ;
    float3 NORMAL0 [[ attribute(10) ]] ;
    float4 TANGENT0 [[ attribute(11) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    uint mtl_VertexID,
    uint mtl_BaseVertex,
    Mtl_VertexIn input)
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseVertex = 0;
#endif
    mtl_VertexID = mtl_VertexID - mtl_BaseVertex;
    Mtl_VertexOut output;
    output.mtl_Position = input.POSITION0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = input.TEXCOORD1.xy;
    output.TEXCOORD2.xy = input.TEXCOORD2.xy;
    output.TEXCOORD3.xy = input.TEXCOORD3.xy;
    output.TEXCOORD4.xy = input.TEXCOORD4.xy;
    output.TEXCOORD5.xy = input.TEXCOORD5.xy;
    output.TEXCOORD6.xy = input.TEXCOORD6.xy;
    output.TEXCOORD7.xy = input.TEXCOORD7.xy;
    output.COLOR0 = input.COLOR0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TANGENT0 = input.TANGENT0;
    output.TEXCOORD8 = mtl_VertexID;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(12) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float4 COLOR0 [[ attribute(9) ]] ;
    float3 NORMAL0 [[ attribute(10) ]] ;
    float4 TANGENT0 [[ attribute(11) ]] ;
    uint TEXCOORD8 [[ attribute(13) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
    float3 unity_LightColor0;
    float3 unity_LightColor1;
    float3 unity_LightColor2;
    float3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
    float4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _LightColor0;
    float4 _SpecColor;
    bool4 unity_MetaVertexControl;
    bool4 unity_MetaFragmentControl;
    int unity_VisualizationMode;
    float unity_OneOverOutputBoost;
    float unity_MaxOutputValue;
    float unity_UseLinearSpace;
    float4 _lilBackgroundTexture_TexelSize;
    float4 _LightDirectionOverride;
    float4 _BackfaceColor;
    float4 _PreColor;
    float4 _Color;
    float4 _MainTex_ST;
    float4 _MainTex_ScrollRotate;
    float4 _MainTexHSVG;
    float4 _Color2nd;
    float4 _Main2ndTex_ST;
    float4 _Main2ndTex_ScrollRotate;
    float4 _Main2ndDistanceFade;
    float4 _Main2ndTexDecalAnimation;
    float4 _Main2ndTexDecalSubParam;
    float4 _Main2ndDissolveMask_ST;
    float4 _Main2ndDissolveColor;
    float4 _Main2ndDissolveParams;
    float4 _Main2ndDissolvePos;
    float4 _Main2ndDissolveNoiseMask_ST;
    float4 _Main2ndDissolveNoiseMask_ScrollRotate;
    float4 _Color3rd;
    float4 _Main3rdTex_ST;
    float4 _Main3rdTex_ScrollRotate;
    float4 _Main3rdDistanceFade;
    float4 _Main3rdTexDecalAnimation;
    float4 _Main3rdTexDecalSubParam;
    float4 _Main3rdDissolveMask_ST;
    float4 _Main3rdDissolveColor;
    float4 _Main3rdDissolveParams;
    float4 _Main3rdDissolvePos;
    float4 _Main3rdDissolveNoiseMask_ST;
    float4 _Main3rdDissolveNoiseMask_ScrollRotate;
    float4 _ShadowColor;
    float4 _Shadow2ndColor;
    float4 _Shadow3rdColor;
    float4 _ShadowBorderColor;
    float4 _ShadowAOShift;
    float4 _ShadowAOShift2;
    float4 _RimShadeColor;
    float4 _BacklightColor;
    float4 _BacklightColorTex_ST;
    float4 _EmissionColor;
    float4 _EmissionBlink;
    float4 _EmissionMap_ST;
    float4 _EmissionMap_ScrollRotate;
    float4 _EmissionBlendMask_ST;
    float4 _EmissionBlendMask_ScrollRotate;
    float4 _Emission2ndColor;
    float4 _Emission2ndBlink;
    float4 _Emission2ndMap_ST;
    float4 _Emission2ndMap_ScrollRotate;
    float4 _Emission2ndBlendMask_ST;
    float4 _Emission2ndBlendMask_ScrollRotate;
    float4 _BumpMap_ST;
    float4 _Bump2ndMap_ST;
    float4 _Bump2ndScaleMask_ST;
    float4 _AnisotropyTangentMap_ST;
    float4 _AnisotropyScaleMask_ST;
    float4 _AnisotropyShiftNoiseMask_ST;
    float4 _ReflectionColor;
    float4 _MetallicGlossMap_ST;
    float4 _ReflectionColorTex_ST;
    float4 _SmoothnessTex_ST;
    float4 _ReflectionCubeColor;
    float4 _ReflectionCubeTex_HDR;
    float4 _MatCapColor;
    float4 _MatCapTex_ST;
    float4 _MatCapBlendMask_ST;
    float4 _MatCapBlendUV1;
    float4 _MatCapBumpMap_ST;
    float4 _MatCap2ndColor;
    float4 _MatCap2ndTex_ST;
    float4 _MatCap2ndBlendMask_ST;
    float4 _MatCap2ndBlendUV1;
    float4 _MatCap2ndBumpMap_ST;
    float4 _RimColor;
    float4 _RimColorTex_ST;
    float4 _RimIndirColor;
    float4 _GlitterColor;
    float4 _GlitterColorTex_ST;
    float4 _GlitterParams1;
    float4 _GlitterParams2;
    float4 _GlitterShapeTex_ST;
    float4 _GlitterAtras;
    float4 _DistanceFade;
    float4 _DistanceFadeColor;
    float4 _DistanceFadeRimColor;
    float4 _DitherTex_TexelSize;
    float4 _AudioLinkMask_ST;
    float4 _AudioLinkMask_ScrollRotate;
    float4 _AudioLinkDefaultValue;
    float4 _AudioLinkUVParams;
    float4 _AudioLinkStart;
    float4 _AudioLinkVertexUVParams;
    float4 _AudioLinkVertexStart;
    float4 _AudioLinkVertexStrength;
    float4 _AudioLinkLocalMapParams;
    float4 _DissolveMask_ST;
    float4 _DissolveColor;
    float4 _DissolveParams;
    float4 _DissolvePos;
    float4 _DissolveNoiseMask_ST;
    float4 _DissolveNoiseMask_ScrollRotate;
    float4 _OutlineColor;
    float4 _OutlineLitColor;
    float4 _OutlineTex_ST;
    float4 _OutlineTex_ScrollRotate;
    float4 _OutlineTexHSVG;
    float _AsUnlit;
    float _Cutoff;
    float _PreCutoff;
    float _SubpassCutoff;
    float _FlipNormal;
    float _ShiftBackfaceUV;
    float _VertexLightStrength;
    float _LightMinLimit;
    float _LightMaxLimit;
    float _MonochromeLighting;
    float _AAStrength;
    float _AlphaBoostFA;
    float _MainGradationStrength;
    float _Main2ndTexAngle;
    float _Main2ndEnableLighting;
    float _Main2ndDissolveNoiseStrength;
    float _Main3rdTexAngle;
    float _Main3rdEnableLighting;
    float _Main3rdDissolveNoiseStrength;
    float4 _AlphaMask_ST;
    float _AlphaMaskScale;
    float _AlphaMaskValue;
    float _BackfaceForceShadow;
    float _ShadowStrength;
    float _ShadowNormalStrength;
    float _ShadowBorder;
    float _ShadowBlur;
    float _ShadowStrengthMaskLOD;
    float _ShadowBorderMaskLOD;
    float _ShadowBlurMaskLOD;
    float _Shadow2ndNormalStrength;
    float _Shadow2ndBorder;
    float _Shadow2ndBlur;
    float _Shadow3rdNormalStrength;
    float _Shadow3rdBorder;
    float _Shadow3rdBlur;
    float _ShadowMainStrength;
    float _ShadowEnvStrength;
    float _ShadowBorderRange;
    float _ShadowReceive;
    float _Shadow2ndReceive;
    float _Shadow3rdReceive;
    float _ShadowFlatBlur;
    float _ShadowFlatBorder;
    float _RimShadeNormalStrength;
    float _RimShadeBorder;
    float _RimShadeBlur;
    float _RimShadeFresnelPower;
    float _BacklightNormalStrength;
    float _BacklightBorder;
    float _BacklightBlur;
    float _BacklightDirectivity;
    float _BacklightViewStrength;
    float _BacklightBackfaceMask;
    float _BacklightMainStrength;
    float _BumpScale;
    float _Bump2ndScale;
    float _AnisotropyScale;
    float _AnisotropyTangentWidth;
    float _AnisotropyBitangentWidth;
    float _AnisotropyShift;
    float _AnisotropyShiftNoiseScale;
    float _AnisotropySpecularStrength;
    float _Anisotropy2ndTangentWidth;
    float _Anisotropy2ndBitangentWidth;
    float _Anisotropy2ndShift;
    float _Anisotropy2ndShiftNoiseScale;
    float _Anisotropy2ndSpecularStrength;
    float _Reflectance;
    float _SpecularNormalStrength;
    float _SpecularBorder;
    float _SpecularBlur;
    float _ReflectionNormalStrength;
    float _ReflectionCubeEnableLighting;
    float _Smoothness;
    float _Metallic;
    float _GSAAStrength;
    float _MatCapBlend;
    float _MatCapEnableLighting;
    float _MatCapShadowMask;
    float _MatCapVRParallaxStrength;
    float _MatCapBackfaceMask;
    float _MatCapLod;
    float _MatCapNormalStrength;
    float _MatCapMainStrength;
    float _MatCapBumpScale;
    float _MatCap2ndBlend;
    float _MatCap2ndEnableLighting;
    float _MatCap2ndShadowMask;
    float _MatCap2ndVRParallaxStrength;
    float _MatCap2ndBackfaceMask;
    float _MatCap2ndLod;
    float _MatCap2ndNormalStrength;
    float _MatCap2ndMainStrength;
    float _MatCap2ndBumpScale;
    float _RimNormalStrength;
    float _RimBorder;
    float _RimBlur;
    float _RimFresnelPower;
    float _RimEnableLighting;
    float _RimShadowMask;
    float _RimVRParallaxStrength;
    float _RimBackfaceMask;
    float _RimMainStrength;
    float _RimDirStrength;
    float _RimDirRange;
    float _RimIndirRange;
    float _RimIndirBorder;
    float _RimIndirBlur;
    float _GlitterMainStrength;
    float _GlitterPostContrast;
    float _GlitterSensitivity;
    float _GlitterNormalStrength;
    float _GlitterEnableLighting;
    float _GlitterShadowMask;
    float _GlitterVRParallaxStrength;
    float _GlitterBackfaceMask;
    float _GlitterScaleRandomize;
    float _DistanceFadeRimFresnelPower;
    float _EmissionBlend;
    float _EmissionParallaxDepth;
    float _EmissionFluorescence;
    float _EmissionMainStrength;
    float _EmissionGradSpeed;
    float _Emission2ndBlend;
    float _Emission2ndParallaxDepth;
    float _Emission2ndFluorescence;
    float _Emission2ndMainStrength;
    float _Emission2ndGradSpeed;
    float _Parallax;
    float _ParallaxOffset;
    float _DitherMaxValue;
    float _AudioLink2EmissionGrad;
    float _AudioLink2Emission2ndGrad;
    float _DissolveNoiseStrength;
    float _IDMask1;
    float _IDMask2;
    float _IDMask3;
    float _IDMask4;
    float _IDMask5;
    float _IDMask6;
    float _IDMask7;
    float _IDMask8;
    float _IDMaskPrior1;
    float _IDMaskPrior2;
    float _IDMaskPrior3;
    float _IDMaskPrior4;
    float _IDMaskPrior5;
    float _IDMaskPrior6;
    float _IDMaskPrior7;
    float _IDMaskPrior8;
    float _UDIMDiscardCompile;
    float _UDIMDiscardMode;
    float _UDIMDiscardUV;
    float _UDIMDiscardRow3_0;
    float _UDIMDiscardRow3_1;
    float _UDIMDiscardRow3_2;
    float _UDIMDiscardRow3_3;
    float _UDIMDiscardRow2_0;
    float _UDIMDiscardRow2_1;
    float _UDIMDiscardRow2_2;
    float _UDIMDiscardRow2_3;
    float _UDIMDiscardRow1_0;
    float _UDIMDiscardRow1_1;
    float _UDIMDiscardRow1_2;
    float _UDIMDiscardRow1_3;
    float _UDIMDiscardRow0_0;
    float _UDIMDiscardRow0_1;
    float _UDIMDiscardRow0_2;
    float _UDIMDiscardRow0_3;
    float _lilShadowCasterBias;
    float _OutlineLitScale;
    float _OutlineLitOffset;
    float _OutlineWidth;
    float _OutlineEnableLighting;
    float _OutlineVectorScale;
    float _OutlineFixWidth;
    float _OutlineZBias;
    float _TessEdge;
    float _TessStrength;
    float _TessShrink;
    float _TessFactorMax;
    int _IDMaskIndex1;
    int _IDMaskIndex2;
    int _IDMaskIndex3;
    int _IDMaskIndex4;
    int _IDMaskIndex5;
    int _IDMaskIndex6;
    int _IDMaskIndex7;
    int _IDMaskIndex8;
    uint _IDMaskFrom;
    uint _IDMaskIsBitmap;
    uint _IDMaskControlsDissolve;
    uint _Cull;
    uint _OutlineCull;
    uint _PreOutType;
    uint _Main2ndTexBlendMode;
    uint _Main2ndTexAlphaMode;
    uint _Main2ndTex_UVMode;
    uint _Main2ndTex_Cull;
    uint _Main3rdTexBlendMode;
    uint _Main3rdTexAlphaMode;
    uint _Main3rdTex_UVMode;
    uint _Main3rdTex_Cull;
    uint _AlphaMaskMode;
    uint _ShadowColorType;
    uint _ShadowMaskType;
    uint _Bump2ndMap_UVMode;
    uint _ReflectionBlendMode;
    uint _MatCapBlendMode;
    uint _MatCap2ndBlendMode;
    uint _RimBlendMode;
    uint _GlitterUVMode;
    uint _EmissionMap_UVMode;
    uint _EmissionBlendMode;
    uint _Emission2ndMap_UVMode;
    uint _Emission2ndBlendMode;
    uint _AudioLinkUVMode;
    uint _AudioLinkMask_UVMode;
    uint _AudioLinkVertexUVMode;
    uint _DistanceFadeMode;
    uint _UseDither;
    uint _OutlineVertexR2Width;
    uint _OutlineVectorUVMode;
    uint _Invisible;
    uint _UseMain2ndTex;
    uint _Main2ndTexIsMSDF;
    uint _Main2ndTexIsDecal;
    uint _Main2ndTexIsLeftOnly;
    uint _Main2ndTexIsRightOnly;
    uint _Main2ndTexShouldCopy;
    uint _Main2ndTexShouldFlipMirror;
    uint _Main2ndTexShouldFlipCopy;
    uint _UseMain3rdTex;
    uint _Main3rdTexIsMSDF;
    uint _Main3rdTexIsDecal;
    uint _Main3rdTexIsLeftOnly;
    uint _Main3rdTexIsRightOnly;
    uint _Main3rdTexShouldCopy;
    uint _Main3rdTexShouldFlipMirror;
    uint _Main3rdTexShouldFlipCopy;
    uint _UseShadow;
    uint _ShadowPostAO;
    uint _UseRimShade;
    uint _UseBacklight;
    uint _BacklightReceiveShadow;
    uint _UseBumpMap;
    uint _UseBump2ndMap;
    uint _UseAnisotropy;
    uint _Anisotropy2Reflection;
    uint _Anisotropy2MatCap;
    uint _Anisotropy2MatCap2nd;
    uint _UseReflection;
    uint _ApplySpecular;
    uint _ApplySpecularFA;
    uint _ApplyReflection;
    uint _SpecularToon;
    uint _ReflectionApplyTransparency;
    uint _ReflectionCubeOverride;
    uint _UseMatCap;
    uint _MatCapApplyTransparency;
    uint _MatCapPerspective;
    uint _MatCapZRotCancel;
    uint _MatCapCustomNormal;
    uint _UseMatCap2nd;
    uint _MatCap2ndApplyTransparency;
    uint _MatCap2ndPerspective;
    uint _MatCap2ndZRotCancel;
    uint _MatCap2ndCustomNormal;
    uint _UseRim;
    uint _RimApplyTransparency;
    uint _UseGlitter;
    uint _GlitterColorTex_UVMode;
    uint _GlitterApplyTransparency;
    uint _GlitterApplyShape;
    uint _GlitterAngleRandomize;
    uint _UseEmission;
    uint _EmissionUseGrad;
    uint _UseEmission2nd;
    uint _Emission2ndUseGrad;
    uint _UseParallax;
    uint _UsePOM;
    uint _UseAudioLink;
    uint _AudioLink2Main2nd;
    uint _AudioLink2Main3rd;
    uint _AudioLink2Emission;
    uint _AudioLink2Emission2nd;
    uint _AudioLink2Vertex;
    uint _AudioLinkAsLocal;
    uint _OutlineLitApplyTex;
    uint _OutlineLitShadowReceive;
    uint _OutlineDeleteMesh;
    uint _OutlineDisableInVR;
    float4 _AudioTexture_TexelSize;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    // mtl_VertexID generated in compute kernel,
    // mtl_BaseVertex generated in compute kernel,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(mtl_VertexID, mtl_BaseVertex, vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.TEXCOORD4 = input.cp[controlPointID].TEXCOORD4;
        output.TEXCOORD5 = input.cp[controlPointID].TEXCOORD5;
        output.TEXCOORD6 = input.cp[controlPointID].TEXCOORD6;
        output.TEXCOORD7 = input.cp[controlPointID].TEXCOORD7;
        output.COLOR0 = input.cp[controlPointID].COLOR0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float4 u_xlat1;
    int2 u_xlati1;
    bool4 u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    bool2 u_xlatb3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float3 u_xlat11;
    float u_xlat22;
    bool2 u_xlatb23;
    int2 u_xlati24;
    bool2 u_xlatb24;
    float u_xlat33;
    float u_xlat34;
    // fork_phase2
    {
        if((VGlobals._Invisible)!=uint(0)){
            tessFactor.edgeTessellationFactor[0] = 0.0;
            tessFactor.edgeTessellationFactor[1] = 0.0;
            tessFactor.edgeTessellationFactor[2] = 0.0;
            tessFactor.insideTessellationFactor = 0.0;
            return;
        }
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].mtl_Position.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].mtl_Position.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].mtl_Position.zzz, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].mtl_Position.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].mtl_Position.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].mtl_Position.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat3.xyz = u_xlat2.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].mtl_Position.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].mtl_Position.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].mtl_Position.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat4.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat4.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat6.x = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
        u_xlat7.x = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat7.xyz = float3(u_xlat33) * u_xlat7.xyz;
        u_xlat8.x = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat8.y = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat8.z = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
        u_xlat9.xyz = u_xlat2.xyz + u_xlat4.xyz;
        u_xlat9.xyz = fma(u_xlat9.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat9.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
        u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.x = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat4.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat4.xyz;
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.y = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.z = max(u_xlat33, 1.0);
        u_xlat9.xyz = min(u_xlat9.xyz, float3(VGlobals._TessFactorMax));
        u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
        u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
        u_xlat11.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat34 = dot(u_xlat11.xyz, u_xlat11.xyz);
        u_xlat34 = rsqrt(u_xlat34);
        u_xlat11.xyz = u_xlat11.xyz * float3(u_xlat34);
        u_xlat0.y = dot(u_xlat7.xyz, u_xlat11.xyz);
        u_xlat2.xyz = (-u_xlat4.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat22 = rsqrt(u_xlat22);
        u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
        u_xlat0.z = dot(u_xlat8.xyz, u_xlat2.xyz);
        u_xlat2.xyz = abs(u_xlat0.zxy) + abs(u_xlat0.yzx);
        u_xlat0.xyz = fma((-u_xlat2.xyz), float3(0.5, 0.5, 0.5), float3(1.0, 1.0, 1.0));
        u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
        u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xyz;
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat34 = u_xlat0.y + u_xlat0.x;
        u_xlat34 = u_xlat0.z + u_xlat34;
        u_xlat0.w = u_xlat34 * 0.333333343;
        u_xlat1.xy = u_xlat1.xy / abs(u_xlat1.zz);
        u_xlat1.zw = u_xlat3.xy / abs(u_xlat3.zz);
        u_xlat2.xy = u_xlat5.xy / abs(u_xlat5.zz);
        u_xlatb24.xy = (float2(1.00999999, 1.00999999)<u_xlat1.xy);
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat1.zw);
        u_xlati24.xy = int2((uint2(u_xlatb24.xy) * 0xffffffffu) & (uint2(u_xlatb3.xy) * 0xffffffffu));
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat2.xy);
        u_xlati24.xy = int2((uint2(u_xlatb3.xy) * 0xffffffffu) & uint2(u_xlati24.xy));
        u_xlatb1 = (u_xlat1<float4(-1.00999999, -1.00999999, -1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb1.zw) * 0xffffffffu) & (uint2(u_xlatb1.xy) * 0xffffffffu));
        u_xlatb23.xy = (u_xlat2.xy<float2(-1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb23.xy) * 0xffffffffu) & uint2(u_xlati1.xy));
        u_xlati1.x = int(uint(u_xlati1.x) | uint(u_xlati24.x));
        u_xlati1.x = int(uint(u_xlati24.y) | uint(u_xlati1.x));
        u_xlati1.x = int(uint(u_xlati1.y) | uint(u_xlati1.x));
        u_xlat0 = (u_xlati1.x != 0) ? float4(0.0, 0.0, 0.0, 0.0) : u_xlat0;
        tessFactor.edgeTessellationFactor[0] = u_xlat0.x;
        tessFactor.edgeTessellationFactor[1] = u_xlat0.y;
        tessFactor.edgeTessellationFactor[2] = u_xlat0.z;
        tessFactor.insideTessellationFactor = u_xlat0.w;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float TEXCOORD7 [[ user(TEXCOORD7) ]];
};
		template <typename UVecType> UVecType bitFieldInsert(const UVecType width, const UVecType offset, const UVecType src2, const UVecType src3)
		{
			UVecType bitmask = (((UVecType(1) << width)-1) << offset) & 0xffffffff;
			return ((src2 << offset) & bitmask) | (src3 & ~bitmask);
		}; 
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    // mtl_VertexID unused,
    // mtl_BaseVertex unused,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    texture2d<float, access::sample > _AudioLinkLocalMap [[ texture(0) ]] ,
    texture2d<float, access::sample > _OutlineWidthMask [[ texture(1) ]] ,
    texture2d<float, access::sample > _OutlineVectorTex [[ texture(2) ]] ,
    texture2d<float, access::sample > _AudioTexture [[ texture(3) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    constexpr sampler lil_sampler_trilinear_repeat(filter::linear,mip_filter::linear,address::repeat);
    constexpr sampler lil_sampler_linear_clamp(filter::linear,mip_filter::nearest,address::clamp_to_edge);
        float4 phase0_Input0_1[3];
        phase0_Input0_1[2] = float4(input.cp[2].TEXCOORD0, input.cp[2].TEXCOORD1);
        phase0_Input0_1[1] = float4(input.cp[1].TEXCOORD0, input.cp[1].TEXCOORD1);
        phase0_Input0_1[0] = float4(input.cp[0].TEXCOORD0, input.cp[0].TEXCOORD1);
        float4 phase0_Input0_2[3];
        phase0_Input0_2[2] = float4(input.cp[2].TEXCOORD2, input.cp[2].TEXCOORD3);
        phase0_Input0_2[1] = float4(input.cp[1].TEXCOORD2, input.cp[1].TEXCOORD3);
        phase0_Input0_2[0] = float4(input.cp[0].TEXCOORD2, input.cp[0].TEXCOORD3);
    float4 phase0_Output0_4;
    float4 phase0_Output0_5;
    float3 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    int u_xlati4;
    uint u_xlatu4;
    bool4 u_xlatb4;
    float4 u_xlat5;
    float4 u_xlat6;
    int u_xlati6;
    bool2 u_xlatb6;
    float4 u_xlat7;
    int4 u_xlati7;
    bool4 u_xlatb7;
    float4 u_xlat8;
    int4 u_xlati8;
    bool4 u_xlatb8;
    float4 u_xlat9;
    int4 u_xlati9;
    float4 u_xlat10;
    bool4 u_xlatb10;
    float4 u_xlat11;
    int4 u_xlati11;
    float4 u_xlat12;
    bool u_xlatb13;
    float3 u_xlat16;
    float3 u_xlat17;
    int2 u_xlati17;
    uint u_xlatu17;
    bool u_xlatb17;
    int u_xlati19;
    float2 u_xlat21;
    bool u_xlatb26;
    float2 u_xlat30;
    bool u_xlatb30;
    bool2 u_xlatb32;
    float u_xlat39;
    int u_xlati39;
    bool u_xlatb39;
    float u_xlat42;
    uint u_xlatu42;
    bool u_xlatb42;
    float u_xlat43;
    int u_xlati43;
    uint u_xlatu43;
    bool u_xlatb43;
    float u_xlat46;
    float4 TempArray0[4];
    u_xlatb0 = int(VGlobals._Invisible)!=0x0;
    u_xlatb13 = int(VGlobals._OutlineDisableInVR)!=0x0;
    u_xlatb26 = 9.99999997e-07<abs(VGlobals.hlslcc_mtx4x4glstate_matrix_projection[2].x);
    u_xlatb13 = u_xlatb26 && u_xlatb13;
    u_xlatb0 = u_xlatb13 || u_xlatb0;
    if(!u_xlatb0){
        u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].mtl_Position.xyz;
        u_xlat0.xyz = fma(mtl_TessCoord.xxx, input.cp[0].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat0.xyz = fma(mtl_TessCoord.zzz, input.cp[2].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat1 = mtl_TessCoord.yyyy * phase0_Input0_1[1];
        u_xlat1 = fma(mtl_TessCoord.xxxx, phase0_Input0_1[0], u_xlat1);
        u_xlat1 = fma(mtl_TessCoord.zzzz, phase0_Input0_1[2], u_xlat1);
        u_xlat2 = mtl_TessCoord.yyyy * phase0_Input0_2[1];
        u_xlat2 = fma(mtl_TessCoord.xxxx, phase0_Input0_2[0], u_xlat2);
        u_xlat2 = fma(mtl_TessCoord.zzzz, phase0_Input0_2[2], u_xlat2);
        u_xlat3 = mtl_TessCoord.yyyy * input.cp[1].COLOR0;
        u_xlat3 = fma(mtl_TessCoord.xxxx, input.cp[0].COLOR0, u_xlat3);
        u_xlat3 = fma(mtl_TessCoord.zzzz, input.cp[2].COLOR0, u_xlat3);
        u_xlat4.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
        u_xlat4.xyz = fma(mtl_TessCoord.xxx, input.cp[0].NORMAL0.xyz, u_xlat4.xyz);
        u_xlat4.xyz = fma(mtl_TessCoord.zzz, input.cp[2].NORMAL0.xyz, u_xlat4.xyz);
        u_xlat5 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
        u_xlat5 = fma(mtl_TessCoord.xxxx, input.cp[0].TANGENT0, u_xlat5);
        u_xlat5 = fma(mtl_TessCoord.zzzz, input.cp[2].TANGENT0, u_xlat5);
        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat39 = rsqrt(u_xlat39);
        u_xlat4.xyz = float3(u_xlat39) * u_xlat4.xyz;
        u_xlat39 = dot(input.cp[0].mtl_Position.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat6.xyz = float3(u_xlat39) * input.cp[0].NORMAL0.xyz;
        u_xlat39 = dot(input.cp[1].mtl_Position.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat7.xyz = float3(u_xlat39) * input.cp[1].NORMAL0.xyz;
        u_xlat39 = dot(input.cp[2].mtl_Position.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat8.xyz = float3(u_xlat39) * input.cp[2].NORMAL0.xyz;
        u_xlat7.xyz = u_xlat7.xyz * mtl_TessCoord.yyy;
        u_xlat6.xyz = fma(u_xlat6.xyz, mtl_TessCoord.xxx, u_xlat7.xyz);
        u_xlat6.xyz = fma(u_xlat8.xyz, mtl_TessCoord.zzz, u_xlat6.xyz);
        u_xlat0.xyz = fma(u_xlat6.xyz, float3(VGlobals._TessStrength), u_xlat0.xyz);
        u_xlat6.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
        u_xlat7.xyz = u_xlat5.yzx * u_xlat4.zxy;
        u_xlat7.xyz = fma(u_xlat4.yzx, u_xlat5.zxy, (-u_xlat7.xyz));
        u_xlat39 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat39 = rsqrt(u_xlat39);
        u_xlat7.xyz = float3(u_xlat39) * u_xlat7.xyz;
        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat39 = sqrt(u_xlat39);
        u_xlat39 = u_xlat39 * u_xlat5.w;
        u_xlat7.xyz = float3(u_xlat39) * u_xlat7.xyz;
        u_xlatb39 = int(VGlobals._UseAudioLink)!=0x0;
        u_xlatb43 = int(VGlobals._AudioLink2Vertex)!=0x0;
        u_xlatb39 = u_xlatb39 && u_xlatb43;
        if(u_xlatb39){
            u_xlatb32.xy = (int2(VGlobals._AudioLinkVertexUVMode)==int2(0x1, 0x2));
            u_xlat8.xyz = u_xlat0.xyz + (-VGlobals._AudioLinkVertexStart.xyz);
            u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat39 = sqrt(u_xlat39);
            u_xlat39 = fma(u_xlat39, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat39 = (u_xlatb32.x) ? u_xlat39 : VGlobals._AudioLinkVertexUVParams.y;
            u_xlat8.x = sin(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat9.x = cos(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat21.xy = u_xlat1.xy + float2(-0.5, -0.5);
            u_xlat43 = u_xlat8.x * u_xlat21.y;
            u_xlat43 = fma(u_xlat21.x, u_xlat9.x, (-u_xlat43));
            u_xlat43 = u_xlat43 + 0.5;
            u_xlat43 = fma(u_xlat43, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat8.x = (u_xlatb32.y) ? u_xlat43 : u_xlat39;
            if((VGlobals._AudioLinkAsLocal)!=uint(0)){
                u_xlat39 = (-VGlobals._Time.y) * VGlobals._AudioLinkLocalMapParams.x;
                u_xlat39 = u_xlat39 * VGlobals._AudioLinkLocalMapParams.y;
                u_xlat39 = u_xlat39 * 0.0166666675;
                u_xlat39 = fract(u_xlat39);
                u_xlat39 = u_xlat39 + VGlobals._AudioLinkLocalMapParams.z;
                u_xlat9.x = u_xlat39 + u_xlat8.x;
                u_xlat9.y = VGlobals._AudioLinkVertexUVParams.w;
                u_xlat39 = _AudioLinkLocalMap.sample(lil_sampler_trilinear_repeat, u_xlat9.xy, level(0.0)).x;
            } else {
                u_xlat43 = float(_AudioTexture.get_width(0x0));
                u_xlati43 = int(u_xlat43);
                u_xlatb43 = 0x10<u_xlati43;
                if(u_xlatb43){
                    u_xlat8.y = VGlobals._AudioLinkVertexUVParams.w * 0.0625;
                    u_xlat39 = _AudioTexture.sample(lil_sampler_linear_clamp, u_xlat8.xy, level(0.0)).x;
                    u_xlat39 = u_xlat39;
                    u_xlat39 = clamp(u_xlat39, 0.0f, 1.0f);
                } else {
                    u_xlat43 = fma(VGlobals._Time.y, VGlobals._AudioLinkDefaultValue.z, (-u_xlat8.x));
                    u_xlat43 = fract(u_xlat43);
                    u_xlat43 = u_xlat43 + VGlobals._AudioLinkDefaultValue.w;
                    u_xlat43 = clamp(u_xlat43, 0.0f, 1.0f);
                    u_xlat43 = u_xlat43 * VGlobals._AudioLinkDefaultValue.y;
                    u_xlat39 = fma((-u_xlat43), VGlobals._AudioLinkDefaultValue.x, VGlobals._AudioLinkDefaultValue.x);
                    u_xlat39 = clamp(u_xlat39, 0.0f, 1.0f);
                }
            }
            u_xlat8.xyz = fma(u_xlat4.xyz, VGlobals._AudioLinkVertexStrength.www, VGlobals._AudioLinkVertexStrength.xyz);
            u_xlat0.xyz = fma(u_xlat8.xyz, float3(u_xlat39), u_xlat0.xyz);
        }
        TempArray0[0].xy = u_xlat6.xy;
        TempArray0[1].xy = u_xlat1.zw;
        TempArray0[2].xy = u_xlat2.xy;
        TempArray0[3].xy = u_xlat2.zw;
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz);
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, u_xlat0.yyy, u_xlat8.xyz);
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat8.xyz);
        u_xlat39 = VGlobals._OutlineWidth * 0.00999999978;
        u_xlat43 = _OutlineWidthMask.sample(lil_sampler_trilinear_repeat, u_xlat6.xy, level(0.0)).x;
        u_xlat39 = u_xlat39 * u_xlat43;
        u_xlatb6.xy = (int2(VGlobals._OutlineVertexR2Width)==int2(0x1, 0x2));
        u_xlat43 = u_xlat3.x * u_xlat39;
        u_xlat39 = (u_xlatb6.x) ? u_xlat43 : u_xlat39;
        u_xlat42 = u_xlat3.w * u_xlat39;
        u_xlat39 = (u_xlatb6.y) ? u_xlat42 : u_xlat39;
        u_xlat6.xzw = (-u_xlat8.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat42 = dot(u_xlat6.xzw, u_xlat6.xzw);
        u_xlat42 = sqrt(u_xlat42);
        u_xlat42 = min(u_xlat42, 1.0);
        u_xlat42 = u_xlat42 + -1.0;
        u_xlat42 = fma(VGlobals._OutlineFixWidth, u_xlat42, 1.0);
        u_xlat42 = u_xlat39 * u_xlat42;
        u_xlatu43 = VGlobals._OutlineVectorUVMode;
        u_xlat6.xz = TempArray0[int(u_xlatu43)].xy;
        u_xlat6.xzw = _OutlineVectorTex.sample(lil_sampler_trilinear_repeat, u_xlat6.xz, level(0.0)).xyw;
        u_xlat6.x = u_xlat6.x * u_xlat6.w;
        u_xlat6.xz = fma(u_xlat6.xz, float2(2.0, 2.0), float2(-1.0, -1.0));
        u_xlat6.xz = u_xlat6.xz * float2(VGlobals._OutlineVectorScale);
        u_xlat43 = dot(u_xlat6.xz, u_xlat6.xz);
        u_xlat43 = min(u_xlat43, 1.0);
        u_xlat43 = (-u_xlat43) + 1.0;
        u_xlat43 = sqrt(u_xlat43);
        u_xlat8.xyz = u_xlat7.xyz * u_xlat6.zzz;
        u_xlat6.xzw = fma(u_xlat6.xxx, u_xlat5.xyz, u_xlat8.xyz);
        u_xlat6.xzw = fma(float3(u_xlat43), u_xlat4.xyz, u_xlat6.xzw);
        u_xlat3.xyz = fma(u_xlat3.xyz, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
        u_xlat7.xyz = u_xlat7.xyz * u_xlat3.yyy;
        u_xlat5.xyz = fma(u_xlat3.xxx, u_xlat5.xyz, u_xlat7.xyz);
        u_xlat3.xyz = fma(u_xlat3.zzz, u_xlat4.xyz, u_xlat5.xyz);
        u_xlat3.xyz = (u_xlatb6.y) ? u_xlat3.xyz : u_xlat6.xzw;
        u_xlat0.xyz = fma(u_xlat3.xyz, float3(u_xlat42), u_xlat0.xyz);
        u_xlatb3 = VGlobals.unity_OrthoParams.w==0.0;
        u_xlat16.xyz = VGlobals._WorldSpaceCameraPos.xyzx.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz;
        u_xlat16.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz, VGlobals._WorldSpaceCameraPos.xyzx.xxx, u_xlat16.xyz);
        u_xlat16.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz, VGlobals._WorldSpaceCameraPos.xyzx.zzz, u_xlat16.xyz);
        u_xlat16.xyz = u_xlat16.xyz + VGlobals.hlslcc_mtx4x4unity_WorldToObject[3].xyz;
        u_xlat16.xyz = (-u_xlat0.xyz) + u_xlat16.xyz;
        u_xlat5.xyz = VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].zzz;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz, VGlobals.hlslcc_mtx4x4unity_MatrixV[0].zzz, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz, VGlobals.hlslcc_mtx4x4unity_MatrixV[2].zzz, u_xlat5.xyz);
        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat16.xyz : u_xlat5.xyz;
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat3.xyz = float3(u_xlat42) * u_xlat3.xyz;
        u_xlat0.xyz = fma((-u_xlat3.xyz), float3(VGlobals._OutlineZBias), u_xlat0.xyz);
        u_xlat3.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
        u_xlat5 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat5);
        u_xlat5 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat5);
        u_xlat5 = u_xlat5 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
        u_xlat6.x = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat4.xyz = float3(u_xlat42) * u_xlat6.xyz;
        u_xlat42 = dot(VGlobals._LightColor0.xyz, float3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat6.xyz = VGlobals.unity_SHAg.xyz * float3(0.333332986, 0.333332986, 0.333332986);
        u_xlat6.xyz = fma(VGlobals.unity_SHAr.xyz, float3(0.333332986, 0.333332986, 0.333332986), u_xlat6.xyz);
        u_xlat6.xyz = fma(VGlobals.unity_SHAb.xyz, float3(0.333332986, 0.333332986, 0.333332986), u_xlat6.xyz);
        u_xlat6.w = abs(u_xlat6.y);
        u_xlat43 = dot(VGlobals._LightDirectionOverride.xyz, VGlobals._LightDirectionOverride.xyz);
        u_xlat43 = sqrt(u_xlat43);
        u_xlat7.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * VGlobals._LightDirectionOverride.yyy;
        u_xlat7.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals._LightDirectionOverride.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, VGlobals._LightDirectionOverride.zzz, u_xlat7.xyz);
        u_xlat46 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat46 = rsqrt(u_xlat46);
        u_xlat7.xyz = float3(u_xlat46) * u_xlat7.xyz;
        u_xlat7.xyz = float3(u_xlat43) * u_xlat7.xyz;
        u_xlatb43 = float(0.0)!=VGlobals._LightDirectionOverride.w;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : VGlobals._LightDirectionOverride.xyz;
        u_xlat8.xyz = fma(VGlobals._WorldSpaceLightPos0.xyz, float3(u_xlat42), u_xlat6.xwz);
        u_xlat7.xyz = u_xlat7.xyz + u_xlat8.xyz;
        u_xlat43 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat7.xyz = float3(u_xlat43) * u_xlat7.xyz;
        u_xlat6.xyz = fma(VGlobals._WorldSpaceLightPos0.xyz, float3(u_xlat42), u_xlat6.xyz);
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlatb43 = u_xlat42<9.99999997e-07;
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat6.xyz = float3(u_xlat42) * u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz * float3(0.666665971, 0.666665971, 0.666665971);
        u_xlat6.xyz = (bool(u_xlatb43)) ? float3(0.0, 0.0, 0.0) : u_xlat6.xyz;
        u_xlat8 = u_xlat6.yzzx * u_xlat6.xyzz;
        u_xlat42 = dot(VGlobals.unity_SHBr, u_xlat8);
        u_xlat9.x = u_xlat42 + VGlobals.unity_SHAr.w;
        u_xlat42 = dot(VGlobals.unity_SHBg, u_xlat8);
        u_xlat9.y = u_xlat42 + VGlobals.unity_SHAg.w;
        u_xlat42 = dot(VGlobals.unity_SHBb, u_xlat8);
        u_xlat9.z = u_xlat42 + VGlobals.unity_SHAb.w;
        u_xlat42 = u_xlat6.y * u_xlat6.y;
        u_xlat42 = fma(u_xlat6.x, u_xlat6.x, (-u_xlat42));
        u_xlat8.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat42), u_xlat9.xyz);
        u_xlat9.x = dot(VGlobals.unity_SHAr.xyz, u_xlat6.xyz);
        u_xlat9.y = dot(VGlobals.unity_SHAg.xyz, u_xlat6.xyz);
        u_xlat9.z = dot(VGlobals.unity_SHAb.xyz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat8.xyz + u_xlat9.xyz;
        u_xlat6.xyz = u_xlat6.xyz + VGlobals._LightColor0.xyz;
        u_xlat6.xyz = max(u_xlat6.xyz, float3(VGlobals._LightMinLimit));
        u_xlat6.xyz = min(u_xlat6.xyz, float3(VGlobals._LightMaxLimit));
        u_xlat42 = dot(u_xlat6.xyz, float3(0.333333343, 0.333333343, 0.333333343));
        u_xlat8.xyz = (-u_xlat6.xyz) + float3(u_xlat42);
        u_xlat6.xyz = fma(float3(VGlobals._MonochromeLighting), u_xlat8.xyz, u_xlat6.xyz);
        u_xlat8.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
        phase0_Output0_5.xyz = fma(float3(VGlobals._AsUnlit), u_xlat8.xyz, u_xlat6.xyz);
        u_xlat17.xz = u_xlat4.yy * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].xy;
        u_xlat4.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].xy, u_xlat4.xx, u_xlat17.xz);
        u_xlat4.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].xy, u_xlat4.zz, u_xlat4.xy);
        u_xlat42 = dot(u_xlat4.xy, u_xlat4.xy);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat4.xy = float2(u_xlat42) * u_xlat4.xy;
        u_xlat30.xy = u_xlat7.yy * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].xy;
        u_xlat30.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].xy, u_xlat7.xx, u_xlat30.xy);
        u_xlat30.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].xy, u_xlat7.zz, u_xlat30.xy);
        u_xlat42 = dot(u_xlat30.xy, u_xlat30.xy);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat30.xy = float2(u_xlat42) * u_xlat30.xy;
        u_xlat42 = dot(u_xlat4.xy, u_xlat30.xy);
        phase0_Output0_4.w = fma(u_xlat42, 0.5, 0.5);
        u_xlatb42 = -9.99999997e-07<u_xlat39;
        u_xlatb39 = u_xlat39<9.99999997e-07;
        u_xlatb39 = u_xlatb39 && u_xlatb42;
        u_xlatb42 = int(VGlobals._OutlineDeleteMesh)!=0x0;
        u_xlatb39 = u_xlatb39 && u_xlatb42;
        switch(int(int(VGlobals._IDMaskFrom))){
            case 0x0:
                u_xlatu42 = uint(u_xlat1.x);
                break;
            case 0x1:
                u_xlatu42 = uint(u_xlat1.z);
                break;
            case 0x2:
                u_xlatu42 = uint(u_xlat2.x);
                break;
            case 0x3:
                u_xlatu42 = uint(u_xlat2.z);
                break;
            case 0x4:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD4.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD4.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD4.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x5:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD5.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD5.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD5.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x6:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD6.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD6.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD6.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x7:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD7.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD7.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD7.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            default:
                u_xlatu42 = input.cp[0].TEXCOORD8.x;
                break;
            }
            if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                u_xlat4.x = rint(VGlobals._IDMask1);
                u_xlat4.yzw = rint(float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4));
                u_xlat4.x = dot(u_xlat4, float4(1.0, 2.0, 4.0, 8.0));
                u_xlat6.x = rint(VGlobals._IDMask5);
                u_xlat6.yzw = rint(float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8));
                u_xlat17.x = dot(u_xlat6, float4(16.0, 32.0, 64.0, 128.0));
                u_xlat4.x = u_xlat17.x + u_xlat4.x;
                u_xlatu4 = uint(u_xlat4.x);
                u_xlatb17 = int(u_xlatu42)!=0x0;
                u_xlati4 = int(u_xlatu42 & u_xlatu4);
                u_xlatb4.x = int(u_xlatu42)==u_xlati4;
                u_xlati4 = int((uint(u_xlatb4.x) * 0xffffffffu) & (uint(u_xlatb17) * 0xffffffffu));
            } else {
                u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                u_xlat6.xy = float2(u_xlati17.yx);
                u_xlati7 = int4(u_xlatu42) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                u_xlat7 = float4(u_xlati7.wxyz);
                u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                u_xlat17.xy = float2(u_xlati17.xy);
                u_xlat8.xy = u_xlat6.yx + float2(1.0, 1.0);
                u_xlat8.xy = clamp(u_xlat8.xy, 0.0f, 1.0f);
                u_xlat9 = u_xlat7.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
                u_xlat6.x = (-u_xlat6.x);
                u_xlat6.x = clamp(u_xlat6.x, 0.0f, 1.0f);
                u_xlat7 = (-u_xlat7);
                u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
                u_xlat8.zw = u_xlat9.zw;
                u_xlat6.yzw = u_xlat7.yzw;
                u_xlat6 = u_xlat6 * u_xlat8;
                u_xlat9.zw = u_xlat17.xy + float2(1.0, 1.0);
                u_xlat9.zw = clamp(u_xlat9.zw, 0.0f, 1.0f);
                u_xlat7.yz = (-u_xlat17.xy);
                u_xlat7.yz = clamp(u_xlat7.yz, 0.0f, 1.0f);
                u_xlat7.w = 1.0;
                u_xlat7 = u_xlat7 * u_xlat9;
                u_xlat8.x = VGlobals._IDMask1;
                u_xlat8.yzw = float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4);
                u_xlat17.x = dot(u_xlat6, u_xlat8);
                u_xlat6.x = VGlobals._IDMask5;
                u_xlat6.yzw = float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8);
                u_xlat30.x = dot(u_xlat7, u_xlat6);
                u_xlat17.x = u_xlat30.x + u_xlat17.x;
                u_xlati4 = int((float(0.0)!=u_xlat17.x) ? 0xFFFFFFFFu : uint(0));
            }
            if((VGlobals._IDMaskControlsDissolve)!=uint(0)){
                if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                    u_xlat6.x = rint(VGlobals._IDMaskPrior1);
                    u_xlat6.yzw = rint(float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4));
                    u_xlat17.x = dot(u_xlat6, float4(1.0, 2.0, 4.0, 8.0));
                    u_xlat6.x = rint(VGlobals._IDMaskPrior5);
                    u_xlat6.yzw = rint(float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8));
                    u_xlat30.x = dot(u_xlat6, float4(16.0, 32.0, 64.0, 128.0));
                    u_xlat17.x = u_xlat30.x + u_xlat17.x;
                    u_xlatu17 = uint(u_xlat17.x);
                    u_xlatb30 = int(u_xlatu42)!=0x0;
                    u_xlati17.x = int(u_xlatu42 & u_xlatu17);
                    u_xlatb17 = int(u_xlatu42)==u_xlati17.x;
                    u_xlati19 = int((uint(u_xlatb17) * 0xffffffffu) & (uint(u_xlatb30) * 0xffffffffu));
                } else {
                    u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                    u_xlat7.xy = float2(u_xlati17.yx);
                    u_xlati8 = int4(u_xlatu42) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                    u_xlat8 = float4(u_xlati8.wxyz);
                    u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                    u_xlat17.xy = float2(u_xlati17.xy);
                    u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                    u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                    u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                    u_xlat7.x = (-u_xlat7.x);
                    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                    u_xlat8 = (-u_xlat8);
                    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                    u_xlat9.zw = u_xlat10.zw;
                    u_xlat7.yzw = u_xlat8.yzw;
                    u_xlat7 = u_xlat7 * u_xlat9;
                    u_xlat10.zw = u_xlat17.xy + float2(1.0, 1.0);
                    u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                    u_xlat8.yz = (-u_xlat17.xy);
                    u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                    u_xlat8.w = 1.0;
                    u_xlat8 = u_xlat8 * u_xlat10;
                    u_xlat9.x = VGlobals._IDMaskPrior1;
                    u_xlat9.yzw = float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4);
                    u_xlat42 = dot(u_xlat7, u_xlat9);
                    u_xlat7.x = VGlobals._IDMaskPrior5;
                    u_xlat7.yzw = float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8);
                    u_xlat17.x = dot(u_xlat8, u_xlat7);
                    u_xlat42 = u_xlat42 + u_xlat17.x;
                    u_xlati19 = int((float(0.0)!=u_xlat42) ? 0xFFFFFFFFu : uint(0));
                }
                u_xlati6 = int((u_xlati4!=u_xlati19) ? 0xFFFFFFFFu : uint(0));
                u_xlati4 = int(uint(u_xlati4) & uint(u_xlati19));
            } else {
                u_xlati6 = int(int(0xffffffffu));
                u_xlati19 = int(0x0);
            }
            u_xlati39 = int((uint(u_xlatb39) * 0xffffffffu) | uint(u_xlati4));
            u_xlatb4 = (float4(VGlobals._UDIMDiscardMode, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV)==float4(0.0, 0.0, 1.0, 2.0));
            u_xlatb42 = VGlobals._UDIMDiscardCompile==1.0;
            u_xlatb42 = u_xlatb42 && u_xlatb4.x;
            u_xlat4.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb4.yzw));
            u_xlat7 = u_xlat1 * u_xlat4.xxyy;
            u_xlat4.xy = u_xlat7.zw + u_xlat7.xy;
            u_xlat4.xy = fma(u_xlat2.xy, u_xlat4.zz, u_xlat4.xy);
            u_xlatb30 = VGlobals._UDIMDiscardUV==3.0;
            u_xlat30.x = u_xlatb30 ? 1.0 : float(0.0);
            u_xlat4.xy = fma(u_xlat2.zw, u_xlat30.xx, u_xlat4.xy);
            u_xlatb7 = (u_xlat4.xxxx>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb8 = (u_xlat4.xxxx<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati9 = int4((uint4(u_xlatb7) * 0xffffffffu) & (uint4(u_xlatb8) * 0xffffffffu));
            u_xlat9 = as_type<float4>(uint4(u_xlati9) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlatb10 = (u_xlat4.yyyy>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb4 = (u_xlat4.yyyy<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati11 = int4((uint4(u_xlatb4) * 0xffffffffu) & (uint4(u_xlatb10) * 0xffffffffu));
            u_xlat11 = as_type<float4>(uint4(u_xlati11) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow0_0, VGlobals._UDIMDiscardRow0_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow0_2, VGlobals._UDIMDiscardRow0_3);
            u_xlat4.x = dot(u_xlat12, u_xlat9);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow1_0, VGlobals._UDIMDiscardRow1_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow1_2, VGlobals._UDIMDiscardRow1_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat17.x = u_xlat17.x * u_xlat11.y;
            u_xlat4.x = fma(u_xlat11.x, u_xlat4.x, u_xlat17.x);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow2_0, VGlobals._UDIMDiscardRow2_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow2_2, VGlobals._UDIMDiscardRow2_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat4.x = fma(u_xlat11.z, u_xlat17.x, u_xlat4.x);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow3_0, VGlobals._UDIMDiscardRow3_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow3_2, VGlobals._UDIMDiscardRow3_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat4.x = fma(u_xlat11.w, u_xlat17.x, u_xlat4.x);
            u_xlatb8.x = u_xlatb10.x;
            u_xlatb8.y = u_xlatb4.w;
            u_xlatb8.z = u_xlatb7.x;
            u_xlat7 = select(float4(0.0, 0.0, 0.0, 0.0), float4(1.0, 1.0, 1.0, 1.0), bool4(u_xlatb8));
            u_xlat17.x = dot(u_xlat7, u_xlat7);
            u_xlatb17 = u_xlat17.x!=0.0;
            u_xlat17.x = u_xlatb17 ? 1.0 : float(0.0);
            u_xlat4.x = u_xlat17.x * u_xlat4.x;
            u_xlatb4.x = 0.00100000005<u_xlat4.x;
            u_xlatb42 = u_xlatb42 && u_xlatb4.x;
            u_xlati39 = int(uint(u_xlati39) | (uint(u_xlatb42) * 0xffffffffu));
            output.mtl_Position = (int(u_xlati39) != 0) ? float4(as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u))) : u_xlat5;
            u_xlati39 = int(bitFieldInsert(0x1u, 0x1u, uint(u_xlati19), 0x0u));
            u_xlati39 = int(bitFieldInsert(0x1u, 0x0u, uint(u_xlati6), uint(u_xlati39)));
            output.TEXCOORD2.w = float(u_xlati39);
            output.TEXCOORD0 = u_xlat1;
            output.TEXCOORD1 = u_xlat2;
            output.TEXCOORD2.xyz = u_xlat0.xyz;
            phase0_Output0_4.xyz = u_xlat3.xyz;
            phase0_Output0_5.w = 1.0;
        } else {
            output.mtl_Position = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD1 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_4 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_5 = float4(0.0, 0.0, 0.0, 0.0);
        }
    output.TEXCOORD3 = phase0_Output0_4.xyz;
    output.TEXCOORD5 = phase0_Output0_4.w;
    output.TEXCOORD6 = phase0_Output0_5.xyz;
    output.TEXCOORD7 = phase0_Output0_5.w;
        return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation failed: 

program_source:826:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:834:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
                             ^
program_source:835:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
                                               ^
program_source:1040:49: error: member reference base type 'uint' (aka 'unsigned int') is not a structure or union
                u_xlatu3 = input.cp[0].TEXCOORD8.x;
                           ~~~~~~~~~~~~~~~~~~~~~^~



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float3 NORMAL0 [[ attribute(9) ]] ;
    float4 TANGENT0 [[ attribute(10) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    uint mtl_VertexID,
    uint mtl_BaseVertex,
    Mtl_VertexIn input)
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseVertex = 0;
#endif
    mtl_VertexID = mtl_VertexID - mtl_BaseVertex;
    Mtl_VertexOut output;
    output.mtl_Position = input.POSITION0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = input.TEXCOORD1.xy;
    output.TEXCOORD2.xy = input.TEXCOORD2.xy;
    output.TEXCOORD3.xy = input.TEXCOORD3.xy;
    output.TEXCOORD4.xy = input.TEXCOORD4.xy;
    output.TEXCOORD5.xy = input.TEXCOORD5.xy;
    output.TEXCOORD6.xy = input.TEXCOORD6.xy;
    output.TEXCOORD7.xy = input.TEXCOORD7.xy;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TANGENT0 = input.TANGENT0;
    output.TEXCOORD8 = mtl_VertexID;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(11) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float3 NORMAL0 [[ attribute(9) ]] ;
    float4 TANGENT0 [[ attribute(10) ]] ;
    uint TEXCOORD8 [[ attribute(12) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
    float3 unity_LightColor0;
    float3 unity_LightColor1;
    float3 unity_LightColor2;
    float3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
    float4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _LightColor0;
    float4 _SpecColor;
    bool4 unity_MetaVertexControl;
    bool4 unity_MetaFragmentControl;
    int unity_VisualizationMode;
    float unity_OneOverOutputBoost;
    float unity_MaxOutputValue;
    float unity_UseLinearSpace;
    float4 _lilBackgroundTexture_TexelSize;
    float4 _LightDirectionOverride;
    float4 _BackfaceColor;
    float4 _PreColor;
    float4 _Color;
    float4 _MainTex_ST;
    float4 _MainTex_ScrollRotate;
    float4 _MainTexHSVG;
    float4 _Color2nd;
    float4 _Main2ndTex_ST;
    float4 _Main2ndTex_ScrollRotate;
    float4 _Main2ndDistanceFade;
    float4 _Main2ndTexDecalAnimation;
    float4 _Main2ndTexDecalSubParam;
    float4 _Main2ndDissolveMask_ST;
    float4 _Main2ndDissolveColor;
    float4 _Main2ndDissolveParams;
    float4 _Main2ndDissolvePos;
    float4 _Main2ndDissolveNoiseMask_ST;
    float4 _Main2ndDissolveNoiseMask_ScrollRotate;
    float4 _Color3rd;
    float4 _Main3rdTex_ST;
    float4 _Main3rdTex_ScrollRotate;
    float4 _Main3rdDistanceFade;
    float4 _Main3rdTexDecalAnimation;
    float4 _Main3rdTexDecalSubParam;
    float4 _Main3rdDissolveMask_ST;
    float4 _Main3rdDissolveColor;
    float4 _Main3rdDissolveParams;
    float4 _Main3rdDissolvePos;
    float4 _Main3rdDissolveNoiseMask_ST;
    float4 _Main3rdDissolveNoiseMask_ScrollRotate;
    float4 _ShadowColor;
    float4 _Shadow2ndColor;
    float4 _Shadow3rdColor;
    float4 _ShadowBorderColor;
    float4 _ShadowAOShift;
    float4 _ShadowAOShift2;
    float4 _RimShadeColor;
    float4 _BacklightColor;
    float4 _BacklightColorTex_ST;
    float4 _EmissionColor;
    float4 _EmissionBlink;
    float4 _EmissionMap_ST;
    float4 _EmissionMap_ScrollRotate;
    float4 _EmissionBlendMask_ST;
    float4 _EmissionBlendMask_ScrollRotate;
    float4 _Emission2ndColor;
    float4 _Emission2ndBlink;
    float4 _Emission2ndMap_ST;
    float4 _Emission2ndMap_ScrollRotate;
    float4 _Emission2ndBlendMask_ST;
    float4 _Emission2ndBlendMask_ScrollRotate;
    float4 _BumpMap_ST;
    float4 _Bump2ndMap_ST;
    float4 _Bump2ndScaleMask_ST;
    float4 _AnisotropyTangentMap_ST;
    float4 _AnisotropyScaleMask_ST;
    float4 _AnisotropyShiftNoiseMask_ST;
    float4 _ReflectionColor;
    float4 _MetallicGlossMap_ST;
    float4 _ReflectionColorTex_ST;
    float4 _SmoothnessTex_ST;
    float4 _ReflectionCubeColor;
    float4 _ReflectionCubeTex_HDR;
    float4 _MatCapColor;
    float4 _MatCapTex_ST;
    float4 _MatCapBlendMask_ST;
    float4 _MatCapBlendUV1;
    float4 _MatCapBumpMap_ST;
    float4 _MatCap2ndColor;
    float4 _MatCap2ndTex_ST;
    float4 _MatCap2ndBlendMask_ST;
    float4 _MatCap2ndBlendUV1;
    float4 _MatCap2ndBumpMap_ST;
    float4 _RimColor;
    float4 _RimColorTex_ST;
    float4 _RimIndirColor;
    float4 _GlitterColor;
    float4 _GlitterColorTex_ST;
    float4 _GlitterParams1;
    float4 _GlitterParams2;
    float4 _GlitterShapeTex_ST;
    float4 _GlitterAtras;
    float4 _DistanceFade;
    float4 _DistanceFadeColor;
    float4 _DistanceFadeRimColor;
    float4 _DitherTex_TexelSize;
    float4 _AudioLinkMask_ST;
    float4 _AudioLinkMask_ScrollRotate;
    float4 _AudioLinkDefaultValue;
    float4 _AudioLinkUVParams;
    float4 _AudioLinkStart;
    float4 _AudioLinkVertexUVParams;
    float4 _AudioLinkVertexStart;
    float4 _AudioLinkVertexStrength;
    float4 _AudioLinkLocalMapParams;
    float4 _DissolveMask_ST;
    float4 _DissolveColor;
    float4 _DissolveParams;
    float4 _DissolvePos;
    float4 _DissolveNoiseMask_ST;
    float4 _DissolveNoiseMask_ScrollRotate;
    float4 _OutlineColor;
    float4 _OutlineLitColor;
    float4 _OutlineTex_ST;
    float4 _OutlineTex_ScrollRotate;
    float4 _OutlineTexHSVG;
    float _AsUnlit;
    float _Cutoff;
    float _PreCutoff;
    float _SubpassCutoff;
    float _FlipNormal;
    float _ShiftBackfaceUV;
    float _VertexLightStrength;
    float _LightMinLimit;
    float _LightMaxLimit;
    float _MonochromeLighting;
    float _AAStrength;
    float _AlphaBoostFA;
    float _MainGradationStrength;
    float _Main2ndTexAngle;
    float _Main2ndEnableLighting;
    float _Main2ndDissolveNoiseStrength;
    float _Main3rdTexAngle;
    float _Main3rdEnableLighting;
    float _Main3rdDissolveNoiseStrength;
    float4 _AlphaMask_ST;
    float _AlphaMaskScale;
    float _AlphaMaskValue;
    float _BackfaceForceShadow;
    float _ShadowStrength;
    float _ShadowNormalStrength;
    float _ShadowBorder;
    float _ShadowBlur;
    float _ShadowStrengthMaskLOD;
    float _ShadowBorderMaskLOD;
    float _ShadowBlurMaskLOD;
    float _Shadow2ndNormalStrength;
    float _Shadow2ndBorder;
    float _Shadow2ndBlur;
    float _Shadow3rdNormalStrength;
    float _Shadow3rdBorder;
    float _Shadow3rdBlur;
    float _ShadowMainStrength;
    float _ShadowEnvStrength;
    float _ShadowBorderRange;
    float _ShadowReceive;
    float _Shadow2ndReceive;
    float _Shadow3rdReceive;
    float _ShadowFlatBlur;
    float _ShadowFlatBorder;
    float _RimShadeNormalStrength;
    float _RimShadeBorder;
    float _RimShadeBlur;
    float _RimShadeFresnelPower;
    float _BacklightNormalStrength;
    float _BacklightBorder;
    float _BacklightBlur;
    float _BacklightDirectivity;
    float _BacklightViewStrength;
    float _BacklightBackfaceMask;
    float _BacklightMainStrength;
    float _BumpScale;
    float _Bump2ndScale;
    float _AnisotropyScale;
    float _AnisotropyTangentWidth;
    float _AnisotropyBitangentWidth;
    float _AnisotropyShift;
    float _AnisotropyShiftNoiseScale;
    float _AnisotropySpecularStrength;
    float _Anisotropy2ndTangentWidth;
    float _Anisotropy2ndBitangentWidth;
    float _Anisotropy2ndShift;
    float _Anisotropy2ndShiftNoiseScale;
    float _Anisotropy2ndSpecularStrength;
    float _Reflectance;
    float _SpecularNormalStrength;
    float _SpecularBorder;
    float _SpecularBlur;
    float _ReflectionNormalStrength;
    float _ReflectionCubeEnableLighting;
    float _Smoothness;
    float _Metallic;
    float _GSAAStrength;
    float _MatCapBlend;
    float _MatCapEnableLighting;
    float _MatCapShadowMask;
    float _MatCapVRParallaxStrength;
    float _MatCapBackfaceMask;
    float _MatCapLod;
    float _MatCapNormalStrength;
    float _MatCapMainStrength;
    float _MatCapBumpScale;
    float _MatCap2ndBlend;
    float _MatCap2ndEnableLighting;
    float _MatCap2ndShadowMask;
    float _MatCap2ndVRParallaxStrength;
    float _MatCap2ndBackfaceMask;
    float _MatCap2ndLod;
    float _MatCap2ndNormalStrength;
    float _MatCap2ndMainStrength;
    float _MatCap2ndBumpScale;
    float _RimNormalStrength;
    float _RimBorder;
    float _RimBlur;
    float _RimFresnelPower;
    float _RimEnableLighting;
    float _RimShadowMask;
    float _RimVRParallaxStrength;
    float _RimBackfaceMask;
    float _RimMainStrength;
    float _RimDirStrength;
    float _RimDirRange;
    float _RimIndirRange;
    float _RimIndirBorder;
    float _RimIndirBlur;
    float _GlitterMainStrength;
    float _GlitterPostContrast;
    float _GlitterSensitivity;
    float _GlitterNormalStrength;
    float _GlitterEnableLighting;
    float _GlitterShadowMask;
    float _GlitterVRParallaxStrength;
    float _GlitterBackfaceMask;
    float _GlitterScaleRandomize;
    float _DistanceFadeRimFresnelPower;
    float _EmissionBlend;
    float _EmissionParallaxDepth;
    float _EmissionFluorescence;
    float _EmissionMainStrength;
    float _EmissionGradSpeed;
    float _Emission2ndBlend;
    float _Emission2ndParallaxDepth;
    float _Emission2ndFluorescence;
    float _Emission2ndMainStrength;
    float _Emission2ndGradSpeed;
    float _Parallax;
    float _ParallaxOffset;
    float _DitherMaxValue;
    float _AudioLink2EmissionGrad;
    float _AudioLink2Emission2ndGrad;
    float _DissolveNoiseStrength;
    float _IDMask1;
    float _IDMask2;
    float _IDMask3;
    float _IDMask4;
    float _IDMask5;
    float _IDMask6;
    float _IDMask7;
    float _IDMask8;
    float _IDMaskPrior1;
    float _IDMaskPrior2;
    float _IDMaskPrior3;
    float _IDMaskPrior4;
    float _IDMaskPrior5;
    float _IDMaskPrior6;
    float _IDMaskPrior7;
    float _IDMaskPrior8;
    float _UDIMDiscardCompile;
    float _UDIMDiscardMode;
    float _UDIMDiscardUV;
    float _UDIMDiscardRow3_0;
    float _UDIMDiscardRow3_1;
    float _UDIMDiscardRow3_2;
    float _UDIMDiscardRow3_3;
    float _UDIMDiscardRow2_0;
    float _UDIMDiscardRow2_1;
    float _UDIMDiscardRow2_2;
    float _UDIMDiscardRow2_3;
    float _UDIMDiscardRow1_0;
    float _UDIMDiscardRow1_1;
    float _UDIMDiscardRow1_2;
    float _UDIMDiscardRow1_3;
    float _UDIMDiscardRow0_0;
    float _UDIMDiscardRow0_1;
    float _UDIMDiscardRow0_2;
    float _UDIMDiscardRow0_3;
    float _lilShadowCasterBias;
    float _OutlineLitScale;
    float _OutlineLitOffset;
    float _OutlineWidth;
    float _OutlineEnableLighting;
    float _OutlineVectorScale;
    float _OutlineFixWidth;
    float _OutlineZBias;
    float _TessEdge;
    float _TessStrength;
    float _TessShrink;
    float _TessFactorMax;
    int _IDMaskIndex1;
    int _IDMaskIndex2;
    int _IDMaskIndex3;
    int _IDMaskIndex4;
    int _IDMaskIndex5;
    int _IDMaskIndex6;
    int _IDMaskIndex7;
    int _IDMaskIndex8;
    uint _IDMaskFrom;
    uint _IDMaskIsBitmap;
    uint _IDMaskControlsDissolve;
    uint _Cull;
    uint _OutlineCull;
    uint _PreOutType;
    uint _Main2ndTexBlendMode;
    uint _Main2ndTexAlphaMode;
    uint _Main2ndTex_UVMode;
    uint _Main2ndTex_Cull;
    uint _Main3rdTexBlendMode;
    uint _Main3rdTexAlphaMode;
    uint _Main3rdTex_UVMode;
    uint _Main3rdTex_Cull;
    uint _AlphaMaskMode;
    uint _ShadowColorType;
    uint _ShadowMaskType;
    uint _Bump2ndMap_UVMode;
    uint _ReflectionBlendMode;
    uint _MatCapBlendMode;
    uint _MatCap2ndBlendMode;
    uint _RimBlendMode;
    uint _GlitterUVMode;
    uint _EmissionMap_UVMode;
    uint _EmissionBlendMode;
    uint _Emission2ndMap_UVMode;
    uint _Emission2ndBlendMode;
    uint _AudioLinkUVMode;
    uint _AudioLinkMask_UVMode;
    uint _AudioLinkVertexUVMode;
    uint _DistanceFadeMode;
    uint _UseDither;
    uint _OutlineVertexR2Width;
    uint _OutlineVectorUVMode;
    uint _Invisible;
    uint _UseMain2ndTex;
    uint _Main2ndTexIsMSDF;
    uint _Main2ndTexIsDecal;
    uint _Main2ndTexIsLeftOnly;
    uint _Main2ndTexIsRightOnly;
    uint _Main2ndTexShouldCopy;
    uint _Main2ndTexShouldFlipMirror;
    uint _Main2ndTexShouldFlipCopy;
    uint _UseMain3rdTex;
    uint _Main3rdTexIsMSDF;
    uint _Main3rdTexIsDecal;
    uint _Main3rdTexIsLeftOnly;
    uint _Main3rdTexIsRightOnly;
    uint _Main3rdTexShouldCopy;
    uint _Main3rdTexShouldFlipMirror;
    uint _Main3rdTexShouldFlipCopy;
    uint _UseShadow;
    uint _ShadowPostAO;
    uint _UseRimShade;
    uint _UseBacklight;
    uint _BacklightReceiveShadow;
    uint _UseBumpMap;
    uint _UseBump2ndMap;
    uint _UseAnisotropy;
    uint _Anisotropy2Reflection;
    uint _Anisotropy2MatCap;
    uint _Anisotropy2MatCap2nd;
    uint _UseReflection;
    uint _ApplySpecular;
    uint _ApplySpecularFA;
    uint _ApplyReflection;
    uint _SpecularToon;
    uint _ReflectionApplyTransparency;
    uint _ReflectionCubeOverride;
    uint _UseMatCap;
    uint _MatCapApplyTransparency;
    uint _MatCapPerspective;
    uint _MatCapZRotCancel;
    uint _MatCapCustomNormal;
    uint _UseMatCap2nd;
    uint _MatCap2ndApplyTransparency;
    uint _MatCap2ndPerspective;
    uint _MatCap2ndZRotCancel;
    uint _MatCap2ndCustomNormal;
    uint _UseRim;
    uint _RimApplyTransparency;
    uint _UseGlitter;
    uint _GlitterColorTex_UVMode;
    uint _GlitterApplyTransparency;
    uint _GlitterApplyShape;
    uint _GlitterAngleRandomize;
    uint _UseEmission;
    uint _EmissionUseGrad;
    uint _UseEmission2nd;
    uint _Emission2ndUseGrad;
    uint _UseParallax;
    uint _UsePOM;
    uint _UseAudioLink;
    uint _AudioLink2Main2nd;
    uint _AudioLink2Main3rd;
    uint _AudioLink2Emission;
    uint _AudioLink2Emission2nd;
    uint _AudioLink2Vertex;
    uint _AudioLinkAsLocal;
    uint _OutlineLitApplyTex;
    uint _OutlineLitShadowReceive;
    uint _OutlineDeleteMesh;
    uint _OutlineDisableInVR;
    float4 _AudioTexture_TexelSize;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    // mtl_VertexID generated in compute kernel,
    // mtl_BaseVertex generated in compute kernel,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(mtl_VertexID, mtl_BaseVertex, vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.TEXCOORD4 = input.cp[controlPointID].TEXCOORD4;
        output.TEXCOORD5 = input.cp[controlPointID].TEXCOORD5;
        output.TEXCOORD6 = input.cp[controlPointID].TEXCOORD6;
        output.TEXCOORD7 = input.cp[controlPointID].TEXCOORD7;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float4 u_xlat1;
    int2 u_xlati1;
    bool4 u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    bool2 u_xlatb3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float3 u_xlat11;
    float u_xlat22;
    bool2 u_xlatb23;
    int2 u_xlati24;
    bool2 u_xlatb24;
    float u_xlat33;
    float u_xlat34;
    // fork_phase2
    {
        if((VGlobals._Invisible)!=uint(0)){
            tessFactor.edgeTessellationFactor[0] = 0.0;
            tessFactor.edgeTessellationFactor[1] = 0.0;
            tessFactor.edgeTessellationFactor[2] = 0.0;
            tessFactor.insideTessellationFactor = 0.0;
            return;
        }
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].mtl_Position.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].mtl_Position.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].mtl_Position.zzz, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].mtl_Position.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].mtl_Position.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].mtl_Position.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat3.xyz = u_xlat2.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].mtl_Position.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].mtl_Position.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].mtl_Position.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat4.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat4.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat6.x = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
        u_xlat7.x = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat7.xyz = float3(u_xlat33) * u_xlat7.xyz;
        u_xlat8.x = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat8.y = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat8.z = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
        u_xlat9.xyz = u_xlat2.xyz + u_xlat4.xyz;
        u_xlat9.xyz = fma(u_xlat9.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat9.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
        u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.x = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat4.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat4.xyz;
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.y = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.z = max(u_xlat33, 1.0);
        u_xlat9.xyz = min(u_xlat9.xyz, float3(VGlobals._TessFactorMax));
        u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
        u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
        u_xlat11.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat34 = dot(u_xlat11.xyz, u_xlat11.xyz);
        u_xlat34 = rsqrt(u_xlat34);
        u_xlat11.xyz = u_xlat11.xyz * float3(u_xlat34);
        u_xlat0.y = dot(u_xlat7.xyz, u_xlat11.xyz);
        u_xlat2.xyz = (-u_xlat4.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat22 = rsqrt(u_xlat22);
        u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
        u_xlat0.z = dot(u_xlat8.xyz, u_xlat2.xyz);
        u_xlat2.xyz = abs(u_xlat0.zxy) + abs(u_xlat0.yzx);
        u_xlat0.xyz = fma((-u_xlat2.xyz), float3(0.5, 0.5, 0.5), float3(1.0, 1.0, 1.0));
        u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
        u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xyz;
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat34 = u_xlat0.y + u_xlat0.x;
        u_xlat34 = u_xlat0.z + u_xlat34;
        u_xlat0.w = u_xlat34 * 0.333333343;
        u_xlat1.xy = u_xlat1.xy / abs(u_xlat1.zz);
        u_xlat1.zw = u_xlat3.xy / abs(u_xlat3.zz);
        u_xlat2.xy = u_xlat5.xy / abs(u_xlat5.zz);
        u_xlatb24.xy = (float2(1.00999999, 1.00999999)<u_xlat1.xy);
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat1.zw);
        u_xlati24.xy = int2((uint2(u_xlatb24.xy) * 0xffffffffu) & (uint2(u_xlatb3.xy) * 0xffffffffu));
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat2.xy);
        u_xlati24.xy = int2((uint2(u_xlatb3.xy) * 0xffffffffu) & uint2(u_xlati24.xy));
        u_xlatb1 = (u_xlat1<float4(-1.00999999, -1.00999999, -1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb1.zw) * 0xffffffffu) & (uint2(u_xlatb1.xy) * 0xffffffffu));
        u_xlatb23.xy = (u_xlat2.xy<float2(-1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb23.xy) * 0xffffffffu) & uint2(u_xlati1.xy));
        u_xlati1.x = int(uint(u_xlati1.x) | uint(u_xlati24.x));
        u_xlati1.x = int(uint(u_xlati24.y) | uint(u_xlati1.x));
        u_xlati1.x = int(uint(u_xlati1.y) | uint(u_xlati1.x));
        u_xlat0 = (u_xlati1.x != 0) ? float4(0.0, 0.0, 0.0, 0.0) : u_xlat0;
        tessFactor.edgeTessellationFactor[0] = u_xlat0.x;
        tessFactor.edgeTessellationFactor[1] = u_xlat0.y;
        tessFactor.edgeTessellationFactor[2] = u_xlat0.z;
        tessFactor.insideTessellationFactor = u_xlat0.w;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float TEXCOORD9 [[ user(TEXCOORD9) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
		template <typename UVecType> UVecType bitFieldInsert(const UVecType width, const UVecType offset, const UVecType src2, const UVecType src3)
		{
			UVecType bitmask = (((UVecType(1) << width)-1) << offset) & 0xffffffff;
			return ((src2 << offset) & bitmask) | (src3 & ~bitmask);
		}; 
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    // mtl_VertexID unused,
    // mtl_BaseVertex unused,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    texture2d<float, access::sample > _AudioLinkLocalMap [[ texture(0) ]] ,
    texture2d<float, access::sample > _AudioTexture [[ texture(1) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    constexpr sampler lil_sampler_trilinear_repeat(filter::linear,mip_filter::linear,address::repeat);
    constexpr sampler lil_sampler_linear_clamp(filter::linear,mip_filter::nearest,address::clamp_to_edge);
        float4 phase0_Input0_1[3];
        phase0_Input0_1[2] = float4(input.cp[2].TEXCOORD0, input.cp[2].TEXCOORD1);
        phase0_Input0_1[1] = float4(input.cp[1].TEXCOORD0, input.cp[1].TEXCOORD1);
        phase0_Input0_1[0] = float4(input.cp[0].TEXCOORD0, input.cp[0].TEXCOORD1);
        float4 phase0_Input0_2[3];
        phase0_Input0_2[2] = float4(input.cp[2].TEXCOORD2, input.cp[2].TEXCOORD3);
        phase0_Input0_2[1] = float4(input.cp[1].TEXCOORD2, input.cp[1].TEXCOORD3);
        phase0_Input0_2[0] = float4(input.cp[0].TEXCOORD2, input.cp[0].TEXCOORD3);
    float4 phase0_Output0_4;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    int3 u_xlati3;
    uint u_xlatu3;
    bool u_xlatb3;
    float4 u_xlat4;
    int u_xlati4;
    float3 u_xlat5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    bool4 u_xlatb7;
    float4 u_xlat8;
    int4 u_xlati8;
    bool4 u_xlatb8;
    float4 u_xlat9;
    int4 u_xlati9;
    float4 u_xlat10;
    bool4 u_xlatb10;
    bool4 u_xlatb11;
    float4 u_xlat12;
    int4 u_xlati12;
    float4 u_xlat13;
    float u_xlat17;
    int u_xlati17;
    uint u_xlatu17;
    bool u_xlatb17;
    int u_xlati18;
    float2 u_xlat31;
    int2 u_xlati31;
    uint u_xlatu31;
    bool u_xlatb31;
    float u_xlat32;
    bool u_xlatb32;
    float2 u_xlat33;
    int u_xlati33;
    bool u_xlatb33;
    float u_xlat42;
    float u_xlat45;
    bool u_xlatb45;
    if((VGlobals._Invisible)==uint(0)){
        u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].mtl_Position.xyz;
        u_xlat0.xyz = fma(mtl_TessCoord.xxx, input.cp[0].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat0.xyz = fma(mtl_TessCoord.zzz, input.cp[2].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat1 = mtl_TessCoord.yyyy * phase0_Input0_1[1];
        u_xlat1 = fma(mtl_TessCoord.xxxx, phase0_Input0_1[0], u_xlat1);
        u_xlat1 = fma(mtl_TessCoord.zzzz, phase0_Input0_1[2], u_xlat1);
        u_xlat2 = mtl_TessCoord.yyyy * phase0_Input0_2[1];
        u_xlat2 = fma(mtl_TessCoord.xxxx, phase0_Input0_2[0], u_xlat2);
        u_xlat2 = fma(mtl_TessCoord.zzzz, phase0_Input0_2[2], u_xlat2);
        u_xlat3.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
        u_xlat3.xyz = fma(mtl_TessCoord.xxx, input.cp[0].NORMAL0.xyz, u_xlat3.xyz);
        u_xlat3.xyz = fma(mtl_TessCoord.zzz, input.cp[2].NORMAL0.xyz, u_xlat3.xyz);
        u_xlat4 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
        u_xlat4 = fma(mtl_TessCoord.xxxx, input.cp[0].TANGENT0, u_xlat4);
        u_xlat4 = fma(mtl_TessCoord.zzzz, input.cp[2].TANGENT0, u_xlat4);
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat3.xyz = float3(u_xlat42) * u_xlat3.xyz;
        u_xlat42 = dot(input.cp[0].mtl_Position.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat5.xyz = float3(u_xlat42) * input.cp[0].NORMAL0.xyz;
        u_xlat42 = dot(input.cp[1].mtl_Position.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat6.xyz = float3(u_xlat42) * input.cp[1].NORMAL0.xyz;
        u_xlat42 = dot(input.cp[2].mtl_Position.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat7.xyz = float3(u_xlat42) * input.cp[2].NORMAL0.xyz;
        u_xlat6.xyz = u_xlat6.xyz * mtl_TessCoord.yyy;
        u_xlat5.xyz = fma(u_xlat5.xyz, mtl_TessCoord.xxx, u_xlat6.xyz);
        u_xlat5.xyz = fma(u_xlat7.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
        u_xlat0.xyz = fma(u_xlat5.xyz, float3(VGlobals._TessStrength), u_xlat0.xyz);
        u_xlatb45 = int(VGlobals._UseAudioLink)!=0x0;
        u_xlatb5.x = int(VGlobals._AudioLink2Vertex)!=0x0;
        u_xlatb45 = u_xlatb45 && u_xlatb5.x;
        if(u_xlatb45){
            u_xlatb5.xy = (int2(VGlobals._AudioLinkVertexUVMode)==int2(0x1, 0x2));
            u_xlat6.xyz = u_xlat0.xyz + (-VGlobals._AudioLinkVertexStart.xyz);
            u_xlat45 = dot(u_xlat6.xyz, u_xlat6.xyz);
            u_xlat45 = sqrt(u_xlat45);
            u_xlat45 = fma(u_xlat45, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat45 = (u_xlatb5.x) ? u_xlat45 : VGlobals._AudioLinkVertexUVParams.y;
            u_xlat5.x = sin(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat6.x = cos(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat33.xy = u_xlat1.xy + float2(-0.5, -0.5);
            u_xlat5.x = u_xlat5.x * u_xlat33.y;
            u_xlat5.x = fma(u_xlat33.x, u_xlat6.x, (-u_xlat5.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = fma(u_xlat5.x, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat5.x = (u_xlatb5.y) ? u_xlat5.x : u_xlat45;
            if((VGlobals._AudioLinkAsLocal)!=uint(0)){
                u_xlat45 = (-VGlobals._Time.y) * VGlobals._AudioLinkLocalMapParams.x;
                u_xlat45 = u_xlat45 * VGlobals._AudioLinkLocalMapParams.y;
                u_xlat45 = u_xlat45 * 0.0166666675;
                u_xlat45 = fract(u_xlat45);
                u_xlat45 = u_xlat45 + VGlobals._AudioLinkLocalMapParams.z;
                u_xlat6.x = u_xlat45 + u_xlat5.x;
                u_xlat6.y = VGlobals._AudioLinkVertexUVParams.w;
                u_xlat45 = _AudioLinkLocalMap.sample(lil_sampler_trilinear_repeat, u_xlat6.xy, level(0.0)).x;
            } else {
                u_xlat33.x = float(_AudioTexture.get_width(0x0));
                u_xlati33 = int(u_xlat33.x);
                u_xlatb33 = 0x10<u_xlati33;
                if(u_xlatb33){
                    u_xlat5.y = VGlobals._AudioLinkVertexUVParams.w * 0.0625;
                    u_xlat45 = _AudioTexture.sample(lil_sampler_linear_clamp, u_xlat5.xy, level(0.0)).x;
                    u_xlat45 = u_xlat45;
                    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
                } else {
                    u_xlat5.x = fma(VGlobals._Time.y, VGlobals._AudioLinkDefaultValue.z, (-u_xlat5.x));
                    u_xlat5.x = fract(u_xlat5.x);
                    u_xlat5.x = u_xlat5.x + VGlobals._AudioLinkDefaultValue.w;
                    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
                    u_xlat5.x = u_xlat5.x * VGlobals._AudioLinkDefaultValue.y;
                    u_xlat45 = fma((-u_xlat5.x), VGlobals._AudioLinkDefaultValue.x, VGlobals._AudioLinkDefaultValue.x);
                    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
                }
            }
            u_xlat5.xyz = fma(u_xlat3.xyz, VGlobals._AudioLinkVertexStrength.www, VGlobals._AudioLinkVertexStrength.xyz);
            u_xlat0.xyz = fma(u_xlat5.xyz, float3(u_xlat45), u_xlat0.xyz);
        }
        u_xlat5.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat6 = u_xlat5.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
        u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat5.xxxx, u_xlat6);
        u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat5.zzzz, u_xlat6);
        u_xlat6 = u_xlat6 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
        u_xlat7.x = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        output.TEXCOORD4.xyz = u_xlat3.xxx * u_xlat7.xyz;
        u_xlat3.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat4.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat4.zzz, u_xlat3.xyz);
        u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat45 = rsqrt(u_xlat45);
        output.TEXCOORD5.xyz = float3(u_xlat45) * u_xlat3.xyz;
        switch(int(int(VGlobals._IDMaskFrom))){
            case 0x0:
                u_xlatu3 = uint(u_xlat1.x);
                break;
            case 0x1:
                u_xlatu3 = uint(u_xlat1.z);
                break;
            case 0x2:
                u_xlatu3 = uint(u_xlat2.x);
                break;
            case 0x3:
                u_xlatu3 = uint(u_xlat2.z);
                break;
            case 0x4:
                u_xlat17 = mtl_TessCoord.y * input.cp[1].TEXCOORD4.x;
                u_xlat17 = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD4.x, u_xlat17);
                u_xlat17 = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD4.x, u_xlat17);
                u_xlatu3 = uint(u_xlat17);
                break;
            case 0x5:
                u_xlat17 = mtl_TessCoord.y * input.cp[1].TEXCOORD5.x;
                u_xlat17 = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD5.x, u_xlat17);
                u_xlat17 = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD5.x, u_xlat17);
                u_xlatu3 = uint(u_xlat17);
                break;
            case 0x6:
                u_xlat17 = mtl_TessCoord.y * input.cp[1].TEXCOORD6.x;
                u_xlat17 = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD6.x, u_xlat17);
                u_xlat17 = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD6.x, u_xlat17);
                u_xlatu3 = uint(u_xlat17);
                break;
            case 0x7:
                u_xlat17 = mtl_TessCoord.y * input.cp[1].TEXCOORD7.x;
                u_xlat17 = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD7.x, u_xlat17);
                u_xlat17 = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD7.x, u_xlat17);
                u_xlatu3 = uint(u_xlat17);
                break;
            default:
                u_xlatu3 = input.cp[0].TEXCOORD8.x;
                break;
            }
            if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                u_xlat7.x = rint(VGlobals._IDMask1);
                u_xlat7.yzw = rint(float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4));
                u_xlat17 = dot(u_xlat7, float4(1.0, 2.0, 4.0, 8.0));
                u_xlat7.x = rint(VGlobals._IDMask5);
                u_xlat7.yzw = rint(float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8));
                u_xlat31.x = dot(u_xlat7, float4(16.0, 32.0, 64.0, 128.0));
                u_xlat17 = u_xlat31.x + u_xlat17;
                u_xlatu17 = uint(u_xlat17);
                u_xlatb31 = int(u_xlatu3)!=0x0;
                u_xlati17 = int(u_xlatu3 & u_xlatu17);
                u_xlatb17 = int(u_xlatu3)==u_xlati17;
                u_xlati17 = int((uint(u_xlatb17) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            } else {
                u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                u_xlat7.xy = float2(u_xlati31.yx);
                u_xlati8 = int4(u_xlatu3) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                u_xlat8 = float4(u_xlati8.wxyz);
                u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                u_xlat31.xy = float2(u_xlati31.xy);
                u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                u_xlat7.x = (-u_xlat7.x);
                u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                u_xlat8 = (-u_xlat8);
                u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                u_xlat9.zw = u_xlat10.zw;
                u_xlat7.yzw = u_xlat8.yzw;
                u_xlat7 = u_xlat7 * u_xlat9;
                u_xlat10.zw = u_xlat31.xy + float2(1.0, 1.0);
                u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                u_xlat8.yz = (-u_xlat31.xy);
                u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                u_xlat8.w = 1.0;
                u_xlat8 = u_xlat8 * u_xlat10;
                u_xlat9.x = VGlobals._IDMask1;
                u_xlat9.yzw = float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4);
                u_xlat31.x = dot(u_xlat7, u_xlat9);
                u_xlat7.x = VGlobals._IDMask5;
                u_xlat7.yzw = float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8);
                u_xlat45 = dot(u_xlat8, u_xlat7);
                u_xlat31.x = u_xlat45 + u_xlat31.x;
                u_xlati17 = int((float(0.0)!=u_xlat31.x) ? 0xFFFFFFFFu : uint(0));
            }
            if((VGlobals._IDMaskControlsDissolve)!=uint(0)){
                if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                    u_xlat7.x = rint(VGlobals._IDMaskPrior1);
                    u_xlat7.yzw = rint(float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4));
                    u_xlat31.x = dot(u_xlat7, float4(1.0, 2.0, 4.0, 8.0));
                    u_xlat7.x = rint(VGlobals._IDMaskPrior5);
                    u_xlat7.yzw = rint(float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8));
                    u_xlat45 = dot(u_xlat7, float4(16.0, 32.0, 64.0, 128.0));
                    u_xlat31.x = u_xlat45 + u_xlat31.x;
                    u_xlatu31 = uint(u_xlat31.x);
                    u_xlatb45 = int(u_xlatu3)!=0x0;
                    u_xlati31.x = int(u_xlatu3 & u_xlatu31);
                    u_xlatb31 = int(u_xlatu3)==u_xlati31.x;
                    u_xlati18 = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb45) * 0xffffffffu));
                } else {
                    u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                    u_xlat7.xy = float2(u_xlati31.yx);
                    u_xlati8 = int4(u_xlatu3) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                    u_xlat8 = float4(u_xlati8.wxyz);
                    u_xlati3.xz = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                    u_xlat3.xz = float2(u_xlati3.xz);
                    u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                    u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                    u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                    u_xlat7.x = (-u_xlat7.x);
                    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                    u_xlat8 = (-u_xlat8);
                    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                    u_xlat9.zw = u_xlat10.zw;
                    u_xlat7.yzw = u_xlat8.yzw;
                    u_xlat7 = u_xlat7 * u_xlat9;
                    u_xlat10.zw = u_xlat3.xz + float2(1.0, 1.0);
                    u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                    u_xlat8.yz = (-u_xlat3.xz);
                    u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                    u_xlat8.w = 1.0;
                    u_xlat8 = u_xlat8 * u_xlat10;
                    u_xlat9.x = VGlobals._IDMaskPrior1;
                    u_xlat9.yzw = float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4);
                    u_xlat3.x = dot(u_xlat7, u_xlat9);
                    u_xlat7.x = VGlobals._IDMaskPrior5;
                    u_xlat7.yzw = float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8);
                    u_xlat31.x = dot(u_xlat8, u_xlat7);
                    u_xlat3.x = u_xlat31.x + u_xlat3.x;
                    u_xlati18 = int((float(0.0)!=u_xlat3.x) ? 0xFFFFFFFFu : uint(0));
                }
                u_xlati4 = int((u_xlati17!=u_xlati18) ? 0xFFFFFFFFu : uint(0));
                u_xlati17 = int(uint(u_xlati17) & uint(u_xlati18));
            } else {
                u_xlati4 = int(int(0xffffffffu));
                u_xlati18 = int(0x0);
            }
            u_xlatb7 = (float4(VGlobals._UDIMDiscardMode, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV)==float4(0.0, 0.0, 1.0, 2.0));
            u_xlatb3 = VGlobals._UDIMDiscardCompile==1.0;
            u_xlatb3 = u_xlatb3 && u_xlatb7.x;
            u_xlat7.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb7.yzw));
            u_xlat8 = u_xlat1 * u_xlat7.xxyy;
            u_xlat31.xy = u_xlat8.zw + u_xlat8.xy;
            u_xlat31.xy = fma(u_xlat2.xy, u_xlat7.zz, u_xlat31.xy);
            u_xlatb32 = VGlobals._UDIMDiscardUV==3.0;
            u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);
            u_xlat31.xy = fma(u_xlat2.zw, float2(u_xlat32), u_xlat31.xy);
            u_xlatb7 = (u_xlat31.xxxx>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb8 = (u_xlat31.xxxx<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati9 = int4((uint4(u_xlatb7) * 0xffffffffu) & (uint4(u_xlatb8) * 0xffffffffu));
            u_xlat9 = as_type<float4>(uint4(u_xlati9) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlatb10 = (u_xlat31.yyyy>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb11 = (u_xlat31.yyyy<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati12 = int4((uint4(u_xlatb10) * 0xffffffffu) & (uint4(u_xlatb11) * 0xffffffffu));
            u_xlat12 = as_type<float4>(uint4(u_xlati12) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow0_0, VGlobals._UDIMDiscardRow0_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow0_2, VGlobals._UDIMDiscardRow0_3);
            u_xlat31.x = dot(u_xlat13, u_xlat9);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow1_0, VGlobals._UDIMDiscardRow1_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow1_2, VGlobals._UDIMDiscardRow1_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat45 = u_xlat45 * u_xlat12.y;
            u_xlat31.x = fma(u_xlat12.x, u_xlat31.x, u_xlat45);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow2_0, VGlobals._UDIMDiscardRow2_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow2_2, VGlobals._UDIMDiscardRow2_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat31.x = fma(u_xlat12.z, u_xlat45, u_xlat31.x);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow3_0, VGlobals._UDIMDiscardRow3_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow3_2, VGlobals._UDIMDiscardRow3_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat31.x = fma(u_xlat12.w, u_xlat45, u_xlat31.x);
            u_xlatb8.x = u_xlatb10.x;
            u_xlatb8.y = u_xlatb11.w;
            u_xlatb8.z = u_xlatb7.x;
            u_xlat7 = select(float4(0.0, 0.0, 0.0, 0.0), float4(1.0, 1.0, 1.0, 1.0), bool4(u_xlatb8));
            u_xlat45 = dot(u_xlat7, u_xlat7);
            u_xlatb45 = u_xlat45!=0.0;
            u_xlat45 = u_xlatb45 ? 1.0 : float(0.0);
            u_xlat31.x = u_xlat45 * u_xlat31.x;
            u_xlatb31 = 0.00100000005<u_xlat31.x;
            u_xlatb3 = u_xlatb31 && u_xlatb3;
            u_xlati3.x = int((uint(u_xlatb3) * 0xffffffffu) | uint(u_xlati17));
            output.mtl_Position = (u_xlati3.x != 0) ? float4(as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u))) : u_xlat6;
            u_xlati3.x = int(bitFieldInsert(0x1u, 0x1u, uint(u_xlati18), 0x0u));
            u_xlati3.x = int(bitFieldInsert(0x1u, 0x0u, uint(u_xlati4), uint(u_xlati3.x)));
            u_xlat0.w = float(u_xlati3.x);
            output.TEXCOORD0 = u_xlat1;
            output.TEXCOORD1 = u_xlat2;
            output.TEXCOORD2 = u_xlat0;
            phase0_Output0_4.xyz = u_xlat5.xyz;
            phase0_Output0_4.w = 1.0;
            output.TEXCOORD5.w = u_xlat4.w;
        } else {
            output.mtl_Position = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD1 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_4 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD4.xyz = float3(0.0, 0.0, 0.0);
        }
    output.TEXCOORD3 = phase0_Output0_4.xyz;
    output.TEXCOORD9 = phase0_Output0_4.w;
        return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation failed: 

program_source:831:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:841:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
                             ^
program_source:842:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
                                               ^
program_source:1145:50: error: member reference base type 'uint' (aka 'unsigned int') is not a structure or union
                u_xlatu42 = input.cp[0].TEXCOORD8.x;
                            ~~~~~~~~~~~~~~~~~~~~~^~



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float4 COLOR0 [[ attribute(9) ]] ;
    float3 NORMAL0 [[ attribute(10) ]] ;
    float4 TANGENT0 [[ attribute(11) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    uint mtl_VertexID,
    uint mtl_BaseVertex,
    Mtl_VertexIn input)
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseVertex = 0;
#endif
    mtl_VertexID = mtl_VertexID - mtl_BaseVertex;
    Mtl_VertexOut output;
    output.mtl_Position = input.POSITION0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = input.TEXCOORD1.xy;
    output.TEXCOORD2.xy = input.TEXCOORD2.xy;
    output.TEXCOORD3.xy = input.TEXCOORD3.xy;
    output.TEXCOORD4.xy = input.TEXCOORD4.xy;
    output.TEXCOORD5.xy = input.TEXCOORD5.xy;
    output.TEXCOORD6.xy = input.TEXCOORD6.xy;
    output.TEXCOORD7.xy = input.TEXCOORD7.xy;
    output.COLOR0 = input.COLOR0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TANGENT0 = input.TANGENT0;
    output.TEXCOORD8 = mtl_VertexID;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(12) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float4 COLOR0 [[ attribute(9) ]] ;
    float3 NORMAL0 [[ attribute(10) ]] ;
    float4 TANGENT0 [[ attribute(11) ]] ;
    uint TEXCOORD8 [[ attribute(13) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
    float3 unity_LightColor0;
    float3 unity_LightColor1;
    float3 unity_LightColor2;
    float3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
    float4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _LightColor0;
    float4 _SpecColor;
    bool4 unity_MetaVertexControl;
    bool4 unity_MetaFragmentControl;
    int unity_VisualizationMode;
    float unity_OneOverOutputBoost;
    float unity_MaxOutputValue;
    float unity_UseLinearSpace;
    float4 _lilBackgroundTexture_TexelSize;
    float4 _LightDirectionOverride;
    float4 _BackfaceColor;
    float4 _PreColor;
    float4 _Color;
    float4 _MainTex_ST;
    float4 _MainTex_ScrollRotate;
    float4 _MainTexHSVG;
    float4 _Color2nd;
    float4 _Main2ndTex_ST;
    float4 _Main2ndTex_ScrollRotate;
    float4 _Main2ndDistanceFade;
    float4 _Main2ndTexDecalAnimation;
    float4 _Main2ndTexDecalSubParam;
    float4 _Main2ndDissolveMask_ST;
    float4 _Main2ndDissolveColor;
    float4 _Main2ndDissolveParams;
    float4 _Main2ndDissolvePos;
    float4 _Main2ndDissolveNoiseMask_ST;
    float4 _Main2ndDissolveNoiseMask_ScrollRotate;
    float4 _Color3rd;
    float4 _Main3rdTex_ST;
    float4 _Main3rdTex_ScrollRotate;
    float4 _Main3rdDistanceFade;
    float4 _Main3rdTexDecalAnimation;
    float4 _Main3rdTexDecalSubParam;
    float4 _Main3rdDissolveMask_ST;
    float4 _Main3rdDissolveColor;
    float4 _Main3rdDissolveParams;
    float4 _Main3rdDissolvePos;
    float4 _Main3rdDissolveNoiseMask_ST;
    float4 _Main3rdDissolveNoiseMask_ScrollRotate;
    float4 _ShadowColor;
    float4 _Shadow2ndColor;
    float4 _Shadow3rdColor;
    float4 _ShadowBorderColor;
    float4 _ShadowAOShift;
    float4 _ShadowAOShift2;
    float4 _RimShadeColor;
    float4 _BacklightColor;
    float4 _BacklightColorTex_ST;
    float4 _EmissionColor;
    float4 _EmissionBlink;
    float4 _EmissionMap_ST;
    float4 _EmissionMap_ScrollRotate;
    float4 _EmissionBlendMask_ST;
    float4 _EmissionBlendMask_ScrollRotate;
    float4 _Emission2ndColor;
    float4 _Emission2ndBlink;
    float4 _Emission2ndMap_ST;
    float4 _Emission2ndMap_ScrollRotate;
    float4 _Emission2ndBlendMask_ST;
    float4 _Emission2ndBlendMask_ScrollRotate;
    float4 _BumpMap_ST;
    float4 _Bump2ndMap_ST;
    float4 _Bump2ndScaleMask_ST;
    float4 _AnisotropyTangentMap_ST;
    float4 _AnisotropyScaleMask_ST;
    float4 _AnisotropyShiftNoiseMask_ST;
    float4 _ReflectionColor;
    float4 _MetallicGlossMap_ST;
    float4 _ReflectionColorTex_ST;
    float4 _SmoothnessTex_ST;
    float4 _ReflectionCubeColor;
    float4 _ReflectionCubeTex_HDR;
    float4 _MatCapColor;
    float4 _MatCapTex_ST;
    float4 _MatCapBlendMask_ST;
    float4 _MatCapBlendUV1;
    float4 _MatCapBumpMap_ST;
    float4 _MatCap2ndColor;
    float4 _MatCap2ndTex_ST;
    float4 _MatCap2ndBlendMask_ST;
    float4 _MatCap2ndBlendUV1;
    float4 _MatCap2ndBumpMap_ST;
    float4 _RimColor;
    float4 _RimColorTex_ST;
    float4 _RimIndirColor;
    float4 _GlitterColor;
    float4 _GlitterColorTex_ST;
    float4 _GlitterParams1;
    float4 _GlitterParams2;
    float4 _GlitterShapeTex_ST;
    float4 _GlitterAtras;
    float4 _DistanceFade;
    float4 _DistanceFadeColor;
    float4 _DistanceFadeRimColor;
    float4 _DitherTex_TexelSize;
    float4 _AudioLinkMask_ST;
    float4 _AudioLinkMask_ScrollRotate;
    float4 _AudioLinkDefaultValue;
    float4 _AudioLinkUVParams;
    float4 _AudioLinkStart;
    float4 _AudioLinkVertexUVParams;
    float4 _AudioLinkVertexStart;
    float4 _AudioLinkVertexStrength;
    float4 _AudioLinkLocalMapParams;
    float4 _DissolveMask_ST;
    float4 _DissolveColor;
    float4 _DissolveParams;
    float4 _DissolvePos;
    float4 _DissolveNoiseMask_ST;
    float4 _DissolveNoiseMask_ScrollRotate;
    float4 _OutlineColor;
    float4 _OutlineLitColor;
    float4 _OutlineTex_ST;
    float4 _OutlineTex_ScrollRotate;
    float4 _OutlineTexHSVG;
    float _AsUnlit;
    float _Cutoff;
    float _PreCutoff;
    float _SubpassCutoff;
    float _FlipNormal;
    float _ShiftBackfaceUV;
    float _VertexLightStrength;
    float _LightMinLimit;
    float _LightMaxLimit;
    float _MonochromeLighting;
    float _AAStrength;
    float _AlphaBoostFA;
    float _MainGradationStrength;
    float _Main2ndTexAngle;
    float _Main2ndEnableLighting;
    float _Main2ndDissolveNoiseStrength;
    float _Main3rdTexAngle;
    float _Main3rdEnableLighting;
    float _Main3rdDissolveNoiseStrength;
    float4 _AlphaMask_ST;
    float _AlphaMaskScale;
    float _AlphaMaskValue;
    float _BackfaceForceShadow;
    float _ShadowStrength;
    float _ShadowNormalStrength;
    float _ShadowBorder;
    float _ShadowBlur;
    float _ShadowStrengthMaskLOD;
    float _ShadowBorderMaskLOD;
    float _ShadowBlurMaskLOD;
    float _Shadow2ndNormalStrength;
    float _Shadow2ndBorder;
    float _Shadow2ndBlur;
    float _Shadow3rdNormalStrength;
    float _Shadow3rdBorder;
    float _Shadow3rdBlur;
    float _ShadowMainStrength;
    float _ShadowEnvStrength;
    float _ShadowBorderRange;
    float _ShadowReceive;
    float _Shadow2ndReceive;
    float _Shadow3rdReceive;
    float _ShadowFlatBlur;
    float _ShadowFlatBorder;
    float _RimShadeNormalStrength;
    float _RimShadeBorder;
    float _RimShadeBlur;
    float _RimShadeFresnelPower;
    float _BacklightNormalStrength;
    float _BacklightBorder;
    float _BacklightBlur;
    float _BacklightDirectivity;
    float _BacklightViewStrength;
    float _BacklightBackfaceMask;
    float _BacklightMainStrength;
    float _BumpScale;
    float _Bump2ndScale;
    float _AnisotropyScale;
    float _AnisotropyTangentWidth;
    float _AnisotropyBitangentWidth;
    float _AnisotropyShift;
    float _AnisotropyShiftNoiseScale;
    float _AnisotropySpecularStrength;
    float _Anisotropy2ndTangentWidth;
    float _Anisotropy2ndBitangentWidth;
    float _Anisotropy2ndShift;
    float _Anisotropy2ndShiftNoiseScale;
    float _Anisotropy2ndSpecularStrength;
    float _Reflectance;
    float _SpecularNormalStrength;
    float _SpecularBorder;
    float _SpecularBlur;
    float _ReflectionNormalStrength;
    float _ReflectionCubeEnableLighting;
    float _Smoothness;
    float _Metallic;
    float _GSAAStrength;
    float _MatCapBlend;
    float _MatCapEnableLighting;
    float _MatCapShadowMask;
    float _MatCapVRParallaxStrength;
    float _MatCapBackfaceMask;
    float _MatCapLod;
    float _MatCapNormalStrength;
    float _MatCapMainStrength;
    float _MatCapBumpScale;
    float _MatCap2ndBlend;
    float _MatCap2ndEnableLighting;
    float _MatCap2ndShadowMask;
    float _MatCap2ndVRParallaxStrength;
    float _MatCap2ndBackfaceMask;
    float _MatCap2ndLod;
    float _MatCap2ndNormalStrength;
    float _MatCap2ndMainStrength;
    float _MatCap2ndBumpScale;
    float _RimNormalStrength;
    float _RimBorder;
    float _RimBlur;
    float _RimFresnelPower;
    float _RimEnableLighting;
    float _RimShadowMask;
    float _RimVRParallaxStrength;
    float _RimBackfaceMask;
    float _RimMainStrength;
    float _RimDirStrength;
    float _RimDirRange;
    float _RimIndirRange;
    float _RimIndirBorder;
    float _RimIndirBlur;
    float _GlitterMainStrength;
    float _GlitterPostContrast;
    float _GlitterSensitivity;
    float _GlitterNormalStrength;
    float _GlitterEnableLighting;
    float _GlitterShadowMask;
    float _GlitterVRParallaxStrength;
    float _GlitterBackfaceMask;
    float _GlitterScaleRandomize;
    float _DistanceFadeRimFresnelPower;
    float _EmissionBlend;
    float _EmissionParallaxDepth;
    float _EmissionFluorescence;
    float _EmissionMainStrength;
    float _EmissionGradSpeed;
    float _Emission2ndBlend;
    float _Emission2ndParallaxDepth;
    float _Emission2ndFluorescence;
    float _Emission2ndMainStrength;
    float _Emission2ndGradSpeed;
    float _Parallax;
    float _ParallaxOffset;
    float _DitherMaxValue;
    float _AudioLink2EmissionGrad;
    float _AudioLink2Emission2ndGrad;
    float _DissolveNoiseStrength;
    float _IDMask1;
    float _IDMask2;
    float _IDMask3;
    float _IDMask4;
    float _IDMask5;
    float _IDMask6;
    float _IDMask7;
    float _IDMask8;
    float _IDMaskPrior1;
    float _IDMaskPrior2;
    float _IDMaskPrior3;
    float _IDMaskPrior4;
    float _IDMaskPrior5;
    float _IDMaskPrior6;
    float _IDMaskPrior7;
    float _IDMaskPrior8;
    float _UDIMDiscardCompile;
    float _UDIMDiscardMode;
    float _UDIMDiscardUV;
    float _UDIMDiscardRow3_0;
    float _UDIMDiscardRow3_1;
    float _UDIMDiscardRow3_2;
    float _UDIMDiscardRow3_3;
    float _UDIMDiscardRow2_0;
    float _UDIMDiscardRow2_1;
    float _UDIMDiscardRow2_2;
    float _UDIMDiscardRow2_3;
    float _UDIMDiscardRow1_0;
    float _UDIMDiscardRow1_1;
    float _UDIMDiscardRow1_2;
    float _UDIMDiscardRow1_3;
    float _UDIMDiscardRow0_0;
    float _UDIMDiscardRow0_1;
    float _UDIMDiscardRow0_2;
    float _UDIMDiscardRow0_3;
    float _lilShadowCasterBias;
    float _OutlineLitScale;
    float _OutlineLitOffset;
    float _OutlineWidth;
    float _OutlineEnableLighting;
    float _OutlineVectorScale;
    float _OutlineFixWidth;
    float _OutlineZBias;
    float _TessEdge;
    float _TessStrength;
    float _TessShrink;
    float _TessFactorMax;
    int _IDMaskIndex1;
    int _IDMaskIndex2;
    int _IDMaskIndex3;
    int _IDMaskIndex4;
    int _IDMaskIndex5;
    int _IDMaskIndex6;
    int _IDMaskIndex7;
    int _IDMaskIndex8;
    uint _IDMaskFrom;
    uint _IDMaskIsBitmap;
    uint _IDMaskControlsDissolve;
    uint _Cull;
    uint _OutlineCull;
    uint _PreOutType;
    uint _Main2ndTexBlendMode;
    uint _Main2ndTexAlphaMode;
    uint _Main2ndTex_UVMode;
    uint _Main2ndTex_Cull;
    uint _Main3rdTexBlendMode;
    uint _Main3rdTexAlphaMode;
    uint _Main3rdTex_UVMode;
    uint _Main3rdTex_Cull;
    uint _AlphaMaskMode;
    uint _ShadowColorType;
    uint _ShadowMaskType;
    uint _Bump2ndMap_UVMode;
    uint _ReflectionBlendMode;
    uint _MatCapBlendMode;
    uint _MatCap2ndBlendMode;
    uint _RimBlendMode;
    uint _GlitterUVMode;
    uint _EmissionMap_UVMode;
    uint _EmissionBlendMode;
    uint _Emission2ndMap_UVMode;
    uint _Emission2ndBlendMode;
    uint _AudioLinkUVMode;
    uint _AudioLinkMask_UVMode;
    uint _AudioLinkVertexUVMode;
    uint _DistanceFadeMode;
    uint _UseDither;
    uint _OutlineVertexR2Width;
    uint _OutlineVectorUVMode;
    uint _Invisible;
    uint _UseMain2ndTex;
    uint _Main2ndTexIsMSDF;
    uint _Main2ndTexIsDecal;
    uint _Main2ndTexIsLeftOnly;
    uint _Main2ndTexIsRightOnly;
    uint _Main2ndTexShouldCopy;
    uint _Main2ndTexShouldFlipMirror;
    uint _Main2ndTexShouldFlipCopy;
    uint _UseMain3rdTex;
    uint _Main3rdTexIsMSDF;
    uint _Main3rdTexIsDecal;
    uint _Main3rdTexIsLeftOnly;
    uint _Main3rdTexIsRightOnly;
    uint _Main3rdTexShouldCopy;
    uint _Main3rdTexShouldFlipMirror;
    uint _Main3rdTexShouldFlipCopy;
    uint _UseShadow;
    uint _ShadowPostAO;
    uint _UseRimShade;
    uint _UseBacklight;
    uint _BacklightReceiveShadow;
    uint _UseBumpMap;
    uint _UseBump2ndMap;
    uint _UseAnisotropy;
    uint _Anisotropy2Reflection;
    uint _Anisotropy2MatCap;
    uint _Anisotropy2MatCap2nd;
    uint _UseReflection;
    uint _ApplySpecular;
    uint _ApplySpecularFA;
    uint _ApplyReflection;
    uint _SpecularToon;
    uint _ReflectionApplyTransparency;
    uint _ReflectionCubeOverride;
    uint _UseMatCap;
    uint _MatCapApplyTransparency;
    uint _MatCapPerspective;
    uint _MatCapZRotCancel;
    uint _MatCapCustomNormal;
    uint _UseMatCap2nd;
    uint _MatCap2ndApplyTransparency;
    uint _MatCap2ndPerspective;
    uint _MatCap2ndZRotCancel;
    uint _MatCap2ndCustomNormal;
    uint _UseRim;
    uint _RimApplyTransparency;
    uint _UseGlitter;
    uint _GlitterColorTex_UVMode;
    uint _GlitterApplyTransparency;
    uint _GlitterApplyShape;
    uint _GlitterAngleRandomize;
    uint _UseEmission;
    uint _EmissionUseGrad;
    uint _UseEmission2nd;
    uint _Emission2ndUseGrad;
    uint _UseParallax;
    uint _UsePOM;
    uint _UseAudioLink;
    uint _AudioLink2Main2nd;
    uint _AudioLink2Main3rd;
    uint _AudioLink2Emission;
    uint _AudioLink2Emission2nd;
    uint _AudioLink2Vertex;
    uint _AudioLinkAsLocal;
    uint _OutlineLitApplyTex;
    uint _OutlineLitShadowReceive;
    uint _OutlineDeleteMesh;
    uint _OutlineDisableInVR;
    float4 _AudioTexture_TexelSize;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    // mtl_VertexID generated in compute kernel,
    // mtl_BaseVertex generated in compute kernel,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(mtl_VertexID, mtl_BaseVertex, vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.TEXCOORD4 = input.cp[controlPointID].TEXCOORD4;
        output.TEXCOORD5 = input.cp[controlPointID].TEXCOORD5;
        output.TEXCOORD6 = input.cp[controlPointID].TEXCOORD6;
        output.TEXCOORD7 = input.cp[controlPointID].TEXCOORD7;
        output.COLOR0 = input.cp[controlPointID].COLOR0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float4 u_xlat1;
    int2 u_xlati1;
    bool4 u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    bool2 u_xlatb3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float3 u_xlat11;
    float u_xlat22;
    bool2 u_xlatb23;
    int2 u_xlati24;
    bool2 u_xlatb24;
    float u_xlat33;
    float u_xlat34;
    // fork_phase2
    {
        if((VGlobals._Invisible)!=uint(0)){
            tessFactor.edgeTessellationFactor[0] = 0.0;
            tessFactor.edgeTessellationFactor[1] = 0.0;
            tessFactor.edgeTessellationFactor[2] = 0.0;
            tessFactor.insideTessellationFactor = 0.0;
            return;
        }
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].mtl_Position.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].mtl_Position.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].mtl_Position.zzz, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].mtl_Position.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].mtl_Position.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].mtl_Position.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat3.xyz = u_xlat2.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].mtl_Position.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].mtl_Position.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].mtl_Position.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat4.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat4.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat6.x = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
        u_xlat7.x = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat7.xyz = float3(u_xlat33) * u_xlat7.xyz;
        u_xlat8.x = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat8.y = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat8.z = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
        u_xlat9.xyz = u_xlat2.xyz + u_xlat4.xyz;
        u_xlat9.xyz = fma(u_xlat9.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat9.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
        u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.x = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat4.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat4.xyz;
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.y = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.z = max(u_xlat33, 1.0);
        u_xlat9.xyz = min(u_xlat9.xyz, float3(VGlobals._TessFactorMax));
        u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
        u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
        u_xlat11.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat34 = dot(u_xlat11.xyz, u_xlat11.xyz);
        u_xlat34 = rsqrt(u_xlat34);
        u_xlat11.xyz = u_xlat11.xyz * float3(u_xlat34);
        u_xlat0.y = dot(u_xlat7.xyz, u_xlat11.xyz);
        u_xlat2.xyz = (-u_xlat4.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat22 = rsqrt(u_xlat22);
        u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
        u_xlat0.z = dot(u_xlat8.xyz, u_xlat2.xyz);
        u_xlat2.xyz = abs(u_xlat0.zxy) + abs(u_xlat0.yzx);
        u_xlat0.xyz = fma((-u_xlat2.xyz), float3(0.5, 0.5, 0.5), float3(1.0, 1.0, 1.0));
        u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
        u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xyz;
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat34 = u_xlat0.y + u_xlat0.x;
        u_xlat34 = u_xlat0.z + u_xlat34;
        u_xlat0.w = u_xlat34 * 0.333333343;
        u_xlat1.xy = u_xlat1.xy / abs(u_xlat1.zz);
        u_xlat1.zw = u_xlat3.xy / abs(u_xlat3.zz);
        u_xlat2.xy = u_xlat5.xy / abs(u_xlat5.zz);
        u_xlatb24.xy = (float2(1.00999999, 1.00999999)<u_xlat1.xy);
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat1.zw);
        u_xlati24.xy = int2((uint2(u_xlatb24.xy) * 0xffffffffu) & (uint2(u_xlatb3.xy) * 0xffffffffu));
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat2.xy);
        u_xlati24.xy = int2((uint2(u_xlatb3.xy) * 0xffffffffu) & uint2(u_xlati24.xy));
        u_xlatb1 = (u_xlat1<float4(-1.00999999, -1.00999999, -1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb1.zw) * 0xffffffffu) & (uint2(u_xlatb1.xy) * 0xffffffffu));
        u_xlatb23.xy = (u_xlat2.xy<float2(-1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb23.xy) * 0xffffffffu) & uint2(u_xlati1.xy));
        u_xlati1.x = int(uint(u_xlati1.x) | uint(u_xlati24.x));
        u_xlati1.x = int(uint(u_xlati24.y) | uint(u_xlati1.x));
        u_xlati1.x = int(uint(u_xlati1.y) | uint(u_xlati1.x));
        u_xlat0 = (u_xlati1.x != 0) ? float4(0.0, 0.0, 0.0, 0.0) : u_xlat0;
        tessFactor.edgeTessellationFactor[0] = u_xlat0.x;
        tessFactor.edgeTessellationFactor[1] = u_xlat0.y;
        tessFactor.edgeTessellationFactor[2] = u_xlat0.z;
        tessFactor.insideTessellationFactor = u_xlat0.w;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float TEXCOORD7 [[ user(TEXCOORD7) ]];
};
		template <typename UVecType> UVecType bitFieldInsert(const UVecType width, const UVecType offset, const UVecType src2, const UVecType src3)
		{
			UVecType bitmask = (((UVecType(1) << width)-1) << offset) & 0xffffffff;
			return ((src2 << offset) & bitmask) | (src3 & ~bitmask);
		}; 
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    // mtl_VertexID unused,
    // mtl_BaseVertex unused,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    texture2d<float, access::sample > _AudioLinkLocalMap [[ texture(0) ]] ,
    texture2d<float, access::sample > _OutlineWidthMask [[ texture(1) ]] ,
    texture2d<float, access::sample > _OutlineVectorTex [[ texture(2) ]] ,
    texture2d<float, access::sample > _AudioTexture [[ texture(3) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    constexpr sampler lil_sampler_trilinear_repeat(filter::linear,mip_filter::linear,address::repeat);
    constexpr sampler lil_sampler_linear_clamp(filter::linear,mip_filter::nearest,address::clamp_to_edge);
        float4 phase0_Input0_1[3];
        phase0_Input0_1[2] = float4(input.cp[2].TEXCOORD0, input.cp[2].TEXCOORD1);
        phase0_Input0_1[1] = float4(input.cp[1].TEXCOORD0, input.cp[1].TEXCOORD1);
        phase0_Input0_1[0] = float4(input.cp[0].TEXCOORD0, input.cp[0].TEXCOORD1);
        float4 phase0_Input0_2[3];
        phase0_Input0_2[2] = float4(input.cp[2].TEXCOORD2, input.cp[2].TEXCOORD3);
        phase0_Input0_2[1] = float4(input.cp[1].TEXCOORD2, input.cp[1].TEXCOORD3);
        phase0_Input0_2[0] = float4(input.cp[0].TEXCOORD2, input.cp[0].TEXCOORD3);
    float4 phase0_Output0_4;
    float3 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    int u_xlati4;
    uint u_xlatu4;
    bool4 u_xlatb4;
    float4 u_xlat5;
    float4 u_xlat6;
    int u_xlati6;
    bool2 u_xlatb6;
    float4 u_xlat7;
    int4 u_xlati7;
    bool4 u_xlatb7;
    float4 u_xlat8;
    int4 u_xlati8;
    bool4 u_xlatb8;
    float4 u_xlat9;
    int4 u_xlati9;
    float4 u_xlat10;
    bool4 u_xlatb10;
    float4 u_xlat11;
    int4 u_xlati11;
    float4 u_xlat12;
    bool u_xlatb13;
    float3 u_xlat16;
    float3 u_xlat17;
    int2 u_xlati17;
    uint u_xlatu17;
    bool u_xlatb17;
    int u_xlati19;
    float2 u_xlat21;
    bool u_xlatb26;
    float2 u_xlat30;
    bool u_xlatb30;
    bool2 u_xlatb32;
    float u_xlat39;
    int u_xlati39;
    bool u_xlatb39;
    float u_xlat42;
    uint u_xlatu42;
    bool u_xlatb42;
    float u_xlat43;
    int u_xlati43;
    uint u_xlatu43;
    bool u_xlatb43;
    float4 TempArray0[4];
    u_xlatb0 = int(VGlobals._Invisible)!=0x0;
    u_xlatb13 = int(VGlobals._OutlineDisableInVR)!=0x0;
    u_xlatb26 = 9.99999997e-07<abs(VGlobals.hlslcc_mtx4x4glstate_matrix_projection[2].x);
    u_xlatb13 = u_xlatb26 && u_xlatb13;
    u_xlatb0 = u_xlatb13 || u_xlatb0;
    if(!u_xlatb0){
        u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].mtl_Position.xyz;
        u_xlat0.xyz = fma(mtl_TessCoord.xxx, input.cp[0].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat0.xyz = fma(mtl_TessCoord.zzz, input.cp[2].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat1 = mtl_TessCoord.yyyy * phase0_Input0_1[1];
        u_xlat1 = fma(mtl_TessCoord.xxxx, phase0_Input0_1[0], u_xlat1);
        u_xlat1 = fma(mtl_TessCoord.zzzz, phase0_Input0_1[2], u_xlat1);
        u_xlat2 = mtl_TessCoord.yyyy * phase0_Input0_2[1];
        u_xlat2 = fma(mtl_TessCoord.xxxx, phase0_Input0_2[0], u_xlat2);
        u_xlat2 = fma(mtl_TessCoord.zzzz, phase0_Input0_2[2], u_xlat2);
        u_xlat3 = mtl_TessCoord.yyyy * input.cp[1].COLOR0;
        u_xlat3 = fma(mtl_TessCoord.xxxx, input.cp[0].COLOR0, u_xlat3);
        u_xlat3 = fma(mtl_TessCoord.zzzz, input.cp[2].COLOR0, u_xlat3);
        u_xlat4.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
        u_xlat4.xyz = fma(mtl_TessCoord.xxx, input.cp[0].NORMAL0.xyz, u_xlat4.xyz);
        u_xlat4.xyz = fma(mtl_TessCoord.zzz, input.cp[2].NORMAL0.xyz, u_xlat4.xyz);
        u_xlat5 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
        u_xlat5 = fma(mtl_TessCoord.xxxx, input.cp[0].TANGENT0, u_xlat5);
        u_xlat5 = fma(mtl_TessCoord.zzzz, input.cp[2].TANGENT0, u_xlat5);
        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat39 = rsqrt(u_xlat39);
        u_xlat4.xyz = float3(u_xlat39) * u_xlat4.xyz;
        u_xlat39 = dot(input.cp[0].mtl_Position.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat6.xyz = float3(u_xlat39) * input.cp[0].NORMAL0.xyz;
        u_xlat39 = dot(input.cp[1].mtl_Position.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat7.xyz = float3(u_xlat39) * input.cp[1].NORMAL0.xyz;
        u_xlat39 = dot(input.cp[2].mtl_Position.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat8.xyz = float3(u_xlat39) * input.cp[2].NORMAL0.xyz;
        u_xlat7.xyz = u_xlat7.xyz * mtl_TessCoord.yyy;
        u_xlat6.xyz = fma(u_xlat6.xyz, mtl_TessCoord.xxx, u_xlat7.xyz);
        u_xlat6.xyz = fma(u_xlat8.xyz, mtl_TessCoord.zzz, u_xlat6.xyz);
        u_xlat0.xyz = fma(u_xlat6.xyz, float3(VGlobals._TessStrength), u_xlat0.xyz);
        u_xlat6.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
        u_xlat7.xyz = u_xlat5.yzx * u_xlat4.zxy;
        u_xlat7.xyz = fma(u_xlat4.yzx, u_xlat5.zxy, (-u_xlat7.xyz));
        u_xlat39 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat39 = rsqrt(u_xlat39);
        u_xlat7.xyz = float3(u_xlat39) * u_xlat7.xyz;
        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat39 = sqrt(u_xlat39);
        u_xlat39 = u_xlat39 * u_xlat5.w;
        u_xlat7.xyz = float3(u_xlat39) * u_xlat7.xyz;
        u_xlatb39 = int(VGlobals._UseAudioLink)!=0x0;
        u_xlatb43 = int(VGlobals._AudioLink2Vertex)!=0x0;
        u_xlatb39 = u_xlatb39 && u_xlatb43;
        if(u_xlatb39){
            u_xlatb32.xy = (int2(VGlobals._AudioLinkVertexUVMode)==int2(0x1, 0x2));
            u_xlat8.xyz = u_xlat0.xyz + (-VGlobals._AudioLinkVertexStart.xyz);
            u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat39 = sqrt(u_xlat39);
            u_xlat39 = fma(u_xlat39, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat39 = (u_xlatb32.x) ? u_xlat39 : VGlobals._AudioLinkVertexUVParams.y;
            u_xlat8.x = sin(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat9.x = cos(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat21.xy = u_xlat1.xy + float2(-0.5, -0.5);
            u_xlat43 = u_xlat8.x * u_xlat21.y;
            u_xlat43 = fma(u_xlat21.x, u_xlat9.x, (-u_xlat43));
            u_xlat43 = u_xlat43 + 0.5;
            u_xlat43 = fma(u_xlat43, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat8.x = (u_xlatb32.y) ? u_xlat43 : u_xlat39;
            if((VGlobals._AudioLinkAsLocal)!=uint(0)){
                u_xlat39 = (-VGlobals._Time.y) * VGlobals._AudioLinkLocalMapParams.x;
                u_xlat39 = u_xlat39 * VGlobals._AudioLinkLocalMapParams.y;
                u_xlat39 = u_xlat39 * 0.0166666675;
                u_xlat39 = fract(u_xlat39);
                u_xlat39 = u_xlat39 + VGlobals._AudioLinkLocalMapParams.z;
                u_xlat9.x = u_xlat39 + u_xlat8.x;
                u_xlat9.y = VGlobals._AudioLinkVertexUVParams.w;
                u_xlat39 = _AudioLinkLocalMap.sample(lil_sampler_trilinear_repeat, u_xlat9.xy, level(0.0)).x;
            } else {
                u_xlat43 = float(_AudioTexture.get_width(0x0));
                u_xlati43 = int(u_xlat43);
                u_xlatb43 = 0x10<u_xlati43;
                if(u_xlatb43){
                    u_xlat8.y = VGlobals._AudioLinkVertexUVParams.w * 0.0625;
                    u_xlat39 = _AudioTexture.sample(lil_sampler_linear_clamp, u_xlat8.xy, level(0.0)).x;
                    u_xlat39 = u_xlat39;
                    u_xlat39 = clamp(u_xlat39, 0.0f, 1.0f);
                } else {
                    u_xlat43 = fma(VGlobals._Time.y, VGlobals._AudioLinkDefaultValue.z, (-u_xlat8.x));
                    u_xlat43 = fract(u_xlat43);
                    u_xlat43 = u_xlat43 + VGlobals._AudioLinkDefaultValue.w;
                    u_xlat43 = clamp(u_xlat43, 0.0f, 1.0f);
                    u_xlat43 = u_xlat43 * VGlobals._AudioLinkDefaultValue.y;
                    u_xlat39 = fma((-u_xlat43), VGlobals._AudioLinkDefaultValue.x, VGlobals._AudioLinkDefaultValue.x);
                    u_xlat39 = clamp(u_xlat39, 0.0f, 1.0f);
                }
            }
            u_xlat8.xyz = fma(u_xlat4.xyz, VGlobals._AudioLinkVertexStrength.www, VGlobals._AudioLinkVertexStrength.xyz);
            u_xlat0.xyz = fma(u_xlat8.xyz, float3(u_xlat39), u_xlat0.xyz);
        }
        TempArray0[0].xy = u_xlat6.xy;
        TempArray0[1].xy = u_xlat1.zw;
        TempArray0[2].xy = u_xlat2.xy;
        TempArray0[3].xy = u_xlat2.zw;
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz);
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, u_xlat0.yyy, u_xlat8.xyz);
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat8.xyz);
        u_xlat39 = VGlobals._OutlineWidth * 0.00999999978;
        u_xlat43 = _OutlineWidthMask.sample(lil_sampler_trilinear_repeat, u_xlat6.xy, level(0.0)).x;
        u_xlat39 = u_xlat39 * u_xlat43;
        u_xlatb6.xy = (int2(VGlobals._OutlineVertexR2Width)==int2(0x1, 0x2));
        u_xlat43 = u_xlat3.x * u_xlat39;
        u_xlat39 = (u_xlatb6.x) ? u_xlat43 : u_xlat39;
        u_xlat42 = u_xlat3.w * u_xlat39;
        u_xlat39 = (u_xlatb6.y) ? u_xlat42 : u_xlat39;
        u_xlat6.xzw = (-u_xlat8.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat42 = dot(u_xlat6.xzw, u_xlat6.xzw);
        u_xlat42 = sqrt(u_xlat42);
        u_xlat42 = min(u_xlat42, 1.0);
        u_xlat42 = u_xlat42 + -1.0;
        u_xlat42 = fma(VGlobals._OutlineFixWidth, u_xlat42, 1.0);
        u_xlat42 = u_xlat39 * u_xlat42;
        u_xlatu43 = VGlobals._OutlineVectorUVMode;
        u_xlat6.xz = TempArray0[int(u_xlatu43)].xy;
        u_xlat6.xzw = _OutlineVectorTex.sample(lil_sampler_trilinear_repeat, u_xlat6.xz, level(0.0)).xyw;
        u_xlat6.x = u_xlat6.x * u_xlat6.w;
        u_xlat6.xz = fma(u_xlat6.xz, float2(2.0, 2.0), float2(-1.0, -1.0));
        u_xlat6.xz = u_xlat6.xz * float2(VGlobals._OutlineVectorScale);
        u_xlat43 = dot(u_xlat6.xz, u_xlat6.xz);
        u_xlat43 = min(u_xlat43, 1.0);
        u_xlat43 = (-u_xlat43) + 1.0;
        u_xlat43 = sqrt(u_xlat43);
        u_xlat8.xyz = u_xlat7.xyz * u_xlat6.zzz;
        u_xlat6.xzw = fma(u_xlat6.xxx, u_xlat5.xyz, u_xlat8.xyz);
        u_xlat6.xzw = fma(float3(u_xlat43), u_xlat4.xyz, u_xlat6.xzw);
        u_xlat3.xyz = fma(u_xlat3.xyz, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
        u_xlat7.xyz = u_xlat7.xyz * u_xlat3.yyy;
        u_xlat5.xyz = fma(u_xlat3.xxx, u_xlat5.xyz, u_xlat7.xyz);
        u_xlat3.xyz = fma(u_xlat3.zzz, u_xlat4.xyz, u_xlat5.xyz);
        u_xlat3.xyz = (u_xlatb6.y) ? u_xlat3.xyz : u_xlat6.xzw;
        u_xlat0.xyz = fma(u_xlat3.xyz, float3(u_xlat42), u_xlat0.xyz);
        u_xlatb3 = VGlobals.unity_OrthoParams.w==0.0;
        u_xlat16.xyz = VGlobals._WorldSpaceCameraPos.xyzx.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz;
        u_xlat16.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz, VGlobals._WorldSpaceCameraPos.xyzx.xxx, u_xlat16.xyz);
        u_xlat16.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz, VGlobals._WorldSpaceCameraPos.xyzx.zzz, u_xlat16.xyz);
        u_xlat16.xyz = u_xlat16.xyz + VGlobals.hlslcc_mtx4x4unity_WorldToObject[3].xyz;
        u_xlat16.xyz = (-u_xlat0.xyz) + u_xlat16.xyz;
        u_xlat5.xyz = VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].zzz;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz, VGlobals.hlslcc_mtx4x4unity_MatrixV[0].zzz, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz, VGlobals.hlslcc_mtx4x4unity_MatrixV[2].zzz, u_xlat5.xyz);
        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat16.xyz : u_xlat5.xyz;
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat3.xyz = float3(u_xlat42) * u_xlat3.xyz;
        u_xlat0.xyz = fma((-u_xlat3.xyz), float3(VGlobals._OutlineZBias), u_xlat0.xyz);
        u_xlat3.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
        u_xlat5 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat5);
        u_xlat5 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat5);
        u_xlat5 = u_xlat5 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
        u_xlat6.x = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat4.xyz = float3(u_xlat42) * u_xlat6.xyz;
        u_xlat17.xz = u_xlat4.yy * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].xy;
        u_xlat4.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].xy, u_xlat4.xx, u_xlat17.xz);
        u_xlat4.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].xy, u_xlat4.zz, u_xlat4.xy);
        u_xlat42 = dot(u_xlat4.xy, u_xlat4.xy);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat4.xy = float2(u_xlat42) * u_xlat4.xy;
        u_xlat6.xyz = fma((-u_xlat3.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat6.xyz = float3(u_xlat42) * u_xlat6.xyz;
        u_xlat30.xy = u_xlat6.yy * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].xy;
        u_xlat30.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].xy, u_xlat6.xx, u_xlat30.xy);
        u_xlat30.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].xy, u_xlat6.zz, u_xlat30.xy);
        u_xlat42 = dot(u_xlat30.xy, u_xlat30.xy);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat30.xy = float2(u_xlat42) * u_xlat30.xy;
        u_xlat42 = dot(u_xlat4.xy, u_xlat30.xy);
        phase0_Output0_4.w = fma(u_xlat42, 0.5, 0.5);
        u_xlatb42 = -9.99999997e-07<u_xlat39;
        u_xlatb39 = u_xlat39<9.99999997e-07;
        u_xlatb39 = u_xlatb39 && u_xlatb42;
        u_xlatb42 = int(VGlobals._OutlineDeleteMesh)!=0x0;
        u_xlatb39 = u_xlatb39 && u_xlatb42;
        switch(int(int(VGlobals._IDMaskFrom))){
            case 0x0:
                u_xlatu42 = uint(u_xlat1.x);
                break;
            case 0x1:
                u_xlatu42 = uint(u_xlat1.z);
                break;
            case 0x2:
                u_xlatu42 = uint(u_xlat2.x);
                break;
            case 0x3:
                u_xlatu42 = uint(u_xlat2.z);
                break;
            case 0x4:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD4.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD4.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD4.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x5:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD5.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD5.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD5.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x6:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD6.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD6.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD6.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x7:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD7.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD7.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD7.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            default:
                u_xlatu42 = input.cp[0].TEXCOORD8.x;
                break;
            }
            if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                u_xlat4.x = rint(VGlobals._IDMask1);
                u_xlat4.yzw = rint(float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4));
                u_xlat4.x = dot(u_xlat4, float4(1.0, 2.0, 4.0, 8.0));
                u_xlat6.x = rint(VGlobals._IDMask5);
                u_xlat6.yzw = rint(float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8));
                u_xlat17.x = dot(u_xlat6, float4(16.0, 32.0, 64.0, 128.0));
                u_xlat4.x = u_xlat17.x + u_xlat4.x;
                u_xlatu4 = uint(u_xlat4.x);
                u_xlatb17 = int(u_xlatu42)!=0x0;
                u_xlati4 = int(u_xlatu42 & u_xlatu4);
                u_xlatb4.x = int(u_xlatu42)==u_xlati4;
                u_xlati4 = int((uint(u_xlatb4.x) * 0xffffffffu) & (uint(u_xlatb17) * 0xffffffffu));
            } else {
                u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                u_xlat6.xy = float2(u_xlati17.yx);
                u_xlati7 = int4(u_xlatu42) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                u_xlat7 = float4(u_xlati7.wxyz);
                u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                u_xlat17.xy = float2(u_xlati17.xy);
                u_xlat8.xy = u_xlat6.yx + float2(1.0, 1.0);
                u_xlat8.xy = clamp(u_xlat8.xy, 0.0f, 1.0f);
                u_xlat9 = u_xlat7.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
                u_xlat6.x = (-u_xlat6.x);
                u_xlat6.x = clamp(u_xlat6.x, 0.0f, 1.0f);
                u_xlat7 = (-u_xlat7);
                u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
                u_xlat8.zw = u_xlat9.zw;
                u_xlat6.yzw = u_xlat7.yzw;
                u_xlat6 = u_xlat6 * u_xlat8;
                u_xlat9.zw = u_xlat17.xy + float2(1.0, 1.0);
                u_xlat9.zw = clamp(u_xlat9.zw, 0.0f, 1.0f);
                u_xlat7.yz = (-u_xlat17.xy);
                u_xlat7.yz = clamp(u_xlat7.yz, 0.0f, 1.0f);
                u_xlat7.w = 1.0;
                u_xlat7 = u_xlat7 * u_xlat9;
                u_xlat8.x = VGlobals._IDMask1;
                u_xlat8.yzw = float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4);
                u_xlat17.x = dot(u_xlat6, u_xlat8);
                u_xlat6.x = VGlobals._IDMask5;
                u_xlat6.yzw = float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8);
                u_xlat30.x = dot(u_xlat7, u_xlat6);
                u_xlat17.x = u_xlat30.x + u_xlat17.x;
                u_xlati4 = int((float(0.0)!=u_xlat17.x) ? 0xFFFFFFFFu : uint(0));
            }
            if((VGlobals._IDMaskControlsDissolve)!=uint(0)){
                if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                    u_xlat6.x = rint(VGlobals._IDMaskPrior1);
                    u_xlat6.yzw = rint(float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4));
                    u_xlat17.x = dot(u_xlat6, float4(1.0, 2.0, 4.0, 8.0));
                    u_xlat6.x = rint(VGlobals._IDMaskPrior5);
                    u_xlat6.yzw = rint(float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8));
                    u_xlat30.x = dot(u_xlat6, float4(16.0, 32.0, 64.0, 128.0));
                    u_xlat17.x = u_xlat30.x + u_xlat17.x;
                    u_xlatu17 = uint(u_xlat17.x);
                    u_xlatb30 = int(u_xlatu42)!=0x0;
                    u_xlati17.x = int(u_xlatu42 & u_xlatu17);
                    u_xlatb17 = int(u_xlatu42)==u_xlati17.x;
                    u_xlati19 = int((uint(u_xlatb17) * 0xffffffffu) & (uint(u_xlatb30) * 0xffffffffu));
                } else {
                    u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                    u_xlat7.xy = float2(u_xlati17.yx);
                    u_xlati8 = int4(u_xlatu42) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                    u_xlat8 = float4(u_xlati8.wxyz);
                    u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                    u_xlat17.xy = float2(u_xlati17.xy);
                    u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                    u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                    u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                    u_xlat7.x = (-u_xlat7.x);
                    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                    u_xlat8 = (-u_xlat8);
                    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                    u_xlat9.zw = u_xlat10.zw;
                    u_xlat7.yzw = u_xlat8.yzw;
                    u_xlat7 = u_xlat7 * u_xlat9;
                    u_xlat10.zw = u_xlat17.xy + float2(1.0, 1.0);
                    u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                    u_xlat8.yz = (-u_xlat17.xy);
                    u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                    u_xlat8.w = 1.0;
                    u_xlat8 = u_xlat8 * u_xlat10;
                    u_xlat9.x = VGlobals._IDMaskPrior1;
                    u_xlat9.yzw = float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4);
                    u_xlat42 = dot(u_xlat7, u_xlat9);
                    u_xlat7.x = VGlobals._IDMaskPrior5;
                    u_xlat7.yzw = float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8);
                    u_xlat17.x = dot(u_xlat8, u_xlat7);
                    u_xlat42 = u_xlat42 + u_xlat17.x;
                    u_xlati19 = int((float(0.0)!=u_xlat42) ? 0xFFFFFFFFu : uint(0));
                }
                u_xlati6 = int((u_xlati4!=u_xlati19) ? 0xFFFFFFFFu : uint(0));
                u_xlati4 = int(uint(u_xlati4) & uint(u_xlati19));
            } else {
                u_xlati6 = int(int(0xffffffffu));
                u_xlati19 = int(0x0);
            }
            u_xlati39 = int((uint(u_xlatb39) * 0xffffffffu) | uint(u_xlati4));
            u_xlatb4 = (float4(VGlobals._UDIMDiscardMode, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV)==float4(0.0, 0.0, 1.0, 2.0));
            u_xlatb42 = VGlobals._UDIMDiscardCompile==1.0;
            u_xlatb42 = u_xlatb42 && u_xlatb4.x;
            u_xlat4.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb4.yzw));
            u_xlat7 = u_xlat1 * u_xlat4.xxyy;
            u_xlat4.xy = u_xlat7.zw + u_xlat7.xy;
            u_xlat4.xy = fma(u_xlat2.xy, u_xlat4.zz, u_xlat4.xy);
            u_xlatb30 = VGlobals._UDIMDiscardUV==3.0;
            u_xlat30.x = u_xlatb30 ? 1.0 : float(0.0);
            u_xlat4.xy = fma(u_xlat2.zw, u_xlat30.xx, u_xlat4.xy);
            u_xlatb7 = (u_xlat4.xxxx>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb8 = (u_xlat4.xxxx<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati9 = int4((uint4(u_xlatb7) * 0xffffffffu) & (uint4(u_xlatb8) * 0xffffffffu));
            u_xlat9 = as_type<float4>(uint4(u_xlati9) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlatb10 = (u_xlat4.yyyy>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb4 = (u_xlat4.yyyy<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati11 = int4((uint4(u_xlatb4) * 0xffffffffu) & (uint4(u_xlatb10) * 0xffffffffu));
            u_xlat11 = as_type<float4>(uint4(u_xlati11) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow0_0, VGlobals._UDIMDiscardRow0_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow0_2, VGlobals._UDIMDiscardRow0_3);
            u_xlat4.x = dot(u_xlat12, u_xlat9);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow1_0, VGlobals._UDIMDiscardRow1_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow1_2, VGlobals._UDIMDiscardRow1_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat17.x = u_xlat17.x * u_xlat11.y;
            u_xlat4.x = fma(u_xlat11.x, u_xlat4.x, u_xlat17.x);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow2_0, VGlobals._UDIMDiscardRow2_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow2_2, VGlobals._UDIMDiscardRow2_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat4.x = fma(u_xlat11.z, u_xlat17.x, u_xlat4.x);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow3_0, VGlobals._UDIMDiscardRow3_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow3_2, VGlobals._UDIMDiscardRow3_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat4.x = fma(u_xlat11.w, u_xlat17.x, u_xlat4.x);
            u_xlatb8.x = u_xlatb10.x;
            u_xlatb8.y = u_xlatb4.w;
            u_xlatb8.z = u_xlatb7.x;
            u_xlat7 = select(float4(0.0, 0.0, 0.0, 0.0), float4(1.0, 1.0, 1.0, 1.0), bool4(u_xlatb8));
            u_xlat17.x = dot(u_xlat7, u_xlat7);
            u_xlatb17 = u_xlat17.x!=0.0;
            u_xlat17.x = u_xlatb17 ? 1.0 : float(0.0);
            u_xlat4.x = u_xlat17.x * u_xlat4.x;
            u_xlatb4.x = 0.00100000005<u_xlat4.x;
            u_xlatb42 = u_xlatb42 && u_xlatb4.x;
            u_xlati39 = int(uint(u_xlati39) | (uint(u_xlatb42) * 0xffffffffu));
            output.mtl_Position = (int(u_xlati39) != 0) ? float4(as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u))) : u_xlat5;
            u_xlati39 = int(bitFieldInsert(0x1u, 0x1u, uint(u_xlati19), 0x0u));
            u_xlati39 = int(bitFieldInsert(0x1u, 0x0u, uint(u_xlati6), uint(u_xlati39)));
            output.TEXCOORD2.w = float(u_xlati39);
            output.TEXCOORD0 = u_xlat1;
            output.TEXCOORD1 = u_xlat2;
            output.TEXCOORD2.xyz = u_xlat0.xyz;
            phase0_Output0_4.xyz = u_xlat3.xyz;
            output.TEXCOORD7 = 1.0;
        } else {
            output.mtl_Position = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD1 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_4 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD7 = 0.0;
        }
    output.TEXCOORD3 = phase0_Output0_4.xyz;
    output.TEXCOORD5 = phase0_Output0_4.w;
        return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation failed: 

program_source:4:8: error: unknown type name 'Mtl_VertexOut'
vertex Mtl_VertexOut xlatMtlMain(
       ^
program_source:7:12: error: use of undeclared identifier 'output'
    return output;
           ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
vertex Mtl_VertexOut xlatMtlMain(
)
{
    return output;
}
Compilation failed: 

program_source:826:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:834:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
                             ^
program_source:835:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
                                               ^
program_source:1093:49: error: member reference base type 'uint' (aka 'unsigned int') is not a structure or union
                u_xlatu3 = input.cp[0].TEXCOORD8.x;
                           ~~~~~~~~~~~~~~~~~~~~~^~



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float3 NORMAL0 [[ attribute(9) ]] ;
    float4 TANGENT0 [[ attribute(10) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    uint mtl_VertexID,
    uint mtl_BaseVertex,
    Mtl_VertexIn input)
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseVertex = 0;
#endif
    mtl_VertexID = mtl_VertexID - mtl_BaseVertex;
    Mtl_VertexOut output;
    output.mtl_Position = input.POSITION0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = input.TEXCOORD1.xy;
    output.TEXCOORD2.xy = input.TEXCOORD2.xy;
    output.TEXCOORD3.xy = input.TEXCOORD3.xy;
    output.TEXCOORD4.xy = input.TEXCOORD4.xy;
    output.TEXCOORD5.xy = input.TEXCOORD5.xy;
    output.TEXCOORD6.xy = input.TEXCOORD6.xy;
    output.TEXCOORD7.xy = input.TEXCOORD7.xy;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TANGENT0 = input.TANGENT0;
    output.TEXCOORD8 = mtl_VertexID;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(11) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float3 NORMAL0 [[ attribute(9) ]] ;
    float4 TANGENT0 [[ attribute(10) ]] ;
    uint TEXCOORD8 [[ attribute(12) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
    float3 unity_LightColor0;
    float3 unity_LightColor1;
    float3 unity_LightColor2;
    float3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
    float4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _LightColor0;
    float4 _SpecColor;
    bool4 unity_MetaVertexControl;
    bool4 unity_MetaFragmentControl;
    int unity_VisualizationMode;
    float unity_OneOverOutputBoost;
    float unity_MaxOutputValue;
    float unity_UseLinearSpace;
    float4 _lilBackgroundTexture_TexelSize;
    float4 _LightDirectionOverride;
    float4 _BackfaceColor;
    float4 _Color;
    float4 _MainTex_ST;
    float4 _MainTex_ScrollRotate;
    float4 _MainTexHSVG;
    float4 _Color2nd;
    float4 _Main2ndTex_ST;
    float4 _Main2ndTex_ScrollRotate;
    float4 _Main2ndDistanceFade;
    float4 _Main2ndTexDecalAnimation;
    float4 _Main2ndTexDecalSubParam;
    float4 _Main2ndDissolveMask_ST;
    float4 _Main2ndDissolveColor;
    float4 _Main2ndDissolveParams;
    float4 _Main2ndDissolvePos;
    float4 _Main2ndDissolveNoiseMask_ST;
    float4 _Main2ndDissolveNoiseMask_ScrollRotate;
    float4 _Color3rd;
    float4 _Main3rdTex_ST;
    float4 _Main3rdTex_ScrollRotate;
    float4 _Main3rdDistanceFade;
    float4 _Main3rdTexDecalAnimation;
    float4 _Main3rdTexDecalSubParam;
    float4 _Main3rdDissolveMask_ST;
    float4 _Main3rdDissolveColor;
    float4 _Main3rdDissolveParams;
    float4 _Main3rdDissolvePos;
    float4 _Main3rdDissolveNoiseMask_ST;
    float4 _Main3rdDissolveNoiseMask_ScrollRotate;
    float4 _ShadowColor;
    float4 _Shadow2ndColor;
    float4 _Shadow3rdColor;
    float4 _ShadowBorderColor;
    float4 _ShadowAOShift;
    float4 _ShadowAOShift2;
    float4 _RimShadeColor;
    float4 _BacklightColor;
    float4 _BacklightColorTex_ST;
    float4 _EmissionColor;
    float4 _EmissionBlink;
    float4 _EmissionMap_ST;
    float4 _EmissionMap_ScrollRotate;
    float4 _EmissionBlendMask_ST;
    float4 _EmissionBlendMask_ScrollRotate;
    float4 _Emission2ndColor;
    float4 _Emission2ndBlink;
    float4 _Emission2ndMap_ST;
    float4 _Emission2ndMap_ScrollRotate;
    float4 _Emission2ndBlendMask_ST;
    float4 _Emission2ndBlendMask_ScrollRotate;
    float4 _BumpMap_ST;
    float4 _Bump2ndMap_ST;
    float4 _Bump2ndScaleMask_ST;
    float4 _AnisotropyTangentMap_ST;
    float4 _AnisotropyScaleMask_ST;
    float4 _AnisotropyShiftNoiseMask_ST;
    float4 _ReflectionColor;
    float4 _MetallicGlossMap_ST;
    float4 _ReflectionColorTex_ST;
    float4 _SmoothnessTex_ST;
    float4 _ReflectionCubeColor;
    float4 _ReflectionCubeTex_HDR;
    float4 _MatCapColor;
    float4 _MatCapTex_ST;
    float4 _MatCapBlendMask_ST;
    float4 _MatCapBlendUV1;
    float4 _MatCapBumpMap_ST;
    float4 _MatCap2ndColor;
    float4 _MatCap2ndTex_ST;
    float4 _MatCap2ndBlendMask_ST;
    float4 _MatCap2ndBlendUV1;
    float4 _MatCap2ndBumpMap_ST;
    float4 _RimColor;
    float4 _RimColorTex_ST;
    float4 _RimIndirColor;
    float4 _GlitterColor;
    float4 _GlitterColorTex_ST;
    float4 _GlitterParams1;
    float4 _GlitterParams2;
    float4 _GlitterShapeTex_ST;
    float4 _GlitterAtras;
    float4 _DistanceFade;
    float4 _DistanceFadeColor;
    float4 _DistanceFadeRimColor;
    float4 _DitherTex_TexelSize;
    float4 _AudioLinkMask_ST;
    float4 _AudioLinkMask_ScrollRotate;
    float4 _AudioLinkDefaultValue;
    float4 _AudioLinkUVParams;
    float4 _AudioLinkStart;
    float4 _AudioLinkVertexUVParams;
    float4 _AudioLinkVertexStart;
    float4 _AudioLinkVertexStrength;
    float4 _AudioLinkLocalMapParams;
    float4 _DissolveMask_ST;
    float4 _DissolveColor;
    float4 _DissolveParams;
    float4 _DissolvePos;
    float4 _DissolveNoiseMask_ST;
    float4 _DissolveNoiseMask_ScrollRotate;
    float4 _OutlineColor;
    float4 _OutlineLitColor;
    float4 _OutlineTex_ST;
    float4 _OutlineTex_ScrollRotate;
    float4 _OutlineTexHSVG;
    float _AsUnlit;
    float _Cutoff;
    float _SubpassCutoff;
    float _FlipNormal;
    float _ShiftBackfaceUV;
    float _VertexLightStrength;
    float _LightMinLimit;
    float _LightMaxLimit;
    float _MonochromeLighting;
    float _AAStrength;
    float _AlphaBoostFA;
    float _MainGradationStrength;
    float _Main2ndTexAngle;
    float _Main2ndEnableLighting;
    float _Main2ndDissolveNoiseStrength;
    float _Main3rdTexAngle;
    float _Main3rdEnableLighting;
    float _Main3rdDissolveNoiseStrength;
    float4 _AlphaMask_ST;
    float _AlphaMaskScale;
    float _AlphaMaskValue;
    float _BackfaceForceShadow;
    float _ShadowStrength;
    float _ShadowNormalStrength;
    float _ShadowBorder;
    float _ShadowBlur;
    float _ShadowStrengthMaskLOD;
    float _ShadowBorderMaskLOD;
    float _ShadowBlurMaskLOD;
    float _Shadow2ndNormalStrength;
    float _Shadow2ndBorder;
    float _Shadow2ndBlur;
    float _Shadow3rdNormalStrength;
    float _Shadow3rdBorder;
    float _Shadow3rdBlur;
    float _ShadowMainStrength;
    float _ShadowEnvStrength;
    float _ShadowBorderRange;
    float _ShadowReceive;
    float _Shadow2ndReceive;
    float _Shadow3rdReceive;
    float _ShadowFlatBlur;
    float _ShadowFlatBorder;
    float _RimShadeNormalStrength;
    float _RimShadeBorder;
    float _RimShadeBlur;
    float _RimShadeFresnelPower;
    float _BacklightNormalStrength;
    float _BacklightBorder;
    float _BacklightBlur;
    float _BacklightDirectivity;
    float _BacklightViewStrength;
    float _BacklightBackfaceMask;
    float _BacklightMainStrength;
    float _BumpScale;
    float _Bump2ndScale;
    float _AnisotropyScale;
    float _AnisotropyTangentWidth;
    float _AnisotropyBitangentWidth;
    float _AnisotropyShift;
    float _AnisotropyShiftNoiseScale;
    float _AnisotropySpecularStrength;
    float _Anisotropy2ndTangentWidth;
    float _Anisotropy2ndBitangentWidth;
    float _Anisotropy2ndShift;
    float _Anisotropy2ndShiftNoiseScale;
    float _Anisotropy2ndSpecularStrength;
    float _Reflectance;
    float _SpecularNormalStrength;
    float _SpecularBorder;
    float _SpecularBlur;
    float _ReflectionNormalStrength;
    float _ReflectionCubeEnableLighting;
    float _Smoothness;
    float _Metallic;
    float _GSAAStrength;
    float _MatCapBlend;
    float _MatCapEnableLighting;
    float _MatCapShadowMask;
    float _MatCapVRParallaxStrength;
    float _MatCapBackfaceMask;
    float _MatCapLod;
    float _MatCapNormalStrength;
    float _MatCapMainStrength;
    float _MatCapBumpScale;
    float _MatCap2ndBlend;
    float _MatCap2ndEnableLighting;
    float _MatCap2ndShadowMask;
    float _MatCap2ndVRParallaxStrength;
    float _MatCap2ndBackfaceMask;
    float _MatCap2ndLod;
    float _MatCap2ndNormalStrength;
    float _MatCap2ndMainStrength;
    float _MatCap2ndBumpScale;
    float _RimNormalStrength;
    float _RimBorder;
    float _RimBlur;
    float _RimFresnelPower;
    float _RimEnableLighting;
    float _RimShadowMask;
    float _RimVRParallaxStrength;
    float _RimBackfaceMask;
    float _RimMainStrength;
    float _RimDirStrength;
    float _RimDirRange;
    float _RimIndirRange;
    float _RimIndirBorder;
    float _RimIndirBlur;
    float _GlitterMainStrength;
    float _GlitterPostContrast;
    float _GlitterSensitivity;
    float _GlitterNormalStrength;
    float _GlitterEnableLighting;
    float _GlitterShadowMask;
    float _GlitterVRParallaxStrength;
    float _GlitterBackfaceMask;
    float _GlitterScaleRandomize;
    float _DistanceFadeRimFresnelPower;
    float _EmissionBlend;
    float _EmissionParallaxDepth;
    float _EmissionFluorescence;
    float _EmissionMainStrength;
    float _EmissionGradSpeed;
    float _Emission2ndBlend;
    float _Emission2ndParallaxDepth;
    float _Emission2ndFluorescence;
    float _Emission2ndMainStrength;
    float _Emission2ndGradSpeed;
    float _Parallax;
    float _ParallaxOffset;
    float _DitherMaxValue;
    float _AudioLink2EmissionGrad;
    float _AudioLink2Emission2ndGrad;
    float _DissolveNoiseStrength;
    float _IDMask1;
    float _IDMask2;
    float _IDMask3;
    float _IDMask4;
    float _IDMask5;
    float _IDMask6;
    float _IDMask7;
    float _IDMask8;
    float _IDMaskPrior1;
    float _IDMaskPrior2;
    float _IDMaskPrior3;
    float _IDMaskPrior4;
    float _IDMaskPrior5;
    float _IDMaskPrior6;
    float _IDMaskPrior7;
    float _IDMaskPrior8;
    float _UDIMDiscardCompile;
    float _UDIMDiscardMode;
    float _UDIMDiscardUV;
    float _UDIMDiscardRow3_0;
    float _UDIMDiscardRow3_1;
    float _UDIMDiscardRow3_2;
    float _UDIMDiscardRow3_3;
    float _UDIMDiscardRow2_0;
    float _UDIMDiscardRow2_1;
    float _UDIMDiscardRow2_2;
    float _UDIMDiscardRow2_3;
    float _UDIMDiscardRow1_0;
    float _UDIMDiscardRow1_1;
    float _UDIMDiscardRow1_2;
    float _UDIMDiscardRow1_3;
    float _UDIMDiscardRow0_0;
    float _UDIMDiscardRow0_1;
    float _UDIMDiscardRow0_2;
    float _UDIMDiscardRow0_3;
    float _lilShadowCasterBias;
    float _OutlineLitScale;
    float _OutlineLitOffset;
    float _OutlineWidth;
    float _OutlineEnableLighting;
    float _OutlineVectorScale;
    float _OutlineFixWidth;
    float _OutlineZBias;
    float _TessEdge;
    float _TessStrength;
    float _TessShrink;
    float _TessFactorMax;
    int _IDMaskIndex1;
    int _IDMaskIndex2;
    int _IDMaskIndex3;
    int _IDMaskIndex4;
    int _IDMaskIndex5;
    int _IDMaskIndex6;
    int _IDMaskIndex7;
    int _IDMaskIndex8;
    uint _IDMaskFrom;
    uint _IDMaskIsBitmap;
    uint _IDMaskControlsDissolve;
    uint _Cull;
    uint _OutlineCull;
    uint _Main2ndTexBlendMode;
    uint _Main2ndTexAlphaMode;
    uint _Main2ndTex_UVMode;
    uint _Main2ndTex_Cull;
    uint _Main3rdTexBlendMode;
    uint _Main3rdTexAlphaMode;
    uint _Main3rdTex_UVMode;
    uint _Main3rdTex_Cull;
    uint _AlphaMaskMode;
    uint _ShadowColorType;
    uint _ShadowMaskType;
    uint _Bump2ndMap_UVMode;
    uint _ReflectionBlendMode;
    uint _MatCapBlendMode;
    uint _MatCap2ndBlendMode;
    uint _RimBlendMode;
    uint _GlitterUVMode;
    uint _EmissionMap_UVMode;
    uint _EmissionBlendMode;
    uint _Emission2ndMap_UVMode;
    uint _Emission2ndBlendMode;
    uint _AudioLinkUVMode;
    uint _AudioLinkMask_UVMode;
    uint _AudioLinkVertexUVMode;
    uint _DistanceFadeMode;
    uint _UseDither;
    uint _OutlineVertexR2Width;
    uint _OutlineVectorUVMode;
    uint _Invisible;
    uint _UseMain2ndTex;
    uint _Main2ndTexIsMSDF;
    uint _Main2ndTexIsDecal;
    uint _Main2ndTexIsLeftOnly;
    uint _Main2ndTexIsRightOnly;
    uint _Main2ndTexShouldCopy;
    uint _Main2ndTexShouldFlipMirror;
    uint _Main2ndTexShouldFlipCopy;
    uint _UseMain3rdTex;
    uint _Main3rdTexIsMSDF;
    uint _Main3rdTexIsDecal;
    uint _Main3rdTexIsLeftOnly;
    uint _Main3rdTexIsRightOnly;
    uint _Main3rdTexShouldCopy;
    uint _Main3rdTexShouldFlipMirror;
    uint _Main3rdTexShouldFlipCopy;
    uint _UseShadow;
    uint _ShadowPostAO;
    uint _UseRimShade;
    uint _UseBacklight;
    uint _BacklightReceiveShadow;
    uint _UseBumpMap;
    uint _UseBump2ndMap;
    uint _UseAnisotropy;
    uint _Anisotropy2Reflection;
    uint _Anisotropy2MatCap;
    uint _Anisotropy2MatCap2nd;
    uint _UseReflection;
    uint _ApplySpecular;
    uint _ApplySpecularFA;
    uint _ApplyReflection;
    uint _SpecularToon;
    uint _ReflectionApplyTransparency;
    uint _ReflectionCubeOverride;
    uint _UseMatCap;
    uint _MatCapApplyTransparency;
    uint _MatCapPerspective;
    uint _MatCapZRotCancel;
    uint _MatCapCustomNormal;
    uint _UseMatCap2nd;
    uint _MatCap2ndApplyTransparency;
    uint _MatCap2ndPerspective;
    uint _MatCap2ndZRotCancel;
    uint _MatCap2ndCustomNormal;
    uint _UseRim;
    uint _RimApplyTransparency;
    uint _UseGlitter;
    uint _GlitterColorTex_UVMode;
    uint _GlitterApplyTransparency;
    uint _GlitterApplyShape;
    uint _GlitterAngleRandomize;
    uint _UseEmission;
    uint _EmissionUseGrad;
    uint _UseEmission2nd;
    uint _Emission2ndUseGrad;
    uint _UseParallax;
    uint _UsePOM;
    uint _UseAudioLink;
    uint _AudioLink2Main2nd;
    uint _AudioLink2Main3rd;
    uint _AudioLink2Emission;
    uint _AudioLink2Emission2nd;
    uint _AudioLink2Vertex;
    uint _AudioLinkAsLocal;
    uint _OutlineLitApplyTex;
    uint _OutlineLitShadowReceive;
    uint _OutlineDeleteMesh;
    uint _OutlineDisableInVR;
    float4 _AudioTexture_TexelSize;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    // mtl_VertexID generated in compute kernel,
    // mtl_BaseVertex generated in compute kernel,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(mtl_VertexID, mtl_BaseVertex, vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.TEXCOORD4 = input.cp[controlPointID].TEXCOORD4;
        output.TEXCOORD5 = input.cp[controlPointID].TEXCOORD5;
        output.TEXCOORD6 = input.cp[controlPointID].TEXCOORD6;
        output.TEXCOORD7 = input.cp[controlPointID].TEXCOORD7;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float4 u_xlat1;
    int2 u_xlati1;
    bool4 u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    bool2 u_xlatb3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float3 u_xlat11;
    float u_xlat22;
    bool2 u_xlatb23;
    int2 u_xlati24;
    bool2 u_xlatb24;
    float u_xlat33;
    float u_xlat34;
    // fork_phase2
    {
        if((VGlobals._Invisible)!=uint(0)){
            tessFactor.edgeTessellationFactor[0] = 0.0;
            tessFactor.edgeTessellationFactor[1] = 0.0;
            tessFactor.edgeTessellationFactor[2] = 0.0;
            tessFactor.insideTessellationFactor = 0.0;
            return;
        }
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].mtl_Position.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].mtl_Position.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].mtl_Position.zzz, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].mtl_Position.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].mtl_Position.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].mtl_Position.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat3.xyz = u_xlat2.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].mtl_Position.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].mtl_Position.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].mtl_Position.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat4.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat4.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat6.x = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
        u_xlat7.x = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat7.xyz = float3(u_xlat33) * u_xlat7.xyz;
        u_xlat8.x = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat8.y = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat8.z = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
        u_xlat9.xyz = u_xlat2.xyz + u_xlat4.xyz;
        u_xlat9.xyz = fma(u_xlat9.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat9.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
        u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.x = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat4.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat4.xyz;
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.y = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.z = max(u_xlat33, 1.0);
        u_xlat9.xyz = min(u_xlat9.xyz, float3(VGlobals._TessFactorMax));
        u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
        u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
        u_xlat11.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat34 = dot(u_xlat11.xyz, u_xlat11.xyz);
        u_xlat34 = rsqrt(u_xlat34);
        u_xlat11.xyz = u_xlat11.xyz * float3(u_xlat34);
        u_xlat0.y = dot(u_xlat7.xyz, u_xlat11.xyz);
        u_xlat2.xyz = (-u_xlat4.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat22 = rsqrt(u_xlat22);
        u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
        u_xlat0.z = dot(u_xlat8.xyz, u_xlat2.xyz);
        u_xlat2.xyz = abs(u_xlat0.zxy) + abs(u_xlat0.yzx);
        u_xlat0.xyz = fma((-u_xlat2.xyz), float3(0.5, 0.5, 0.5), float3(1.0, 1.0, 1.0));
        u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
        u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xyz;
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat34 = u_xlat0.y + u_xlat0.x;
        u_xlat34 = u_xlat0.z + u_xlat34;
        u_xlat0.w = u_xlat34 * 0.333333343;
        u_xlat1.xy = u_xlat1.xy / abs(u_xlat1.zz);
        u_xlat1.zw = u_xlat3.xy / abs(u_xlat3.zz);
        u_xlat2.xy = u_xlat5.xy / abs(u_xlat5.zz);
        u_xlatb24.xy = (float2(1.00999999, 1.00999999)<u_xlat1.xy);
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat1.zw);
        u_xlati24.xy = int2((uint2(u_xlatb24.xy) * 0xffffffffu) & (uint2(u_xlatb3.xy) * 0xffffffffu));
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat2.xy);
        u_xlati24.xy = int2((uint2(u_xlatb3.xy) * 0xffffffffu) & uint2(u_xlati24.xy));
        u_xlatb1 = (u_xlat1<float4(-1.00999999, -1.00999999, -1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb1.zw) * 0xffffffffu) & (uint2(u_xlatb1.xy) * 0xffffffffu));
        u_xlatb23.xy = (u_xlat2.xy<float2(-1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb23.xy) * 0xffffffffu) & uint2(u_xlati1.xy));
        u_xlati1.x = int(uint(u_xlati1.x) | uint(u_xlati24.x));
        u_xlati1.x = int(uint(u_xlati24.y) | uint(u_xlati1.x));
        u_xlati1.x = int(uint(u_xlati1.y) | uint(u_xlati1.x));
        u_xlat0 = (u_xlati1.x != 0) ? float4(0.0, 0.0, 0.0, 0.0) : u_xlat0;
        tessFactor.edgeTessellationFactor[0] = u_xlat0.x;
        tessFactor.edgeTessellationFactor[1] = u_xlat0.y;
        tessFactor.edgeTessellationFactor[2] = u_xlat0.z;
        tessFactor.insideTessellationFactor = u_xlat0.w;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float TEXCOORD9 [[ user(TEXCOORD9) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
};
		template <typename UVecType> UVecType bitFieldInsert(const UVecType width, const UVecType offset, const UVecType src2, const UVecType src3)
		{
			UVecType bitmask = (((UVecType(1) << width)-1) << offset) & 0xffffffff;
			return ((src2 << offset) & bitmask) | (src3 & ~bitmask);
		}; 
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    // mtl_VertexID unused,
    // mtl_BaseVertex unused,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    texture2d<float, access::sample > _AudioLinkLocalMap [[ texture(0) ]] ,
    texture2d<float, access::sample > _AudioTexture [[ texture(1) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    constexpr sampler lil_sampler_trilinear_repeat(filter::linear,mip_filter::linear,address::repeat);
    constexpr sampler lil_sampler_linear_clamp(filter::linear,mip_filter::nearest,address::clamp_to_edge);
        float4 phase0_Input0_1[3];
        phase0_Input0_1[2] = float4(input.cp[2].TEXCOORD0, input.cp[2].TEXCOORD1);
        phase0_Input0_1[1] = float4(input.cp[1].TEXCOORD0, input.cp[1].TEXCOORD1);
        phase0_Input0_1[0] = float4(input.cp[0].TEXCOORD0, input.cp[0].TEXCOORD1);
        float4 phase0_Input0_2[3];
        phase0_Input0_2[2] = float4(input.cp[2].TEXCOORD2, input.cp[2].TEXCOORD3);
        phase0_Input0_2[1] = float4(input.cp[1].TEXCOORD2, input.cp[1].TEXCOORD3);
        phase0_Input0_2[0] = float4(input.cp[0].TEXCOORD2, input.cp[0].TEXCOORD3);
    float4 phase0_Output0_4;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    int3 u_xlati3;
    uint u_xlatu3;
    bool u_xlatb3;
    float4 u_xlat4;
    int u_xlati4;
    bool u_xlatb4;
    float3 u_xlat5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    bool4 u_xlatb7;
    float4 u_xlat8;
    int4 u_xlati8;
    bool4 u_xlatb8;
    float4 u_xlat9;
    int4 u_xlati9;
    float4 u_xlat10;
    bool4 u_xlatb10;
    bool4 u_xlatb11;
    float4 u_xlat12;
    int4 u_xlati12;
    float4 u_xlat13;
    float3 u_xlat17;
    int u_xlati17;
    uint u_xlatu17;
    bool u_xlatb17;
    int u_xlati18;
    float2 u_xlat31;
    int2 u_xlati31;
    uint u_xlatu31;
    bool u_xlatb31;
    float u_xlat32;
    bool u_xlatb32;
    float2 u_xlat33;
    int u_xlati33;
    bool u_xlatb33;
    float u_xlat42;
    float u_xlat45;
    bool u_xlatb45;
    if((VGlobals._Invisible)==uint(0)){
        u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].mtl_Position.xyz;
        u_xlat0.xyz = fma(mtl_TessCoord.xxx, input.cp[0].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat0.xyz = fma(mtl_TessCoord.zzz, input.cp[2].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat1 = mtl_TessCoord.yyyy * phase0_Input0_1[1];
        u_xlat1 = fma(mtl_TessCoord.xxxx, phase0_Input0_1[0], u_xlat1);
        u_xlat1 = fma(mtl_TessCoord.zzzz, phase0_Input0_1[2], u_xlat1);
        u_xlat2 = mtl_TessCoord.yyyy * phase0_Input0_2[1];
        u_xlat2 = fma(mtl_TessCoord.xxxx, phase0_Input0_2[0], u_xlat2);
        u_xlat2 = fma(mtl_TessCoord.zzzz, phase0_Input0_2[2], u_xlat2);
        u_xlat3.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
        u_xlat3.xyz = fma(mtl_TessCoord.xxx, input.cp[0].NORMAL0.xyz, u_xlat3.xyz);
        u_xlat3.xyz = fma(mtl_TessCoord.zzz, input.cp[2].NORMAL0.xyz, u_xlat3.xyz);
        u_xlat4 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
        u_xlat4 = fma(mtl_TessCoord.xxxx, input.cp[0].TANGENT0, u_xlat4);
        u_xlat4 = fma(mtl_TessCoord.zzzz, input.cp[2].TANGENT0, u_xlat4);
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat3.xyz = float3(u_xlat42) * u_xlat3.xyz;
        u_xlat42 = dot(input.cp[0].mtl_Position.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat5.xyz = float3(u_xlat42) * input.cp[0].NORMAL0.xyz;
        u_xlat42 = dot(input.cp[1].mtl_Position.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat6.xyz = float3(u_xlat42) * input.cp[1].NORMAL0.xyz;
        u_xlat42 = dot(input.cp[2].mtl_Position.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat7.xyz = float3(u_xlat42) * input.cp[2].NORMAL0.xyz;
        u_xlat6.xyz = u_xlat6.xyz * mtl_TessCoord.yyy;
        u_xlat5.xyz = fma(u_xlat5.xyz, mtl_TessCoord.xxx, u_xlat6.xyz);
        u_xlat5.xyz = fma(u_xlat7.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
        u_xlat0.xyz = fma(u_xlat5.xyz, float3(VGlobals._TessStrength), u_xlat0.xyz);
        u_xlatb45 = int(VGlobals._UseAudioLink)!=0x0;
        u_xlatb5.x = int(VGlobals._AudioLink2Vertex)!=0x0;
        u_xlatb45 = u_xlatb45 && u_xlatb5.x;
        if(u_xlatb45){
            u_xlatb5.xy = (int2(VGlobals._AudioLinkVertexUVMode)==int2(0x1, 0x2));
            u_xlat6.xyz = u_xlat0.xyz + (-VGlobals._AudioLinkVertexStart.xyz);
            u_xlat45 = dot(u_xlat6.xyz, u_xlat6.xyz);
            u_xlat45 = sqrt(u_xlat45);
            u_xlat45 = fma(u_xlat45, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat45 = (u_xlatb5.x) ? u_xlat45 : VGlobals._AudioLinkVertexUVParams.y;
            u_xlat5.x = sin(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat6.x = cos(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat33.xy = u_xlat1.xy + float2(-0.5, -0.5);
            u_xlat5.x = u_xlat5.x * u_xlat33.y;
            u_xlat5.x = fma(u_xlat33.x, u_xlat6.x, (-u_xlat5.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = fma(u_xlat5.x, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat5.x = (u_xlatb5.y) ? u_xlat5.x : u_xlat45;
            if((VGlobals._AudioLinkAsLocal)!=uint(0)){
                u_xlat45 = (-VGlobals._Time.y) * VGlobals._AudioLinkLocalMapParams.x;
                u_xlat45 = u_xlat45 * VGlobals._AudioLinkLocalMapParams.y;
                u_xlat45 = u_xlat45 * 0.0166666675;
                u_xlat45 = fract(u_xlat45);
                u_xlat45 = u_xlat45 + VGlobals._AudioLinkLocalMapParams.z;
                u_xlat6.x = u_xlat45 + u_xlat5.x;
                u_xlat6.y = VGlobals._AudioLinkVertexUVParams.w;
                u_xlat45 = _AudioLinkLocalMap.sample(lil_sampler_trilinear_repeat, u_xlat6.xy, level(0.0)).x;
            } else {
                u_xlat33.x = float(_AudioTexture.get_width(0x0));
                u_xlati33 = int(u_xlat33.x);
                u_xlatb33 = 0x10<u_xlati33;
                if(u_xlatb33){
                    u_xlat5.y = VGlobals._AudioLinkVertexUVParams.w * 0.0625;
                    u_xlat45 = _AudioTexture.sample(lil_sampler_linear_clamp, u_xlat5.xy, level(0.0)).x;
                    u_xlat45 = u_xlat45;
                    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
                } else {
                    u_xlat5.x = fma(VGlobals._Time.y, VGlobals._AudioLinkDefaultValue.z, (-u_xlat5.x));
                    u_xlat5.x = fract(u_xlat5.x);
                    u_xlat5.x = u_xlat5.x + VGlobals._AudioLinkDefaultValue.w;
                    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
                    u_xlat5.x = u_xlat5.x * VGlobals._AudioLinkDefaultValue.y;
                    u_xlat45 = fma((-u_xlat5.x), VGlobals._AudioLinkDefaultValue.x, VGlobals._AudioLinkDefaultValue.x);
                    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
                }
            }
            u_xlat5.xyz = fma(u_xlat3.xyz, VGlobals._AudioLinkVertexStrength.www, VGlobals._AudioLinkVertexStrength.xyz);
            u_xlat0.xyz = fma(u_xlat5.xyz, float3(u_xlat45), u_xlat0.xyz);
        }
        u_xlat5.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat6 = u_xlat5.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
        u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat5.xxxx, u_xlat6);
        u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat5.zzzz, u_xlat6);
        u_xlat6 = u_xlat6 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
        u_xlat7.x = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        output.TEXCOORD4.xyz = u_xlat3.xxx * u_xlat7.xyz;
        u_xlat3.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat4.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat4.zzz, u_xlat3.xyz);
        u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat45 = rsqrt(u_xlat45);
        output.TEXCOORD5.xyz = float3(u_xlat45) * u_xlat3.xyz;
        u_xlat3.x = dot(VGlobals._LightColor0.xyz, float3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat17.xyz = VGlobals.unity_SHAg.xyz * float3(0.333332986, 0.333332986, 0.333332986);
        u_xlat17.xyz = fma(VGlobals.unity_SHAr.xyz, float3(0.333332986, 0.333332986, 0.333332986), u_xlat17.xyz);
        u_xlat7.xyz = fma(VGlobals.unity_SHAb.xyz, float3(0.333332986, 0.333332986, 0.333332986), u_xlat17.xyz);
        u_xlat7.w = abs(u_xlat7.y);
        u_xlat17.x = dot(VGlobals._LightDirectionOverride.xyz, VGlobals._LightDirectionOverride.xyz);
        u_xlat17.x = sqrt(u_xlat17.x);
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * VGlobals._LightDirectionOverride.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals._LightDirectionOverride.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, VGlobals._LightDirectionOverride.zzz, u_xlat4.xyz);
        u_xlat31.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat31.x = rsqrt(u_xlat31.x);
        u_xlat4.xyz = u_xlat31.xxx * u_xlat4.xyz;
        u_xlat17.xyz = u_xlat17.xxx * u_xlat4.xyz;
        u_xlatb4 = float(0.0)!=VGlobals._LightDirectionOverride.w;
        u_xlat17.xyz = (bool(u_xlatb4)) ? u_xlat17.xyz : VGlobals._LightDirectionOverride.xyz;
        u_xlat4.xyz = fma(VGlobals._WorldSpaceLightPos0.xyz, u_xlat3.xxx, u_xlat7.xwz);
        u_xlat17.xyz = u_xlat17.xyz + u_xlat4.xyz;
        u_xlat4.x = dot(u_xlat17.xyz, u_xlat17.xyz);
        u_xlat4.x = rsqrt(u_xlat4.x);
        output.TEXCOORD7.xyz = u_xlat17.xyz * u_xlat4.xxx;
        u_xlat3.xyz = fma(VGlobals._WorldSpaceLightPos0.xyz, u_xlat3.xxx, u_xlat7.xyz);
        u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlatb4 = u_xlat45<9.99999997e-07;
        u_xlat45 = rsqrt(u_xlat45);
        u_xlat3.xyz = float3(u_xlat45) * u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz * float3(0.666665971, 0.666665971, 0.666665971);
        u_xlat3.xyz = (bool(u_xlatb4)) ? float3(0.0, 0.0, 0.0) : u_xlat3.xyz;
        u_xlat7 = u_xlat3.yzzx * u_xlat3.xyzz;
        u_xlat45 = dot(VGlobals.unity_SHBr, u_xlat7);
        u_xlat4.x = u_xlat45 + VGlobals.unity_SHAr.w;
        u_xlat45 = dot(VGlobals.unity_SHBg, u_xlat7);
        u_xlat4.y = u_xlat45 + VGlobals.unity_SHAg.w;
        u_xlat45 = dot(VGlobals.unity_SHBb, u_xlat7);
        u_xlat4.z = u_xlat45 + VGlobals.unity_SHAb.w;
        u_xlat45 = u_xlat3.y * u_xlat3.y;
        u_xlat45 = fma(u_xlat3.x, u_xlat3.x, (-u_xlat45));
        u_xlat4.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat45), u_xlat4.xyz);
        u_xlat7.x = dot(VGlobals.unity_SHAr.xyz, u_xlat3.xyz);
        u_xlat7.y = dot(VGlobals.unity_SHAg.xyz, u_xlat3.xyz);
        u_xlat7.z = dot(VGlobals.unity_SHAb.xyz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat4.xyz + u_xlat7.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-u_xlat7.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals._LightColor0.xyz;
        u_xlat3.xyz = max(u_xlat3.xyz, float3(VGlobals._LightMinLimit));
        u_xlat3.xyz = min(u_xlat3.xyz, float3(VGlobals._LightMaxLimit));
        u_xlat45 = dot(u_xlat3.xyz, float3(0.333333343, 0.333333343, 0.333333343));
        u_xlat7.xyz = (-u_xlat3.xyz) + float3(u_xlat45);
        u_xlat3.xyz = fma(float3(VGlobals._MonochromeLighting), u_xlat7.xyz, u_xlat3.xyz);
        u_xlat7.xyz = (-u_xlat3.xyz) + float3(1.0, 1.0, 1.0);
        output.TEXCOORD6.xyz = fma(float3(VGlobals._AsUnlit), u_xlat7.xyz, u_xlat3.xyz);
        output.TEXCOORD8.xyz = u_xlat4.xyz * float3(VGlobals._ShadowEnvStrength);
        switch(int(int(VGlobals._IDMaskFrom))){
            case 0x0:
                u_xlatu3 = uint(u_xlat1.x);
                break;
            case 0x1:
                u_xlatu3 = uint(u_xlat1.z);
                break;
            case 0x2:
                u_xlatu3 = uint(u_xlat2.x);
                break;
            case 0x3:
                u_xlatu3 = uint(u_xlat2.z);
                break;
            case 0x4:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD4.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD4.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD4.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            case 0x5:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD5.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD5.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD5.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            case 0x6:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD6.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD6.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD6.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            case 0x7:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD7.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD7.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD7.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            default:
                u_xlatu3 = input.cp[0].TEXCOORD8.x;
                break;
            }
            if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                u_xlat7.x = rint(VGlobals._IDMask1);
                u_xlat7.yzw = rint(float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4));
                u_xlat17.x = dot(u_xlat7, float4(1.0, 2.0, 4.0, 8.0));
                u_xlat7.x = rint(VGlobals._IDMask5);
                u_xlat7.yzw = rint(float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8));
                u_xlat31.x = dot(u_xlat7, float4(16.0, 32.0, 64.0, 128.0));
                u_xlat17.x = u_xlat31.x + u_xlat17.x;
                u_xlatu17 = uint(u_xlat17.x);
                u_xlatb31 = int(u_xlatu3)!=0x0;
                u_xlati17 = int(u_xlatu3 & u_xlatu17);
                u_xlatb17 = int(u_xlatu3)==u_xlati17;
                u_xlati17 = int((uint(u_xlatb17) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            } else {
                u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                u_xlat7.xy = float2(u_xlati31.yx);
                u_xlati8 = int4(u_xlatu3) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                u_xlat8 = float4(u_xlati8.wxyz);
                u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                u_xlat31.xy = float2(u_xlati31.xy);
                u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                u_xlat7.x = (-u_xlat7.x);
                u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                u_xlat8 = (-u_xlat8);
                u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                u_xlat9.zw = u_xlat10.zw;
                u_xlat7.yzw = u_xlat8.yzw;
                u_xlat7 = u_xlat7 * u_xlat9;
                u_xlat10.zw = u_xlat31.xy + float2(1.0, 1.0);
                u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                u_xlat8.yz = (-u_xlat31.xy);
                u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                u_xlat8.w = 1.0;
                u_xlat8 = u_xlat8 * u_xlat10;
                u_xlat9.x = VGlobals._IDMask1;
                u_xlat9.yzw = float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4);
                u_xlat31.x = dot(u_xlat7, u_xlat9);
                u_xlat7.x = VGlobals._IDMask5;
                u_xlat7.yzw = float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8);
                u_xlat45 = dot(u_xlat8, u_xlat7);
                u_xlat31.x = u_xlat45 + u_xlat31.x;
                u_xlati17 = int((float(0.0)!=u_xlat31.x) ? 0xFFFFFFFFu : uint(0));
            }
            if((VGlobals._IDMaskControlsDissolve)!=uint(0)){
                if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                    u_xlat7.x = rint(VGlobals._IDMaskPrior1);
                    u_xlat7.yzw = rint(float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4));
                    u_xlat31.x = dot(u_xlat7, float4(1.0, 2.0, 4.0, 8.0));
                    u_xlat7.x = rint(VGlobals._IDMaskPrior5);
                    u_xlat7.yzw = rint(float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8));
                    u_xlat45 = dot(u_xlat7, float4(16.0, 32.0, 64.0, 128.0));
                    u_xlat31.x = u_xlat45 + u_xlat31.x;
                    u_xlatu31 = uint(u_xlat31.x);
                    u_xlatb45 = int(u_xlatu3)!=0x0;
                    u_xlati31.x = int(u_xlatu3 & u_xlatu31);
                    u_xlatb31 = int(u_xlatu3)==u_xlati31.x;
                    u_xlati18 = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb45) * 0xffffffffu));
                } else {
                    u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                    u_xlat7.xy = float2(u_xlati31.yx);
                    u_xlati8 = int4(u_xlatu3) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                    u_xlat8 = float4(u_xlati8.wxyz);
                    u_xlati3.xz = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                    u_xlat3.xz = float2(u_xlati3.xz);
                    u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                    u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                    u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                    u_xlat7.x = (-u_xlat7.x);
                    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                    u_xlat8 = (-u_xlat8);
                    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                    u_xlat9.zw = u_xlat10.zw;
                    u_xlat7.yzw = u_xlat8.yzw;
                    u_xlat7 = u_xlat7 * u_xlat9;
                    u_xlat10.zw = u_xlat3.xz + float2(1.0, 1.0);
                    u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                    u_xlat8.yz = (-u_xlat3.xz);
                    u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                    u_xlat8.w = 1.0;
                    u_xlat8 = u_xlat8 * u_xlat10;
                    u_xlat9.x = VGlobals._IDMaskPrior1;
                    u_xlat9.yzw = float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4);
                    u_xlat3.x = dot(u_xlat7, u_xlat9);
                    u_xlat7.x = VGlobals._IDMaskPrior5;
                    u_xlat7.yzw = float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8);
                    u_xlat31.x = dot(u_xlat8, u_xlat7);
                    u_xlat3.x = u_xlat31.x + u_xlat3.x;
                    u_xlati18 = int((float(0.0)!=u_xlat3.x) ? 0xFFFFFFFFu : uint(0));
                }
                u_xlati4 = int((u_xlati17!=u_xlati18) ? 0xFFFFFFFFu : uint(0));
                u_xlati17 = int(uint(u_xlati17) & uint(u_xlati18));
            } else {
                u_xlati4 = int(int(0xffffffffu));
                u_xlati18 = int(0x0);
            }
            u_xlatb7 = (float4(VGlobals._UDIMDiscardMode, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV)==float4(0.0, 0.0, 1.0, 2.0));
            u_xlatb3 = VGlobals._UDIMDiscardCompile==1.0;
            u_xlatb3 = u_xlatb3 && u_xlatb7.x;
            u_xlat7.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb7.yzw));
            u_xlat8 = u_xlat1 * u_xlat7.xxyy;
            u_xlat31.xy = u_xlat8.zw + u_xlat8.xy;
            u_xlat31.xy = fma(u_xlat2.xy, u_xlat7.zz, u_xlat31.xy);
            u_xlatb32 = VGlobals._UDIMDiscardUV==3.0;
            u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);
            u_xlat31.xy = fma(u_xlat2.zw, float2(u_xlat32), u_xlat31.xy);
            u_xlatb7 = (u_xlat31.xxxx>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb8 = (u_xlat31.xxxx<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati9 = int4((uint4(u_xlatb7) * 0xffffffffu) & (uint4(u_xlatb8) * 0xffffffffu));
            u_xlat9 = as_type<float4>(uint4(u_xlati9) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlatb10 = (u_xlat31.yyyy>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb11 = (u_xlat31.yyyy<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati12 = int4((uint4(u_xlatb10) * 0xffffffffu) & (uint4(u_xlatb11) * 0xffffffffu));
            u_xlat12 = as_type<float4>(uint4(u_xlati12) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow0_0, VGlobals._UDIMDiscardRow0_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow0_2, VGlobals._UDIMDiscardRow0_3);
            u_xlat31.x = dot(u_xlat13, u_xlat9);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow1_0, VGlobals._UDIMDiscardRow1_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow1_2, VGlobals._UDIMDiscardRow1_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat45 = u_xlat45 * u_xlat12.y;
            u_xlat31.x = fma(u_xlat12.x, u_xlat31.x, u_xlat45);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow2_0, VGlobals._UDIMDiscardRow2_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow2_2, VGlobals._UDIMDiscardRow2_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat31.x = fma(u_xlat12.z, u_xlat45, u_xlat31.x);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow3_0, VGlobals._UDIMDiscardRow3_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow3_2, VGlobals._UDIMDiscardRow3_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat31.x = fma(u_xlat12.w, u_xlat45, u_xlat31.x);
            u_xlatb8.x = u_xlatb10.x;
            u_xlatb8.y = u_xlatb11.w;
            u_xlatb8.z = u_xlatb7.x;
            u_xlat7 = select(float4(0.0, 0.0, 0.0, 0.0), float4(1.0, 1.0, 1.0, 1.0), bool4(u_xlatb8));
            u_xlat45 = dot(u_xlat7, u_xlat7);
            u_xlatb45 = u_xlat45!=0.0;
            u_xlat45 = u_xlatb45 ? 1.0 : float(0.0);
            u_xlat31.x = u_xlat45 * u_xlat31.x;
            u_xlatb31 = 0.00100000005<u_xlat31.x;
            u_xlatb3 = u_xlatb31 && u_xlatb3;
            u_xlati3.x = int((uint(u_xlatb3) * 0xffffffffu) | uint(u_xlati17));
            output.mtl_Position = (u_xlati3.x != 0) ? float4(as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u))) : u_xlat6;
            u_xlati3.x = int(bitFieldInsert(0x1u, 0x1u, uint(u_xlati18), 0x0u));
            u_xlati3.x = int(bitFieldInsert(0x1u, 0x0u, uint(u_xlati4), uint(u_xlati3.x)));
            u_xlat0.w = float(u_xlati3.x);
            output.TEXCOORD0 = u_xlat1;
            output.TEXCOORD1 = u_xlat2;
            output.TEXCOORD2 = u_xlat0;
            phase0_Output0_4.xyz = u_xlat5.xyz;
            phase0_Output0_4.w = 1.0;
            output.TEXCOORD5.w = u_xlat4.w;
        } else {
            output.mtl_Position = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD1 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_4 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD4.xyz = float3(0.0, 0.0, 0.0);
            output.TEXCOORD6.xyz = float3(0.0, 0.0, 0.0);
            output.TEXCOORD7.xyz = float3(0.0, 0.0, 0.0);
            output.TEXCOORD8.xyz = float3(0.0, 0.0, 0.0);
        }
    output.TEXCOORD3 = phase0_Output0_4.xyz;
    output.TEXCOORD9 = phase0_Output0_4.w;
        return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation failed: 

program_source:829:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:839:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
                             ^
program_source:840:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
                                               ^
program_source:1191:50: error: member reference base type 'uint' (aka 'unsigned int') is not a structure or union
                u_xlatu42 = input.cp[0].TEXCOORD8.x;
                            ~~~~~~~~~~~~~~~~~~~~~^~



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float4 COLOR0 [[ attribute(9) ]] ;
    float3 NORMAL0 [[ attribute(10) ]] ;
    float4 TANGENT0 [[ attribute(11) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    uint mtl_VertexID,
    uint mtl_BaseVertex,
    Mtl_VertexIn input)
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseVertex = 0;
#endif
    mtl_VertexID = mtl_VertexID - mtl_BaseVertex;
    Mtl_VertexOut output;
    output.mtl_Position = input.POSITION0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = input.TEXCOORD1.xy;
    output.TEXCOORD2.xy = input.TEXCOORD2.xy;
    output.TEXCOORD3.xy = input.TEXCOORD3.xy;
    output.TEXCOORD4.xy = input.TEXCOORD4.xy;
    output.TEXCOORD5.xy = input.TEXCOORD5.xy;
    output.TEXCOORD6.xy = input.TEXCOORD6.xy;
    output.TEXCOORD7.xy = input.TEXCOORD7.xy;
    output.COLOR0 = input.COLOR0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TANGENT0 = input.TANGENT0;
    output.TEXCOORD8 = mtl_VertexID;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(12) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float4 COLOR0 [[ attribute(9) ]] ;
    float3 NORMAL0 [[ attribute(10) ]] ;
    float4 TANGENT0 [[ attribute(11) ]] ;
    uint TEXCOORD8 [[ attribute(13) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
    float3 unity_LightColor0;
    float3 unity_LightColor1;
    float3 unity_LightColor2;
    float3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
    float4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _LightColor0;
    float4 _SpecColor;
    bool4 unity_MetaVertexControl;
    bool4 unity_MetaFragmentControl;
    int unity_VisualizationMode;
    float unity_OneOverOutputBoost;
    float unity_MaxOutputValue;
    float unity_UseLinearSpace;
    float4 _lilBackgroundTexture_TexelSize;
    float4 _LightDirectionOverride;
    float4 _BackfaceColor;
    float4 _Color;
    float4 _MainTex_ST;
    float4 _MainTex_ScrollRotate;
    float4 _MainTexHSVG;
    float4 _Color2nd;
    float4 _Main2ndTex_ST;
    float4 _Main2ndTex_ScrollRotate;
    float4 _Main2ndDistanceFade;
    float4 _Main2ndTexDecalAnimation;
    float4 _Main2ndTexDecalSubParam;
    float4 _Main2ndDissolveMask_ST;
    float4 _Main2ndDissolveColor;
    float4 _Main2ndDissolveParams;
    float4 _Main2ndDissolvePos;
    float4 _Main2ndDissolveNoiseMask_ST;
    float4 _Main2ndDissolveNoiseMask_ScrollRotate;
    float4 _Color3rd;
    float4 _Main3rdTex_ST;
    float4 _Main3rdTex_ScrollRotate;
    float4 _Main3rdDistanceFade;
    float4 _Main3rdTexDecalAnimation;
    float4 _Main3rdTexDecalSubParam;
    float4 _Main3rdDissolveMask_ST;
    float4 _Main3rdDissolveColor;
    float4 _Main3rdDissolveParams;
    float4 _Main3rdDissolvePos;
    float4 _Main3rdDissolveNoiseMask_ST;
    float4 _Main3rdDissolveNoiseMask_ScrollRotate;
    float4 _ShadowColor;
    float4 _Shadow2ndColor;
    float4 _Shadow3rdColor;
    float4 _ShadowBorderColor;
    float4 _ShadowAOShift;
    float4 _ShadowAOShift2;
    float4 _RimShadeColor;
    float4 _BacklightColor;
    float4 _BacklightColorTex_ST;
    float4 _EmissionColor;
    float4 _EmissionBlink;
    float4 _EmissionMap_ST;
    float4 _EmissionMap_ScrollRotate;
    float4 _EmissionBlendMask_ST;
    float4 _EmissionBlendMask_ScrollRotate;
    float4 _Emission2ndColor;
    float4 _Emission2ndBlink;
    float4 _Emission2ndMap_ST;
    float4 _Emission2ndMap_ScrollRotate;
    float4 _Emission2ndBlendMask_ST;
    float4 _Emission2ndBlendMask_ScrollRotate;
    float4 _BumpMap_ST;
    float4 _Bump2ndMap_ST;
    float4 _Bump2ndScaleMask_ST;
    float4 _AnisotropyTangentMap_ST;
    float4 _AnisotropyScaleMask_ST;
    float4 _AnisotropyShiftNoiseMask_ST;
    float4 _ReflectionColor;
    float4 _MetallicGlossMap_ST;
    float4 _ReflectionColorTex_ST;
    float4 _SmoothnessTex_ST;
    float4 _ReflectionCubeColor;
    float4 _ReflectionCubeTex_HDR;
    float4 _MatCapColor;
    float4 _MatCapTex_ST;
    float4 _MatCapBlendMask_ST;
    float4 _MatCapBlendUV1;
    float4 _MatCapBumpMap_ST;
    float4 _MatCap2ndColor;
    float4 _MatCap2ndTex_ST;
    float4 _MatCap2ndBlendMask_ST;
    float4 _MatCap2ndBlendUV1;
    float4 _MatCap2ndBumpMap_ST;
    float4 _RimColor;
    float4 _RimColorTex_ST;
    float4 _RimIndirColor;
    float4 _GlitterColor;
    float4 _GlitterColorTex_ST;
    float4 _GlitterParams1;
    float4 _GlitterParams2;
    float4 _GlitterShapeTex_ST;
    float4 _GlitterAtras;
    float4 _DistanceFade;
    float4 _DistanceFadeColor;
    float4 _DistanceFadeRimColor;
    float4 _DitherTex_TexelSize;
    float4 _AudioLinkMask_ST;
    float4 _AudioLinkMask_ScrollRotate;
    float4 _AudioLinkDefaultValue;
    float4 _AudioLinkUVParams;
    float4 _AudioLinkStart;
    float4 _AudioLinkVertexUVParams;
    float4 _AudioLinkVertexStart;
    float4 _AudioLinkVertexStrength;
    float4 _AudioLinkLocalMapParams;
    float4 _DissolveMask_ST;
    float4 _DissolveColor;
    float4 _DissolveParams;
    float4 _DissolvePos;
    float4 _DissolveNoiseMask_ST;
    float4 _DissolveNoiseMask_ScrollRotate;
    float4 _OutlineColor;
    float4 _OutlineLitColor;
    float4 _OutlineTex_ST;
    float4 _OutlineTex_ScrollRotate;
    float4 _OutlineTexHSVG;
    float _AsUnlit;
    float _Cutoff;
    float _SubpassCutoff;
    float _FlipNormal;
    float _ShiftBackfaceUV;
    float _VertexLightStrength;
    float _LightMinLimit;
    float _LightMaxLimit;
    float _MonochromeLighting;
    float _AAStrength;
    float _AlphaBoostFA;
    float _MainGradationStrength;
    float _Main2ndTexAngle;
    float _Main2ndEnableLighting;
    float _Main2ndDissolveNoiseStrength;
    float _Main3rdTexAngle;
    float _Main3rdEnableLighting;
    float _Main3rdDissolveNoiseStrength;
    float4 _AlphaMask_ST;
    float _AlphaMaskScale;
    float _AlphaMaskValue;
    float _BackfaceForceShadow;
    float _ShadowStrength;
    float _ShadowNormalStrength;
    float _ShadowBorder;
    float _ShadowBlur;
    float _ShadowStrengthMaskLOD;
    float _ShadowBorderMaskLOD;
    float _ShadowBlurMaskLOD;
    float _Shadow2ndNormalStrength;
    float _Shadow2ndBorder;
    float _Shadow2ndBlur;
    float _Shadow3rdNormalStrength;
    float _Shadow3rdBorder;
    float _Shadow3rdBlur;
    float _ShadowMainStrength;
    float _ShadowEnvStrength;
    float _ShadowBorderRange;
    float _ShadowReceive;
    float _Shadow2ndReceive;
    float _Shadow3rdReceive;
    float _ShadowFlatBlur;
    float _ShadowFlatBorder;
    float _RimShadeNormalStrength;
    float _RimShadeBorder;
    float _RimShadeBlur;
    float _RimShadeFresnelPower;
    float _BacklightNormalStrength;
    float _BacklightBorder;
    float _BacklightBlur;
    float _BacklightDirectivity;
    float _BacklightViewStrength;
    float _BacklightBackfaceMask;
    float _BacklightMainStrength;
    float _BumpScale;
    float _Bump2ndScale;
    float _AnisotropyScale;
    float _AnisotropyTangentWidth;
    float _AnisotropyBitangentWidth;
    float _AnisotropyShift;
    float _AnisotropyShiftNoiseScale;
    float _AnisotropySpecularStrength;
    float _Anisotropy2ndTangentWidth;
    float _Anisotropy2ndBitangentWidth;
    float _Anisotropy2ndShift;
    float _Anisotropy2ndShiftNoiseScale;
    float _Anisotropy2ndSpecularStrength;
    float _Reflectance;
    float _SpecularNormalStrength;
    float _SpecularBorder;
    float _SpecularBlur;
    float _ReflectionNormalStrength;
    float _ReflectionCubeEnableLighting;
    float _Smoothness;
    float _Metallic;
    float _GSAAStrength;
    float _MatCapBlend;
    float _MatCapEnableLighting;
    float _MatCapShadowMask;
    float _MatCapVRParallaxStrength;
    float _MatCapBackfaceMask;
    float _MatCapLod;
    float _MatCapNormalStrength;
    float _MatCapMainStrength;
    float _MatCapBumpScale;
    float _MatCap2ndBlend;
    float _MatCap2ndEnableLighting;
    float _MatCap2ndShadowMask;
    float _MatCap2ndVRParallaxStrength;
    float _MatCap2ndBackfaceMask;
    float _MatCap2ndLod;
    float _MatCap2ndNormalStrength;
    float _MatCap2ndMainStrength;
    float _MatCap2ndBumpScale;
    float _RimNormalStrength;
    float _RimBorder;
    float _RimBlur;
    float _RimFresnelPower;
    float _RimEnableLighting;
    float _RimShadowMask;
    float _RimVRParallaxStrength;
    float _RimBackfaceMask;
    float _RimMainStrength;
    float _RimDirStrength;
    float _RimDirRange;
    float _RimIndirRange;
    float _RimIndirBorder;
    float _RimIndirBlur;
    float _GlitterMainStrength;
    float _GlitterPostContrast;
    float _GlitterSensitivity;
    float _GlitterNormalStrength;
    float _GlitterEnableLighting;
    float _GlitterShadowMask;
    float _GlitterVRParallaxStrength;
    float _GlitterBackfaceMask;
    float _GlitterScaleRandomize;
    float _DistanceFadeRimFresnelPower;
    float _EmissionBlend;
    float _EmissionParallaxDepth;
    float _EmissionFluorescence;
    float _EmissionMainStrength;
    float _EmissionGradSpeed;
    float _Emission2ndBlend;
    float _Emission2ndParallaxDepth;
    float _Emission2ndFluorescence;
    float _Emission2ndMainStrength;
    float _Emission2ndGradSpeed;
    float _Parallax;
    float _ParallaxOffset;
    float _DitherMaxValue;
    float _AudioLink2EmissionGrad;
    float _AudioLink2Emission2ndGrad;
    float _DissolveNoiseStrength;
    float _IDMask1;
    float _IDMask2;
    float _IDMask3;
    float _IDMask4;
    float _IDMask5;
    float _IDMask6;
    float _IDMask7;
    float _IDMask8;
    float _IDMaskPrior1;
    float _IDMaskPrior2;
    float _IDMaskPrior3;
    float _IDMaskPrior4;
    float _IDMaskPrior5;
    float _IDMaskPrior6;
    float _IDMaskPrior7;
    float _IDMaskPrior8;
    float _UDIMDiscardCompile;
    float _UDIMDiscardMode;
    float _UDIMDiscardUV;
    float _UDIMDiscardRow3_0;
    float _UDIMDiscardRow3_1;
    float _UDIMDiscardRow3_2;
    float _UDIMDiscardRow3_3;
    float _UDIMDiscardRow2_0;
    float _UDIMDiscardRow2_1;
    float _UDIMDiscardRow2_2;
    float _UDIMDiscardRow2_3;
    float _UDIMDiscardRow1_0;
    float _UDIMDiscardRow1_1;
    float _UDIMDiscardRow1_2;
    float _UDIMDiscardRow1_3;
    float _UDIMDiscardRow0_0;
    float _UDIMDiscardRow0_1;
    float _UDIMDiscardRow0_2;
    float _UDIMDiscardRow0_3;
    float _lilShadowCasterBias;
    float _OutlineLitScale;
    float _OutlineLitOffset;
    float _OutlineWidth;
    float _OutlineEnableLighting;
    float _OutlineVectorScale;
    float _OutlineFixWidth;
    float _OutlineZBias;
    float _TessEdge;
    float _TessStrength;
    float _TessShrink;
    float _TessFactorMax;
    int _IDMaskIndex1;
    int _IDMaskIndex2;
    int _IDMaskIndex3;
    int _IDMaskIndex4;
    int _IDMaskIndex5;
    int _IDMaskIndex6;
    int _IDMaskIndex7;
    int _IDMaskIndex8;
    uint _IDMaskFrom;
    uint _IDMaskIsBitmap;
    uint _IDMaskControlsDissolve;
    uint _Cull;
    uint _OutlineCull;
    uint _Main2ndTexBlendMode;
    uint _Main2ndTexAlphaMode;
    uint _Main2ndTex_UVMode;
    uint _Main2ndTex_Cull;
    uint _Main3rdTexBlendMode;
    uint _Main3rdTexAlphaMode;
    uint _Main3rdTex_UVMode;
    uint _Main3rdTex_Cull;
    uint _AlphaMaskMode;
    uint _ShadowColorType;
    uint _ShadowMaskType;
    uint _Bump2ndMap_UVMode;
    uint _ReflectionBlendMode;
    uint _MatCapBlendMode;
    uint _MatCap2ndBlendMode;
    uint _RimBlendMode;
    uint _GlitterUVMode;
    uint _EmissionMap_UVMode;
    uint _EmissionBlendMode;
    uint _Emission2ndMap_UVMode;
    uint _Emission2ndBlendMode;
    uint _AudioLinkUVMode;
    uint _AudioLinkMask_UVMode;
    uint _AudioLinkVertexUVMode;
    uint _DistanceFadeMode;
    uint _UseDither;
    uint _OutlineVertexR2Width;
    uint _OutlineVectorUVMode;
    uint _Invisible;
    uint _UseMain2ndTex;
    uint _Main2ndTexIsMSDF;
    uint _Main2ndTexIsDecal;
    uint _Main2ndTexIsLeftOnly;
    uint _Main2ndTexIsRightOnly;
    uint _Main2ndTexShouldCopy;
    uint _Main2ndTexShouldFlipMirror;
    uint _Main2ndTexShouldFlipCopy;
    uint _UseMain3rdTex;
    uint _Main3rdTexIsMSDF;
    uint _Main3rdTexIsDecal;
    uint _Main3rdTexIsLeftOnly;
    uint _Main3rdTexIsRightOnly;
    uint _Main3rdTexShouldCopy;
    uint _Main3rdTexShouldFlipMirror;
    uint _Main3rdTexShouldFlipCopy;
    uint _UseShadow;
    uint _ShadowPostAO;
    uint _UseRimShade;
    uint _UseBacklight;
    uint _BacklightReceiveShadow;
    uint _UseBumpMap;
    uint _UseBump2ndMap;
    uint _UseAnisotropy;
    uint _Anisotropy2Reflection;
    uint _Anisotropy2MatCap;
    uint _Anisotropy2MatCap2nd;
    uint _UseReflection;
    uint _ApplySpecular;
    uint _ApplySpecularFA;
    uint _ApplyReflection;
    uint _SpecularToon;
    uint _ReflectionApplyTransparency;
    uint _ReflectionCubeOverride;
    uint _UseMatCap;
    uint _MatCapApplyTransparency;
    uint _MatCapPerspective;
    uint _MatCapZRotCancel;
    uint _MatCapCustomNormal;
    uint _UseMatCap2nd;
    uint _MatCap2ndApplyTransparency;
    uint _MatCap2ndPerspective;
    uint _MatCap2ndZRotCancel;
    uint _MatCap2ndCustomNormal;
    uint _UseRim;
    uint _RimApplyTransparency;
    uint _UseGlitter;
    uint _GlitterColorTex_UVMode;
    uint _GlitterApplyTransparency;
    uint _GlitterApplyShape;
    uint _GlitterAngleRandomize;
    uint _UseEmission;
    uint _EmissionUseGrad;
    uint _UseEmission2nd;
    uint _Emission2ndUseGrad;
    uint _UseParallax;
    uint _UsePOM;
    uint _UseAudioLink;
    uint _AudioLink2Main2nd;
    uint _AudioLink2Main3rd;
    uint _AudioLink2Emission;
    uint _AudioLink2Emission2nd;
    uint _AudioLink2Vertex;
    uint _AudioLinkAsLocal;
    uint _OutlineLitApplyTex;
    uint _OutlineLitShadowReceive;
    uint _OutlineDeleteMesh;
    uint _OutlineDisableInVR;
    float4 _AudioTexture_TexelSize;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    // mtl_VertexID generated in compute kernel,
    // mtl_BaseVertex generated in compute kernel,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(mtl_VertexID, mtl_BaseVertex, vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.TEXCOORD4 = input.cp[controlPointID].TEXCOORD4;
        output.TEXCOORD5 = input.cp[controlPointID].TEXCOORD5;
        output.TEXCOORD6 = input.cp[controlPointID].TEXCOORD6;
        output.TEXCOORD7 = input.cp[controlPointID].TEXCOORD7;
        output.COLOR0 = input.cp[controlPointID].COLOR0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float4 u_xlat1;
    int2 u_xlati1;
    bool4 u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    bool2 u_xlatb3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float3 u_xlat11;
    float u_xlat22;
    bool2 u_xlatb23;
    int2 u_xlati24;
    bool2 u_xlatb24;
    float u_xlat33;
    float u_xlat34;
    // fork_phase2
    {
        if((VGlobals._Invisible)!=uint(0)){
            tessFactor.edgeTessellationFactor[0] = 0.0;
            tessFactor.edgeTessellationFactor[1] = 0.0;
            tessFactor.edgeTessellationFactor[2] = 0.0;
            tessFactor.insideTessellationFactor = 0.0;
            return;
        }
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].mtl_Position.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].mtl_Position.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].mtl_Position.zzz, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].mtl_Position.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].mtl_Position.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].mtl_Position.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat3.xyz = u_xlat2.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].mtl_Position.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].mtl_Position.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].mtl_Position.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat4.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat4.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat6.x = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
        u_xlat7.x = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat7.xyz = float3(u_xlat33) * u_xlat7.xyz;
        u_xlat8.x = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat8.y = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat8.z = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
        u_xlat9.xyz = u_xlat2.xyz + u_xlat4.xyz;
        u_xlat9.xyz = fma(u_xlat9.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat9.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
        u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.x = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat4.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat4.xyz;
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.y = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.z = max(u_xlat33, 1.0);
        u_xlat9.xyz = min(u_xlat9.xyz, float3(VGlobals._TessFactorMax));
        u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
        u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
        u_xlat11.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat34 = dot(u_xlat11.xyz, u_xlat11.xyz);
        u_xlat34 = rsqrt(u_xlat34);
        u_xlat11.xyz = u_xlat11.xyz * float3(u_xlat34);
        u_xlat0.y = dot(u_xlat7.xyz, u_xlat11.xyz);
        u_xlat2.xyz = (-u_xlat4.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat22 = rsqrt(u_xlat22);
        u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
        u_xlat0.z = dot(u_xlat8.xyz, u_xlat2.xyz);
        u_xlat2.xyz = abs(u_xlat0.zxy) + abs(u_xlat0.yzx);
        u_xlat0.xyz = fma((-u_xlat2.xyz), float3(0.5, 0.5, 0.5), float3(1.0, 1.0, 1.0));
        u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
        u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xyz;
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat34 = u_xlat0.y + u_xlat0.x;
        u_xlat34 = u_xlat0.z + u_xlat34;
        u_xlat0.w = u_xlat34 * 0.333333343;
        u_xlat1.xy = u_xlat1.xy / abs(u_xlat1.zz);
        u_xlat1.zw = u_xlat3.xy / abs(u_xlat3.zz);
        u_xlat2.xy = u_xlat5.xy / abs(u_xlat5.zz);
        u_xlatb24.xy = (float2(1.00999999, 1.00999999)<u_xlat1.xy);
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat1.zw);
        u_xlati24.xy = int2((uint2(u_xlatb24.xy) * 0xffffffffu) & (uint2(u_xlatb3.xy) * 0xffffffffu));
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat2.xy);
        u_xlati24.xy = int2((uint2(u_xlatb3.xy) * 0xffffffffu) & uint2(u_xlati24.xy));
        u_xlatb1 = (u_xlat1<float4(-1.00999999, -1.00999999, -1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb1.zw) * 0xffffffffu) & (uint2(u_xlatb1.xy) * 0xffffffffu));
        u_xlatb23.xy = (u_xlat2.xy<float2(-1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb23.xy) * 0xffffffffu) & uint2(u_xlati1.xy));
        u_xlati1.x = int(uint(u_xlati1.x) | uint(u_xlati24.x));
        u_xlati1.x = int(uint(u_xlati24.y) | uint(u_xlati1.x));
        u_xlati1.x = int(uint(u_xlati1.y) | uint(u_xlati1.x));
        u_xlat0 = (u_xlati1.x != 0) ? float4(0.0, 0.0, 0.0, 0.0) : u_xlat0;
        tessFactor.edgeTessellationFactor[0] = u_xlat0.x;
        tessFactor.edgeTessellationFactor[1] = u_xlat0.y;
        tessFactor.edgeTessellationFactor[2] = u_xlat0.z;
        tessFactor.insideTessellationFactor = u_xlat0.w;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float TEXCOORD7 [[ user(TEXCOORD7) ]];
};
		template <typename UVecType> UVecType bitFieldInsert(const UVecType width, const UVecType offset, const UVecType src2, const UVecType src3)
		{
			UVecType bitmask = (((UVecType(1) << width)-1) << offset) & 0xffffffff;
			return ((src2 << offset) & bitmask) | (src3 & ~bitmask);
		}; 
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    // mtl_VertexID unused,
    // mtl_BaseVertex unused,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    texture2d<float, access::sample > _AudioLinkLocalMap [[ texture(0) ]] ,
    texture2d<float, access::sample > _OutlineWidthMask [[ texture(1) ]] ,
    texture2d<float, access::sample > _OutlineVectorTex [[ texture(2) ]] ,
    texture2d<float, access::sample > _AudioTexture [[ texture(3) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    constexpr sampler lil_sampler_trilinear_repeat(filter::linear,mip_filter::linear,address::repeat);
    constexpr sampler lil_sampler_linear_clamp(filter::linear,mip_filter::nearest,address::clamp_to_edge);
        float4 phase0_Input0_1[3];
        phase0_Input0_1[2] = float4(input.cp[2].TEXCOORD0, input.cp[2].TEXCOORD1);
        phase0_Input0_1[1] = float4(input.cp[1].TEXCOORD0, input.cp[1].TEXCOORD1);
        phase0_Input0_1[0] = float4(input.cp[0].TEXCOORD0, input.cp[0].TEXCOORD1);
        float4 phase0_Input0_2[3];
        phase0_Input0_2[2] = float4(input.cp[2].TEXCOORD2, input.cp[2].TEXCOORD3);
        phase0_Input0_2[1] = float4(input.cp[1].TEXCOORD2, input.cp[1].TEXCOORD3);
        phase0_Input0_2[0] = float4(input.cp[0].TEXCOORD2, input.cp[0].TEXCOORD3);
    float4 phase0_Output0_4;
    float4 phase0_Output0_5;
    float3 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    int u_xlati4;
    uint u_xlatu4;
    bool4 u_xlatb4;
    float4 u_xlat5;
    float4 u_xlat6;
    int u_xlati6;
    bool2 u_xlatb6;
    float4 u_xlat7;
    int4 u_xlati7;
    bool4 u_xlatb7;
    float4 u_xlat8;
    int4 u_xlati8;
    bool4 u_xlatb8;
    float4 u_xlat9;
    int4 u_xlati9;
    float4 u_xlat10;
    bool4 u_xlatb10;
    float4 u_xlat11;
    int4 u_xlati11;
    float4 u_xlat12;
    bool u_xlatb13;
    float3 u_xlat16;
    float3 u_xlat17;
    int2 u_xlati17;
    uint u_xlatu17;
    bool u_xlatb17;
    int u_xlati19;
    float2 u_xlat21;
    bool u_xlatb26;
    float2 u_xlat30;
    bool u_xlatb30;
    bool2 u_xlatb32;
    float u_xlat39;
    int u_xlati39;
    bool u_xlatb39;
    float u_xlat42;
    uint u_xlatu42;
    bool u_xlatb42;
    float u_xlat43;
    int u_xlati43;
    uint u_xlatu43;
    bool u_xlatb43;
    float u_xlat46;
    float4 TempArray0[4];
    u_xlatb0 = int(VGlobals._Invisible)!=0x0;
    u_xlatb13 = int(VGlobals._OutlineDisableInVR)!=0x0;
    u_xlatb26 = 9.99999997e-07<abs(VGlobals.hlslcc_mtx4x4glstate_matrix_projection[2].x);
    u_xlatb13 = u_xlatb26 && u_xlatb13;
    u_xlatb0 = u_xlatb13 || u_xlatb0;
    if(!u_xlatb0){
        u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].mtl_Position.xyz;
        u_xlat0.xyz = fma(mtl_TessCoord.xxx, input.cp[0].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat0.xyz = fma(mtl_TessCoord.zzz, input.cp[2].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat1 = mtl_TessCoord.yyyy * phase0_Input0_1[1];
        u_xlat1 = fma(mtl_TessCoord.xxxx, phase0_Input0_1[0], u_xlat1);
        u_xlat1 = fma(mtl_TessCoord.zzzz, phase0_Input0_1[2], u_xlat1);
        u_xlat2 = mtl_TessCoord.yyyy * phase0_Input0_2[1];
        u_xlat2 = fma(mtl_TessCoord.xxxx, phase0_Input0_2[0], u_xlat2);
        u_xlat2 = fma(mtl_TessCoord.zzzz, phase0_Input0_2[2], u_xlat2);
        u_xlat3 = mtl_TessCoord.yyyy * input.cp[1].COLOR0;
        u_xlat3 = fma(mtl_TessCoord.xxxx, input.cp[0].COLOR0, u_xlat3);
        u_xlat3 = fma(mtl_TessCoord.zzzz, input.cp[2].COLOR0, u_xlat3);
        u_xlat4.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
        u_xlat4.xyz = fma(mtl_TessCoord.xxx, input.cp[0].NORMAL0.xyz, u_xlat4.xyz);
        u_xlat4.xyz = fma(mtl_TessCoord.zzz, input.cp[2].NORMAL0.xyz, u_xlat4.xyz);
        u_xlat5 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
        u_xlat5 = fma(mtl_TessCoord.xxxx, input.cp[0].TANGENT0, u_xlat5);
        u_xlat5 = fma(mtl_TessCoord.zzzz, input.cp[2].TANGENT0, u_xlat5);
        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat39 = rsqrt(u_xlat39);
        u_xlat4.xyz = float3(u_xlat39) * u_xlat4.xyz;
        u_xlat39 = dot(input.cp[0].mtl_Position.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat6.xyz = float3(u_xlat39) * input.cp[0].NORMAL0.xyz;
        u_xlat39 = dot(input.cp[1].mtl_Position.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat7.xyz = float3(u_xlat39) * input.cp[1].NORMAL0.xyz;
        u_xlat39 = dot(input.cp[2].mtl_Position.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat8.xyz = float3(u_xlat39) * input.cp[2].NORMAL0.xyz;
        u_xlat7.xyz = u_xlat7.xyz * mtl_TessCoord.yyy;
        u_xlat6.xyz = fma(u_xlat6.xyz, mtl_TessCoord.xxx, u_xlat7.xyz);
        u_xlat6.xyz = fma(u_xlat8.xyz, mtl_TessCoord.zzz, u_xlat6.xyz);
        u_xlat0.xyz = fma(u_xlat6.xyz, float3(VGlobals._TessStrength), u_xlat0.xyz);
        u_xlat6.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
        u_xlat7.xyz = u_xlat5.yzx * u_xlat4.zxy;
        u_xlat7.xyz = fma(u_xlat4.yzx, u_xlat5.zxy, (-u_xlat7.xyz));
        u_xlat39 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat39 = rsqrt(u_xlat39);
        u_xlat7.xyz = float3(u_xlat39) * u_xlat7.xyz;
        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat39 = sqrt(u_xlat39);
        u_xlat39 = u_xlat39 * u_xlat5.w;
        u_xlat7.xyz = float3(u_xlat39) * u_xlat7.xyz;
        u_xlatb39 = int(VGlobals._UseAudioLink)!=0x0;
        u_xlatb43 = int(VGlobals._AudioLink2Vertex)!=0x0;
        u_xlatb39 = u_xlatb39 && u_xlatb43;
        if(u_xlatb39){
            u_xlatb32.xy = (int2(VGlobals._AudioLinkVertexUVMode)==int2(0x1, 0x2));
            u_xlat8.xyz = u_xlat0.xyz + (-VGlobals._AudioLinkVertexStart.xyz);
            u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat39 = sqrt(u_xlat39);
            u_xlat39 = fma(u_xlat39, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat39 = (u_xlatb32.x) ? u_xlat39 : VGlobals._AudioLinkVertexUVParams.y;
            u_xlat8.x = sin(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat9.x = cos(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat21.xy = u_xlat1.xy + float2(-0.5, -0.5);
            u_xlat43 = u_xlat8.x * u_xlat21.y;
            u_xlat43 = fma(u_xlat21.x, u_xlat9.x, (-u_xlat43));
            u_xlat43 = u_xlat43 + 0.5;
            u_xlat43 = fma(u_xlat43, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat8.x = (u_xlatb32.y) ? u_xlat43 : u_xlat39;
            if((VGlobals._AudioLinkAsLocal)!=uint(0)){
                u_xlat39 = (-VGlobals._Time.y) * VGlobals._AudioLinkLocalMapParams.x;
                u_xlat39 = u_xlat39 * VGlobals._AudioLinkLocalMapParams.y;
                u_xlat39 = u_xlat39 * 0.0166666675;
                u_xlat39 = fract(u_xlat39);
                u_xlat39 = u_xlat39 + VGlobals._AudioLinkLocalMapParams.z;
                u_xlat9.x = u_xlat39 + u_xlat8.x;
                u_xlat9.y = VGlobals._AudioLinkVertexUVParams.w;
                u_xlat39 = _AudioLinkLocalMap.sample(lil_sampler_trilinear_repeat, u_xlat9.xy, level(0.0)).x;
            } else {
                u_xlat43 = float(_AudioTexture.get_width(0x0));
                u_xlati43 = int(u_xlat43);
                u_xlatb43 = 0x10<u_xlati43;
                if(u_xlatb43){
                    u_xlat8.y = VGlobals._AudioLinkVertexUVParams.w * 0.0625;
                    u_xlat39 = _AudioTexture.sample(lil_sampler_linear_clamp, u_xlat8.xy, level(0.0)).x;
                    u_xlat39 = u_xlat39;
                    u_xlat39 = clamp(u_xlat39, 0.0f, 1.0f);
                } else {
                    u_xlat43 = fma(VGlobals._Time.y, VGlobals._AudioLinkDefaultValue.z, (-u_xlat8.x));
                    u_xlat43 = fract(u_xlat43);
                    u_xlat43 = u_xlat43 + VGlobals._AudioLinkDefaultValue.w;
                    u_xlat43 = clamp(u_xlat43, 0.0f, 1.0f);
                    u_xlat43 = u_xlat43 * VGlobals._AudioLinkDefaultValue.y;
                    u_xlat39 = fma((-u_xlat43), VGlobals._AudioLinkDefaultValue.x, VGlobals._AudioLinkDefaultValue.x);
                    u_xlat39 = clamp(u_xlat39, 0.0f, 1.0f);
                }
            }
            u_xlat8.xyz = fma(u_xlat4.xyz, VGlobals._AudioLinkVertexStrength.www, VGlobals._AudioLinkVertexStrength.xyz);
            u_xlat0.xyz = fma(u_xlat8.xyz, float3(u_xlat39), u_xlat0.xyz);
        }
        TempArray0[0].xy = u_xlat6.xy;
        TempArray0[1].xy = u_xlat1.zw;
        TempArray0[2].xy = u_xlat2.xy;
        TempArray0[3].xy = u_xlat2.zw;
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz);
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, u_xlat0.yyy, u_xlat8.xyz);
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat8.xyz);
        u_xlat39 = VGlobals._OutlineWidth * 0.00999999978;
        u_xlat43 = _OutlineWidthMask.sample(lil_sampler_trilinear_repeat, u_xlat6.xy, level(0.0)).x;
        u_xlat39 = u_xlat39 * u_xlat43;
        u_xlatb6.xy = (int2(VGlobals._OutlineVertexR2Width)==int2(0x1, 0x2));
        u_xlat43 = u_xlat3.x * u_xlat39;
        u_xlat39 = (u_xlatb6.x) ? u_xlat43 : u_xlat39;
        u_xlat42 = u_xlat3.w * u_xlat39;
        u_xlat39 = (u_xlatb6.y) ? u_xlat42 : u_xlat39;
        u_xlat6.xzw = (-u_xlat8.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat42 = dot(u_xlat6.xzw, u_xlat6.xzw);
        u_xlat42 = sqrt(u_xlat42);
        u_xlat42 = min(u_xlat42, 1.0);
        u_xlat42 = u_xlat42 + -1.0;
        u_xlat42 = fma(VGlobals._OutlineFixWidth, u_xlat42, 1.0);
        u_xlat42 = u_xlat39 * u_xlat42;
        u_xlatu43 = VGlobals._OutlineVectorUVMode;
        u_xlat6.xz = TempArray0[int(u_xlatu43)].xy;
        u_xlat6.xzw = _OutlineVectorTex.sample(lil_sampler_trilinear_repeat, u_xlat6.xz, level(0.0)).xyw;
        u_xlat6.x = u_xlat6.x * u_xlat6.w;
        u_xlat6.xz = fma(u_xlat6.xz, float2(2.0, 2.0), float2(-1.0, -1.0));
        u_xlat6.xz = u_xlat6.xz * float2(VGlobals._OutlineVectorScale);
        u_xlat43 = dot(u_xlat6.xz, u_xlat6.xz);
        u_xlat43 = min(u_xlat43, 1.0);
        u_xlat43 = (-u_xlat43) + 1.0;
        u_xlat43 = sqrt(u_xlat43);
        u_xlat8.xyz = u_xlat7.xyz * u_xlat6.zzz;
        u_xlat6.xzw = fma(u_xlat6.xxx, u_xlat5.xyz, u_xlat8.xyz);
        u_xlat6.xzw = fma(float3(u_xlat43), u_xlat4.xyz, u_xlat6.xzw);
        u_xlat3.xyz = fma(u_xlat3.xyz, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
        u_xlat7.xyz = u_xlat7.xyz * u_xlat3.yyy;
        u_xlat5.xyz = fma(u_xlat3.xxx, u_xlat5.xyz, u_xlat7.xyz);
        u_xlat3.xyz = fma(u_xlat3.zzz, u_xlat4.xyz, u_xlat5.xyz);
        u_xlat3.xyz = (u_xlatb6.y) ? u_xlat3.xyz : u_xlat6.xzw;
        u_xlat0.xyz = fma(u_xlat3.xyz, float3(u_xlat42), u_xlat0.xyz);
        u_xlatb3 = VGlobals.unity_OrthoParams.w==0.0;
        u_xlat16.xyz = VGlobals._WorldSpaceCameraPos.xyzx.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz;
        u_xlat16.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz, VGlobals._WorldSpaceCameraPos.xyzx.xxx, u_xlat16.xyz);
        u_xlat16.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz, VGlobals._WorldSpaceCameraPos.xyzx.zzz, u_xlat16.xyz);
        u_xlat16.xyz = u_xlat16.xyz + VGlobals.hlslcc_mtx4x4unity_WorldToObject[3].xyz;
        u_xlat16.xyz = (-u_xlat0.xyz) + u_xlat16.xyz;
        u_xlat5.xyz = VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].zzz;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz, VGlobals.hlslcc_mtx4x4unity_MatrixV[0].zzz, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz, VGlobals.hlslcc_mtx4x4unity_MatrixV[2].zzz, u_xlat5.xyz);
        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat16.xyz : u_xlat5.xyz;
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat3.xyz = float3(u_xlat42) * u_xlat3.xyz;
        u_xlat0.xyz = fma((-u_xlat3.xyz), float3(VGlobals._OutlineZBias), u_xlat0.xyz);
        u_xlat3.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
        u_xlat5 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat5);
        u_xlat5 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat5);
        u_xlat5 = u_xlat5 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
        u_xlat6.x = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat4.xyz = float3(u_xlat42) * u_xlat6.xyz;
        u_xlat42 = dot(VGlobals._LightColor0.xyz, float3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat6.xyz = VGlobals.unity_SHAg.xyz * float3(0.333332986, 0.333332986, 0.333332986);
        u_xlat6.xyz = fma(VGlobals.unity_SHAr.xyz, float3(0.333332986, 0.333332986, 0.333332986), u_xlat6.xyz);
        u_xlat6.xyz = fma(VGlobals.unity_SHAb.xyz, float3(0.333332986, 0.333332986, 0.333332986), u_xlat6.xyz);
        u_xlat6.w = abs(u_xlat6.y);
        u_xlat43 = dot(VGlobals._LightDirectionOverride.xyz, VGlobals._LightDirectionOverride.xyz);
        u_xlat43 = sqrt(u_xlat43);
        u_xlat7.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * VGlobals._LightDirectionOverride.yyy;
        u_xlat7.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals._LightDirectionOverride.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, VGlobals._LightDirectionOverride.zzz, u_xlat7.xyz);
        u_xlat46 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat46 = rsqrt(u_xlat46);
        u_xlat7.xyz = float3(u_xlat46) * u_xlat7.xyz;
        u_xlat7.xyz = float3(u_xlat43) * u_xlat7.xyz;
        u_xlatb43 = float(0.0)!=VGlobals._LightDirectionOverride.w;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : VGlobals._LightDirectionOverride.xyz;
        u_xlat8.xyz = fma(VGlobals._WorldSpaceLightPos0.xyz, float3(u_xlat42), u_xlat6.xwz);
        u_xlat7.xyz = u_xlat7.xyz + u_xlat8.xyz;
        u_xlat43 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat7.xyz = float3(u_xlat43) * u_xlat7.xyz;
        u_xlat6.xyz = fma(VGlobals._WorldSpaceLightPos0.xyz, float3(u_xlat42), u_xlat6.xyz);
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlatb43 = u_xlat42<9.99999997e-07;
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat6.xyz = float3(u_xlat42) * u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz * float3(0.666665971, 0.666665971, 0.666665971);
        u_xlat6.xyz = (bool(u_xlatb43)) ? float3(0.0, 0.0, 0.0) : u_xlat6.xyz;
        u_xlat8 = u_xlat6.yzzx * u_xlat6.xyzz;
        u_xlat42 = dot(VGlobals.unity_SHBr, u_xlat8);
        u_xlat9.x = u_xlat42 + VGlobals.unity_SHAr.w;
        u_xlat42 = dot(VGlobals.unity_SHBg, u_xlat8);
        u_xlat9.y = u_xlat42 + VGlobals.unity_SHAg.w;
        u_xlat42 = dot(VGlobals.unity_SHBb, u_xlat8);
        u_xlat9.z = u_xlat42 + VGlobals.unity_SHAb.w;
        u_xlat42 = u_xlat6.y * u_xlat6.y;
        u_xlat42 = fma(u_xlat6.x, u_xlat6.x, (-u_xlat42));
        u_xlat8.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat42), u_xlat9.xyz);
        u_xlat9.x = dot(VGlobals.unity_SHAr.xyz, u_xlat6.xyz);
        u_xlat9.y = dot(VGlobals.unity_SHAg.xyz, u_xlat6.xyz);
        u_xlat9.z = dot(VGlobals.unity_SHAb.xyz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat8.xyz + u_xlat9.xyz;
        u_xlat6.xyz = u_xlat6.xyz + VGlobals._LightColor0.xyz;
        u_xlat6.xyz = max(u_xlat6.xyz, float3(VGlobals._LightMinLimit));
        u_xlat6.xyz = min(u_xlat6.xyz, float3(VGlobals._LightMaxLimit));
        u_xlat42 = dot(u_xlat6.xyz, float3(0.333333343, 0.333333343, 0.333333343));
        u_xlat8.xyz = (-u_xlat6.xyz) + float3(u_xlat42);
        u_xlat6.xyz = fma(float3(VGlobals._MonochromeLighting), u_xlat8.xyz, u_xlat6.xyz);
        u_xlat8.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
        phase0_Output0_5.xyz = fma(float3(VGlobals._AsUnlit), u_xlat8.xyz, u_xlat6.xyz);
        u_xlat17.xz = u_xlat4.yy * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].xy;
        u_xlat4.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].xy, u_xlat4.xx, u_xlat17.xz);
        u_xlat4.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].xy, u_xlat4.zz, u_xlat4.xy);
        u_xlat42 = dot(u_xlat4.xy, u_xlat4.xy);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat4.xy = float2(u_xlat42) * u_xlat4.xy;
        u_xlat30.xy = u_xlat7.yy * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].xy;
        u_xlat30.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].xy, u_xlat7.xx, u_xlat30.xy);
        u_xlat30.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].xy, u_xlat7.zz, u_xlat30.xy);
        u_xlat42 = dot(u_xlat30.xy, u_xlat30.xy);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat30.xy = float2(u_xlat42) * u_xlat30.xy;
        u_xlat42 = dot(u_xlat4.xy, u_xlat30.xy);
        phase0_Output0_4.w = fma(u_xlat42, 0.5, 0.5);
        u_xlatb42 = -9.99999997e-07<u_xlat39;
        u_xlatb39 = u_xlat39<9.99999997e-07;
        u_xlatb39 = u_xlatb39 && u_xlatb42;
        u_xlatb42 = int(VGlobals._OutlineDeleteMesh)!=0x0;
        u_xlatb39 = u_xlatb39 && u_xlatb42;
        switch(int(int(VGlobals._IDMaskFrom))){
            case 0x0:
                u_xlatu42 = uint(u_xlat1.x);
                break;
            case 0x1:
                u_xlatu42 = uint(u_xlat1.z);
                break;
            case 0x2:
                u_xlatu42 = uint(u_xlat2.x);
                break;
            case 0x3:
                u_xlatu42 = uint(u_xlat2.z);
                break;
            case 0x4:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD4.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD4.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD4.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x5:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD5.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD5.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD5.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x6:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD6.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD6.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD6.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x7:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD7.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD7.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD7.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            default:
                u_xlatu42 = input.cp[0].TEXCOORD8.x;
                break;
            }
            if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                u_xlat4.x = rint(VGlobals._IDMask1);
                u_xlat4.yzw = rint(float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4));
                u_xlat4.x = dot(u_xlat4, float4(1.0, 2.0, 4.0, 8.0));
                u_xlat6.x = rint(VGlobals._IDMask5);
                u_xlat6.yzw = rint(float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8));
                u_xlat17.x = dot(u_xlat6, float4(16.0, 32.0, 64.0, 128.0));
                u_xlat4.x = u_xlat17.x + u_xlat4.x;
                u_xlatu4 = uint(u_xlat4.x);
                u_xlatb17 = int(u_xlatu42)!=0x0;
                u_xlati4 = int(u_xlatu42 & u_xlatu4);
                u_xlatb4.x = int(u_xlatu42)==u_xlati4;
                u_xlati4 = int((uint(u_xlatb4.x) * 0xffffffffu) & (uint(u_xlatb17) * 0xffffffffu));
            } else {
                u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                u_xlat6.xy = float2(u_xlati17.yx);
                u_xlati7 = int4(u_xlatu42) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                u_xlat7 = float4(u_xlati7.wxyz);
                u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                u_xlat17.xy = float2(u_xlati17.xy);
                u_xlat8.xy = u_xlat6.yx + float2(1.0, 1.0);
                u_xlat8.xy = clamp(u_xlat8.xy, 0.0f, 1.0f);
                u_xlat9 = u_xlat7.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
                u_xlat6.x = (-u_xlat6.x);
                u_xlat6.x = clamp(u_xlat6.x, 0.0f, 1.0f);
                u_xlat7 = (-u_xlat7);
                u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
                u_xlat8.zw = u_xlat9.zw;
                u_xlat6.yzw = u_xlat7.yzw;
                u_xlat6 = u_xlat6 * u_xlat8;
                u_xlat9.zw = u_xlat17.xy + float2(1.0, 1.0);
                u_xlat9.zw = clamp(u_xlat9.zw, 0.0f, 1.0f);
                u_xlat7.yz = (-u_xlat17.xy);
                u_xlat7.yz = clamp(u_xlat7.yz, 0.0f, 1.0f);
                u_xlat7.w = 1.0;
                u_xlat7 = u_xlat7 * u_xlat9;
                u_xlat8.x = VGlobals._IDMask1;
                u_xlat8.yzw = float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4);
                u_xlat17.x = dot(u_xlat6, u_xlat8);
                u_xlat6.x = VGlobals._IDMask5;
                u_xlat6.yzw = float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8);
                u_xlat30.x = dot(u_xlat7, u_xlat6);
                u_xlat17.x = u_xlat30.x + u_xlat17.x;
                u_xlati4 = int((float(0.0)!=u_xlat17.x) ? 0xFFFFFFFFu : uint(0));
            }
            if((VGlobals._IDMaskControlsDissolve)!=uint(0)){
                if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                    u_xlat6.x = rint(VGlobals._IDMaskPrior1);
                    u_xlat6.yzw = rint(float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4));
                    u_xlat17.x = dot(u_xlat6, float4(1.0, 2.0, 4.0, 8.0));
                    u_xlat6.x = rint(VGlobals._IDMaskPrior5);
                    u_xlat6.yzw = rint(float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8));
                    u_xlat30.x = dot(u_xlat6, float4(16.0, 32.0, 64.0, 128.0));
                    u_xlat17.x = u_xlat30.x + u_xlat17.x;
                    u_xlatu17 = uint(u_xlat17.x);
                    u_xlatb30 = int(u_xlatu42)!=0x0;
                    u_xlati17.x = int(u_xlatu42 & u_xlatu17);
                    u_xlatb17 = int(u_xlatu42)==u_xlati17.x;
                    u_xlati19 = int((uint(u_xlatb17) * 0xffffffffu) & (uint(u_xlatb30) * 0xffffffffu));
                } else {
                    u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                    u_xlat7.xy = float2(u_xlati17.yx);
                    u_xlati8 = int4(u_xlatu42) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                    u_xlat8 = float4(u_xlati8.wxyz);
                    u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                    u_xlat17.xy = float2(u_xlati17.xy);
                    u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                    u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                    u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                    u_xlat7.x = (-u_xlat7.x);
                    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                    u_xlat8 = (-u_xlat8);
                    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                    u_xlat9.zw = u_xlat10.zw;
                    u_xlat7.yzw = u_xlat8.yzw;
                    u_xlat7 = u_xlat7 * u_xlat9;
                    u_xlat10.zw = u_xlat17.xy + float2(1.0, 1.0);
                    u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                    u_xlat8.yz = (-u_xlat17.xy);
                    u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                    u_xlat8.w = 1.0;
                    u_xlat8 = u_xlat8 * u_xlat10;
                    u_xlat9.x = VGlobals._IDMaskPrior1;
                    u_xlat9.yzw = float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4);
                    u_xlat42 = dot(u_xlat7, u_xlat9);
                    u_xlat7.x = VGlobals._IDMaskPrior5;
                    u_xlat7.yzw = float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8);
                    u_xlat17.x = dot(u_xlat8, u_xlat7);
                    u_xlat42 = u_xlat42 + u_xlat17.x;
                    u_xlati19 = int((float(0.0)!=u_xlat42) ? 0xFFFFFFFFu : uint(0));
                }
                u_xlati6 = int((u_xlati4!=u_xlati19) ? 0xFFFFFFFFu : uint(0));
                u_xlati4 = int(uint(u_xlati4) & uint(u_xlati19));
            } else {
                u_xlati6 = int(int(0xffffffffu));
                u_xlati19 = int(0x0);
            }
            u_xlati39 = int((uint(u_xlatb39) * 0xffffffffu) | uint(u_xlati4));
            u_xlatb4 = (float4(VGlobals._UDIMDiscardMode, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV)==float4(0.0, 0.0, 1.0, 2.0));
            u_xlatb42 = VGlobals._UDIMDiscardCompile==1.0;
            u_xlatb42 = u_xlatb42 && u_xlatb4.x;
            u_xlat4.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb4.yzw));
            u_xlat7 = u_xlat1 * u_xlat4.xxyy;
            u_xlat4.xy = u_xlat7.zw + u_xlat7.xy;
            u_xlat4.xy = fma(u_xlat2.xy, u_xlat4.zz, u_xlat4.xy);
            u_xlatb30 = VGlobals._UDIMDiscardUV==3.0;
            u_xlat30.x = u_xlatb30 ? 1.0 : float(0.0);
            u_xlat4.xy = fma(u_xlat2.zw, u_xlat30.xx, u_xlat4.xy);
            u_xlatb7 = (u_xlat4.xxxx>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb8 = (u_xlat4.xxxx<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati9 = int4((uint4(u_xlatb7) * 0xffffffffu) & (uint4(u_xlatb8) * 0xffffffffu));
            u_xlat9 = as_type<float4>(uint4(u_xlati9) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlatb10 = (u_xlat4.yyyy>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb4 = (u_xlat4.yyyy<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati11 = int4((uint4(u_xlatb4) * 0xffffffffu) & (uint4(u_xlatb10) * 0xffffffffu));
            u_xlat11 = as_type<float4>(uint4(u_xlati11) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow0_0, VGlobals._UDIMDiscardRow0_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow0_2, VGlobals._UDIMDiscardRow0_3);
            u_xlat4.x = dot(u_xlat12, u_xlat9);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow1_0, VGlobals._UDIMDiscardRow1_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow1_2, VGlobals._UDIMDiscardRow1_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat17.x = u_xlat17.x * u_xlat11.y;
            u_xlat4.x = fma(u_xlat11.x, u_xlat4.x, u_xlat17.x);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow2_0, VGlobals._UDIMDiscardRow2_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow2_2, VGlobals._UDIMDiscardRow2_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat4.x = fma(u_xlat11.z, u_xlat17.x, u_xlat4.x);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow3_0, VGlobals._UDIMDiscardRow3_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow3_2, VGlobals._UDIMDiscardRow3_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat4.x = fma(u_xlat11.w, u_xlat17.x, u_xlat4.x);
            u_xlatb8.x = u_xlatb10.x;
            u_xlatb8.y = u_xlatb4.w;
            u_xlatb8.z = u_xlatb7.x;
            u_xlat7 = select(float4(0.0, 0.0, 0.0, 0.0), float4(1.0, 1.0, 1.0, 1.0), bool4(u_xlatb8));
            u_xlat17.x = dot(u_xlat7, u_xlat7);
            u_xlatb17 = u_xlat17.x!=0.0;
            u_xlat17.x = u_xlatb17 ? 1.0 : float(0.0);
            u_xlat4.x = u_xlat17.x * u_xlat4.x;
            u_xlatb4.x = 0.00100000005<u_xlat4.x;
            u_xlatb42 = u_xlatb42 && u_xlatb4.x;
            u_xlati39 = int(uint(u_xlati39) | (uint(u_xlatb42) * 0xffffffffu));
            output.mtl_Position = (int(u_xlati39) != 0) ? float4(as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u))) : u_xlat5;
            u_xlati39 = int(bitFieldInsert(0x1u, 0x1u, uint(u_xlati19), 0x0u));
            u_xlati39 = int(bitFieldInsert(0x1u, 0x0u, uint(u_xlati6), uint(u_xlati39)));
            output.TEXCOORD2.w = float(u_xlati39);
            output.TEXCOORD0 = u_xlat1;
            output.TEXCOORD1 = u_xlat2;
            output.TEXCOORD2.xyz = u_xlat0.xyz;
            phase0_Output0_4.xyz = u_xlat3.xyz;
            phase0_Output0_5.w = 1.0;
        } else {
            output.mtl_Position = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD1 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_4 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_5 = float4(0.0, 0.0, 0.0, 0.0);
        }
    output.TEXCOORD3 = phase0_Output0_4.xyz;
    output.TEXCOORD5 = phase0_Output0_4.w;
    output.TEXCOORD6 = phase0_Output0_5.xyz;
    output.TEXCOORD7 = phase0_Output0_5.w;
        return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation failed: 

program_source:823:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:831:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
                             ^
program_source:832:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
                                               ^
program_source:1037:49: error: member reference base type 'uint' (aka 'unsigned int') is not a structure or union
                u_xlatu3 = input.cp[0].TEXCOORD8.x;
                           ~~~~~~~~~~~~~~~~~~~~~^~



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float3 NORMAL0 [[ attribute(9) ]] ;
    float4 TANGENT0 [[ attribute(10) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    uint mtl_VertexID,
    uint mtl_BaseVertex,
    Mtl_VertexIn input)
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseVertex = 0;
#endif
    mtl_VertexID = mtl_VertexID - mtl_BaseVertex;
    Mtl_VertexOut output;
    output.mtl_Position = input.POSITION0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = input.TEXCOORD1.xy;
    output.TEXCOORD2.xy = input.TEXCOORD2.xy;
    output.TEXCOORD3.xy = input.TEXCOORD3.xy;
    output.TEXCOORD4.xy = input.TEXCOORD4.xy;
    output.TEXCOORD5.xy = input.TEXCOORD5.xy;
    output.TEXCOORD6.xy = input.TEXCOORD6.xy;
    output.TEXCOORD7.xy = input.TEXCOORD7.xy;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TANGENT0 = input.TANGENT0;
    output.TEXCOORD8 = mtl_VertexID;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(11) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float3 NORMAL0 [[ attribute(9) ]] ;
    float4 TANGENT0 [[ attribute(10) ]] ;
    uint TEXCOORD8 [[ attribute(12) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
    float3 unity_LightColor0;
    float3 unity_LightColor1;
    float3 unity_LightColor2;
    float3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
    float4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _LightColor0;
    float4 _SpecColor;
    bool4 unity_MetaVertexControl;
    bool4 unity_MetaFragmentControl;
    int unity_VisualizationMode;
    float unity_OneOverOutputBoost;
    float unity_MaxOutputValue;
    float unity_UseLinearSpace;
    float4 _lilBackgroundTexture_TexelSize;
    float4 _LightDirectionOverride;
    float4 _BackfaceColor;
    float4 _Color;
    float4 _MainTex_ST;
    float4 _MainTex_ScrollRotate;
    float4 _MainTexHSVG;
    float4 _Color2nd;
    float4 _Main2ndTex_ST;
    float4 _Main2ndTex_ScrollRotate;
    float4 _Main2ndDistanceFade;
    float4 _Main2ndTexDecalAnimation;
    float4 _Main2ndTexDecalSubParam;
    float4 _Main2ndDissolveMask_ST;
    float4 _Main2ndDissolveColor;
    float4 _Main2ndDissolveParams;
    float4 _Main2ndDissolvePos;
    float4 _Main2ndDissolveNoiseMask_ST;
    float4 _Main2ndDissolveNoiseMask_ScrollRotate;
    float4 _Color3rd;
    float4 _Main3rdTex_ST;
    float4 _Main3rdTex_ScrollRotate;
    float4 _Main3rdDistanceFade;
    float4 _Main3rdTexDecalAnimation;
    float4 _Main3rdTexDecalSubParam;
    float4 _Main3rdDissolveMask_ST;
    float4 _Main3rdDissolveColor;
    float4 _Main3rdDissolveParams;
    float4 _Main3rdDissolvePos;
    float4 _Main3rdDissolveNoiseMask_ST;
    float4 _Main3rdDissolveNoiseMask_ScrollRotate;
    float4 _ShadowColor;
    float4 _Shadow2ndColor;
    float4 _Shadow3rdColor;
    float4 _ShadowBorderColor;
    float4 _ShadowAOShift;
    float4 _ShadowAOShift2;
    float4 _RimShadeColor;
    float4 _BacklightColor;
    float4 _BacklightColorTex_ST;
    float4 _EmissionColor;
    float4 _EmissionBlink;
    float4 _EmissionMap_ST;
    float4 _EmissionMap_ScrollRotate;
    float4 _EmissionBlendMask_ST;
    float4 _EmissionBlendMask_ScrollRotate;
    float4 _Emission2ndColor;
    float4 _Emission2ndBlink;
    float4 _Emission2ndMap_ST;
    float4 _Emission2ndMap_ScrollRotate;
    float4 _Emission2ndBlendMask_ST;
    float4 _Emission2ndBlendMask_ScrollRotate;
    float4 _BumpMap_ST;
    float4 _Bump2ndMap_ST;
    float4 _Bump2ndScaleMask_ST;
    float4 _AnisotropyTangentMap_ST;
    float4 _AnisotropyScaleMask_ST;
    float4 _AnisotropyShiftNoiseMask_ST;
    float4 _ReflectionColor;
    float4 _MetallicGlossMap_ST;
    float4 _ReflectionColorTex_ST;
    float4 _SmoothnessTex_ST;
    float4 _ReflectionCubeColor;
    float4 _ReflectionCubeTex_HDR;
    float4 _MatCapColor;
    float4 _MatCapTex_ST;
    float4 _MatCapBlendMask_ST;
    float4 _MatCapBlendUV1;
    float4 _MatCapBumpMap_ST;
    float4 _MatCap2ndColor;
    float4 _MatCap2ndTex_ST;
    float4 _MatCap2ndBlendMask_ST;
    float4 _MatCap2ndBlendUV1;
    float4 _MatCap2ndBumpMap_ST;
    float4 _RimColor;
    float4 _RimColorTex_ST;
    float4 _RimIndirColor;
    float4 _GlitterColor;
    float4 _GlitterColorTex_ST;
    float4 _GlitterParams1;
    float4 _GlitterParams2;
    float4 _GlitterShapeTex_ST;
    float4 _GlitterAtras;
    float4 _DistanceFade;
    float4 _DistanceFadeColor;
    float4 _DistanceFadeRimColor;
    float4 _DitherTex_TexelSize;
    float4 _AudioLinkMask_ST;
    float4 _AudioLinkMask_ScrollRotate;
    float4 _AudioLinkDefaultValue;
    float4 _AudioLinkUVParams;
    float4 _AudioLinkStart;
    float4 _AudioLinkVertexUVParams;
    float4 _AudioLinkVertexStart;
    float4 _AudioLinkVertexStrength;
    float4 _AudioLinkLocalMapParams;
    float4 _DissolveMask_ST;
    float4 _DissolveColor;
    float4 _DissolveParams;
    float4 _DissolvePos;
    float4 _DissolveNoiseMask_ST;
    float4 _DissolveNoiseMask_ScrollRotate;
    float4 _OutlineColor;
    float4 _OutlineLitColor;
    float4 _OutlineTex_ST;
    float4 _OutlineTex_ScrollRotate;
    float4 _OutlineTexHSVG;
    float _AsUnlit;
    float _Cutoff;
    float _SubpassCutoff;
    float _FlipNormal;
    float _ShiftBackfaceUV;
    float _VertexLightStrength;
    float _LightMinLimit;
    float _LightMaxLimit;
    float _MonochromeLighting;
    float _AAStrength;
    float _AlphaBoostFA;
    float _MainGradationStrength;
    float _Main2ndTexAngle;
    float _Main2ndEnableLighting;
    float _Main2ndDissolveNoiseStrength;
    float _Main3rdTexAngle;
    float _Main3rdEnableLighting;
    float _Main3rdDissolveNoiseStrength;
    float4 _AlphaMask_ST;
    float _AlphaMaskScale;
    float _AlphaMaskValue;
    float _BackfaceForceShadow;
    float _ShadowStrength;
    float _ShadowNormalStrength;
    float _ShadowBorder;
    float _ShadowBlur;
    float _ShadowStrengthMaskLOD;
    float _ShadowBorderMaskLOD;
    float _ShadowBlurMaskLOD;
    float _Shadow2ndNormalStrength;
    float _Shadow2ndBorder;
    float _Shadow2ndBlur;
    float _Shadow3rdNormalStrength;
    float _Shadow3rdBorder;
    float _Shadow3rdBlur;
    float _ShadowMainStrength;
    float _ShadowEnvStrength;
    float _ShadowBorderRange;
    float _ShadowReceive;
    float _Shadow2ndReceive;
    float _Shadow3rdReceive;
    float _ShadowFlatBlur;
    float _ShadowFlatBorder;
    float _RimShadeNormalStrength;
    float _RimShadeBorder;
    float _RimShadeBlur;
    float _RimShadeFresnelPower;
    float _BacklightNormalStrength;
    float _BacklightBorder;
    float _BacklightBlur;
    float _BacklightDirectivity;
    float _BacklightViewStrength;
    float _BacklightBackfaceMask;
    float _BacklightMainStrength;
    float _BumpScale;
    float _Bump2ndScale;
    float _AnisotropyScale;
    float _AnisotropyTangentWidth;
    float _AnisotropyBitangentWidth;
    float _AnisotropyShift;
    float _AnisotropyShiftNoiseScale;
    float _AnisotropySpecularStrength;
    float _Anisotropy2ndTangentWidth;
    float _Anisotropy2ndBitangentWidth;
    float _Anisotropy2ndShift;
    float _Anisotropy2ndShiftNoiseScale;
    float _Anisotropy2ndSpecularStrength;
    float _Reflectance;
    float _SpecularNormalStrength;
    float _SpecularBorder;
    float _SpecularBlur;
    float _ReflectionNormalStrength;
    float _ReflectionCubeEnableLighting;
    float _Smoothness;
    float _Metallic;
    float _GSAAStrength;
    float _MatCapBlend;
    float _MatCapEnableLighting;
    float _MatCapShadowMask;
    float _MatCapVRParallaxStrength;
    float _MatCapBackfaceMask;
    float _MatCapLod;
    float _MatCapNormalStrength;
    float _MatCapMainStrength;
    float _MatCapBumpScale;
    float _MatCap2ndBlend;
    float _MatCap2ndEnableLighting;
    float _MatCap2ndShadowMask;
    float _MatCap2ndVRParallaxStrength;
    float _MatCap2ndBackfaceMask;
    float _MatCap2ndLod;
    float _MatCap2ndNormalStrength;
    float _MatCap2ndMainStrength;
    float _MatCap2ndBumpScale;
    float _RimNormalStrength;
    float _RimBorder;
    float _RimBlur;
    float _RimFresnelPower;
    float _RimEnableLighting;
    float _RimShadowMask;
    float _RimVRParallaxStrength;
    float _RimBackfaceMask;
    float _RimMainStrength;
    float _RimDirStrength;
    float _RimDirRange;
    float _RimIndirRange;
    float _RimIndirBorder;
    float _RimIndirBlur;
    float _GlitterMainStrength;
    float _GlitterPostContrast;
    float _GlitterSensitivity;
    float _GlitterNormalStrength;
    float _GlitterEnableLighting;
    float _GlitterShadowMask;
    float _GlitterVRParallaxStrength;
    float _GlitterBackfaceMask;
    float _GlitterScaleRandomize;
    float _DistanceFadeRimFresnelPower;
    float _EmissionBlend;
    float _EmissionParallaxDepth;
    float _EmissionFluorescence;
    float _EmissionMainStrength;
    float _EmissionGradSpeed;
    float _Emission2ndBlend;
    float _Emission2ndParallaxDepth;
    float _Emission2ndFluorescence;
    float _Emission2ndMainStrength;
    float _Emission2ndGradSpeed;
    float _Parallax;
    float _ParallaxOffset;
    float _DitherMaxValue;
    float _AudioLink2EmissionGrad;
    float _AudioLink2Emission2ndGrad;
    float _DissolveNoiseStrength;
    float _IDMask1;
    float _IDMask2;
    float _IDMask3;
    float _IDMask4;
    float _IDMask5;
    float _IDMask6;
    float _IDMask7;
    float _IDMask8;
    float _IDMaskPrior1;
    float _IDMaskPrior2;
    float _IDMaskPrior3;
    float _IDMaskPrior4;
    float _IDMaskPrior5;
    float _IDMaskPrior6;
    float _IDMaskPrior7;
    float _IDMaskPrior8;
    float _UDIMDiscardCompile;
    float _UDIMDiscardMode;
    float _UDIMDiscardUV;
    float _UDIMDiscardRow3_0;
    float _UDIMDiscardRow3_1;
    float _UDIMDiscardRow3_2;
    float _UDIMDiscardRow3_3;
    float _UDIMDiscardRow2_0;
    float _UDIMDiscardRow2_1;
    float _UDIMDiscardRow2_2;
    float _UDIMDiscardRow2_3;
    float _UDIMDiscardRow1_0;
    float _UDIMDiscardRow1_1;
    float _UDIMDiscardRow1_2;
    float _UDIMDiscardRow1_3;
    float _UDIMDiscardRow0_0;
    float _UDIMDiscardRow0_1;
    float _UDIMDiscardRow0_2;
    float _UDIMDiscardRow0_3;
    float _lilShadowCasterBias;
    float _OutlineLitScale;
    float _OutlineLitOffset;
    float _OutlineWidth;
    float _OutlineEnableLighting;
    float _OutlineVectorScale;
    float _OutlineFixWidth;
    float _OutlineZBias;
    float _TessEdge;
    float _TessStrength;
    float _TessShrink;
    float _TessFactorMax;
    int _IDMaskIndex1;
    int _IDMaskIndex2;
    int _IDMaskIndex3;
    int _IDMaskIndex4;
    int _IDMaskIndex5;
    int _IDMaskIndex6;
    int _IDMaskIndex7;
    int _IDMaskIndex8;
    uint _IDMaskFrom;
    uint _IDMaskIsBitmap;
    uint _IDMaskControlsDissolve;
    uint _Cull;
    uint _OutlineCull;
    uint _Main2ndTexBlendMode;
    uint _Main2ndTexAlphaMode;
    uint _Main2ndTex_UVMode;
    uint _Main2ndTex_Cull;
    uint _Main3rdTexBlendMode;
    uint _Main3rdTexAlphaMode;
    uint _Main3rdTex_UVMode;
    uint _Main3rdTex_Cull;
    uint _AlphaMaskMode;
    uint _ShadowColorType;
    uint _ShadowMaskType;
    uint _Bump2ndMap_UVMode;
    uint _ReflectionBlendMode;
    uint _MatCapBlendMode;
    uint _MatCap2ndBlendMode;
    uint _RimBlendMode;
    uint _GlitterUVMode;
    uint _EmissionMap_UVMode;
    uint _EmissionBlendMode;
    uint _Emission2ndMap_UVMode;
    uint _Emission2ndBlendMode;
    uint _AudioLinkUVMode;
    uint _AudioLinkMask_UVMode;
    uint _AudioLinkVertexUVMode;
    uint _DistanceFadeMode;
    uint _UseDither;
    uint _OutlineVertexR2Width;
    uint _OutlineVectorUVMode;
    uint _Invisible;
    uint _UseMain2ndTex;
    uint _Main2ndTexIsMSDF;
    uint _Main2ndTexIsDecal;
    uint _Main2ndTexIsLeftOnly;
    uint _Main2ndTexIsRightOnly;
    uint _Main2ndTexShouldCopy;
    uint _Main2ndTexShouldFlipMirror;
    uint _Main2ndTexShouldFlipCopy;
    uint _UseMain3rdTex;
    uint _Main3rdTexIsMSDF;
    uint _Main3rdTexIsDecal;
    uint _Main3rdTexIsLeftOnly;
    uint _Main3rdTexIsRightOnly;
    uint _Main3rdTexShouldCopy;
    uint _Main3rdTexShouldFlipMirror;
    uint _Main3rdTexShouldFlipCopy;
    uint _UseShadow;
    uint _ShadowPostAO;
    uint _UseRimShade;
    uint _UseBacklight;
    uint _BacklightReceiveShadow;
    uint _UseBumpMap;
    uint _UseBump2ndMap;
    uint _UseAnisotropy;
    uint _Anisotropy2Reflection;
    uint _Anisotropy2MatCap;
    uint _Anisotropy2MatCap2nd;
    uint _UseReflection;
    uint _ApplySpecular;
    uint _ApplySpecularFA;
    uint _ApplyReflection;
    uint _SpecularToon;
    uint _ReflectionApplyTransparency;
    uint _ReflectionCubeOverride;
    uint _UseMatCap;
    uint _MatCapApplyTransparency;
    uint _MatCapPerspective;
    uint _MatCapZRotCancel;
    uint _MatCapCustomNormal;
    uint _UseMatCap2nd;
    uint _MatCap2ndApplyTransparency;
    uint _MatCap2ndPerspective;
    uint _MatCap2ndZRotCancel;
    uint _MatCap2ndCustomNormal;
    uint _UseRim;
    uint _RimApplyTransparency;
    uint _UseGlitter;
    uint _GlitterColorTex_UVMode;
    uint _GlitterApplyTransparency;
    uint _GlitterApplyShape;
    uint _GlitterAngleRandomize;
    uint _UseEmission;
    uint _EmissionUseGrad;
    uint _UseEmission2nd;
    uint _Emission2ndUseGrad;
    uint _UseParallax;
    uint _UsePOM;
    uint _UseAudioLink;
    uint _AudioLink2Main2nd;
    uint _AudioLink2Main3rd;
    uint _AudioLink2Emission;
    uint _AudioLink2Emission2nd;
    uint _AudioLink2Vertex;
    uint _AudioLinkAsLocal;
    uint _OutlineLitApplyTex;
    uint _OutlineLitShadowReceive;
    uint _OutlineDeleteMesh;
    uint _OutlineDisableInVR;
    float4 _AudioTexture_TexelSize;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    // mtl_VertexID generated in compute kernel,
    // mtl_BaseVertex generated in compute kernel,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(mtl_VertexID, mtl_BaseVertex, vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.TEXCOORD4 = input.cp[controlPointID].TEXCOORD4;
        output.TEXCOORD5 = input.cp[controlPointID].TEXCOORD5;
        output.TEXCOORD6 = input.cp[controlPointID].TEXCOORD6;
        output.TEXCOORD7 = input.cp[controlPointID].TEXCOORD7;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float4 u_xlat1;
    int2 u_xlati1;
    bool4 u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    bool2 u_xlatb3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float3 u_xlat11;
    float u_xlat22;
    bool2 u_xlatb23;
    int2 u_xlati24;
    bool2 u_xlatb24;
    float u_xlat33;
    float u_xlat34;
    // fork_phase2
    {
        if((VGlobals._Invisible)!=uint(0)){
            tessFactor.edgeTessellationFactor[0] = 0.0;
            tessFactor.edgeTessellationFactor[1] = 0.0;
            tessFactor.edgeTessellationFactor[2] = 0.0;
            tessFactor.insideTessellationFactor = 0.0;
            return;
        }
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].mtl_Position.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].mtl_Position.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].mtl_Position.zzz, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].mtl_Position.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].mtl_Position.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].mtl_Position.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat3.xyz = u_xlat2.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].mtl_Position.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].mtl_Position.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].mtl_Position.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat4.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat4.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat6.x = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
        u_xlat7.x = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat7.xyz = float3(u_xlat33) * u_xlat7.xyz;
        u_xlat8.x = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat8.y = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat8.z = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
        u_xlat9.xyz = u_xlat2.xyz + u_xlat4.xyz;
        u_xlat9.xyz = fma(u_xlat9.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat9.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
        u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.x = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat4.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat4.xyz;
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.y = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.z = max(u_xlat33, 1.0);
        u_xlat9.xyz = min(u_xlat9.xyz, float3(VGlobals._TessFactorMax));
        u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
        u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
        u_xlat11.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat34 = dot(u_xlat11.xyz, u_xlat11.xyz);
        u_xlat34 = rsqrt(u_xlat34);
        u_xlat11.xyz = u_xlat11.xyz * float3(u_xlat34);
        u_xlat0.y = dot(u_xlat7.xyz, u_xlat11.xyz);
        u_xlat2.xyz = (-u_xlat4.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat22 = rsqrt(u_xlat22);
        u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
        u_xlat0.z = dot(u_xlat8.xyz, u_xlat2.xyz);
        u_xlat2.xyz = abs(u_xlat0.zxy) + abs(u_xlat0.yzx);
        u_xlat0.xyz = fma((-u_xlat2.xyz), float3(0.5, 0.5, 0.5), float3(1.0, 1.0, 1.0));
        u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
        u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xyz;
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat34 = u_xlat0.y + u_xlat0.x;
        u_xlat34 = u_xlat0.z + u_xlat34;
        u_xlat0.w = u_xlat34 * 0.333333343;
        u_xlat1.xy = u_xlat1.xy / abs(u_xlat1.zz);
        u_xlat1.zw = u_xlat3.xy / abs(u_xlat3.zz);
        u_xlat2.xy = u_xlat5.xy / abs(u_xlat5.zz);
        u_xlatb24.xy = (float2(1.00999999, 1.00999999)<u_xlat1.xy);
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat1.zw);
        u_xlati24.xy = int2((uint2(u_xlatb24.xy) * 0xffffffffu) & (uint2(u_xlatb3.xy) * 0xffffffffu));
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat2.xy);
        u_xlati24.xy = int2((uint2(u_xlatb3.xy) * 0xffffffffu) & uint2(u_xlati24.xy));
        u_xlatb1 = (u_xlat1<float4(-1.00999999, -1.00999999, -1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb1.zw) * 0xffffffffu) & (uint2(u_xlatb1.xy) * 0xffffffffu));
        u_xlatb23.xy = (u_xlat2.xy<float2(-1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb23.xy) * 0xffffffffu) & uint2(u_xlati1.xy));
        u_xlati1.x = int(uint(u_xlati1.x) | uint(u_xlati24.x));
        u_xlati1.x = int(uint(u_xlati24.y) | uint(u_xlati1.x));
        u_xlati1.x = int(uint(u_xlati1.y) | uint(u_xlati1.x));
        u_xlat0 = (u_xlati1.x != 0) ? float4(0.0, 0.0, 0.0, 0.0) : u_xlat0;
        tessFactor.edgeTessellationFactor[0] = u_xlat0.x;
        tessFactor.edgeTessellationFactor[1] = u_xlat0.y;
        tessFactor.edgeTessellationFactor[2] = u_xlat0.z;
        tessFactor.insideTessellationFactor = u_xlat0.w;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float TEXCOORD9 [[ user(TEXCOORD9) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
		template <typename UVecType> UVecType bitFieldInsert(const UVecType width, const UVecType offset, const UVecType src2, const UVecType src3)
		{
			UVecType bitmask = (((UVecType(1) << width)-1) << offset) & 0xffffffff;
			return ((src2 << offset) & bitmask) | (src3 & ~bitmask);
		}; 
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    // mtl_VertexID unused,
    // mtl_BaseVertex unused,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    texture2d<float, access::sample > _AudioLinkLocalMap [[ texture(0) ]] ,
    texture2d<float, access::sample > _AudioTexture [[ texture(1) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    constexpr sampler lil_sampler_trilinear_repeat(filter::linear,mip_filter::linear,address::repeat);
    constexpr sampler lil_sampler_linear_clamp(filter::linear,mip_filter::nearest,address::clamp_to_edge);
        float4 phase0_Input0_1[3];
        phase0_Input0_1[2] = float4(input.cp[2].TEXCOORD0, input.cp[2].TEXCOORD1);
        phase0_Input0_1[1] = float4(input.cp[1].TEXCOORD0, input.cp[1].TEXCOORD1);
        phase0_Input0_1[0] = float4(input.cp[0].TEXCOORD0, input.cp[0].TEXCOORD1);
        float4 phase0_Input0_2[3];
        phase0_Input0_2[2] = float4(input.cp[2].TEXCOORD2, input.cp[2].TEXCOORD3);
        phase0_Input0_2[1] = float4(input.cp[1].TEXCOORD2, input.cp[1].TEXCOORD3);
        phase0_Input0_2[0] = float4(input.cp[0].TEXCOORD2, input.cp[0].TEXCOORD3);
    float4 phase0_Output0_4;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    int3 u_xlati3;
    uint u_xlatu3;
    bool u_xlatb3;
    float4 u_xlat4;
    int u_xlati4;
    float3 u_xlat5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    bool4 u_xlatb7;
    float4 u_xlat8;
    int4 u_xlati8;
    bool4 u_xlatb8;
    float4 u_xlat9;
    int4 u_xlati9;
    float4 u_xlat10;
    bool4 u_xlatb10;
    bool4 u_xlatb11;
    float4 u_xlat12;
    int4 u_xlati12;
    float4 u_xlat13;
    float u_xlat17;
    int u_xlati17;
    uint u_xlatu17;
    bool u_xlatb17;
    int u_xlati18;
    float2 u_xlat31;
    int2 u_xlati31;
    uint u_xlatu31;
    bool u_xlatb31;
    float u_xlat32;
    bool u_xlatb32;
    float2 u_xlat33;
    int u_xlati33;
    bool u_xlatb33;
    float u_xlat42;
    float u_xlat45;
    bool u_xlatb45;
    if((VGlobals._Invisible)==uint(0)){
        u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].mtl_Position.xyz;
        u_xlat0.xyz = fma(mtl_TessCoord.xxx, input.cp[0].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat0.xyz = fma(mtl_TessCoord.zzz, input.cp[2].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat1 = mtl_TessCoord.yyyy * phase0_Input0_1[1];
        u_xlat1 = fma(mtl_TessCoord.xxxx, phase0_Input0_1[0], u_xlat1);
        u_xlat1 = fma(mtl_TessCoord.zzzz, phase0_Input0_1[2], u_xlat1);
        u_xlat2 = mtl_TessCoord.yyyy * phase0_Input0_2[1];
        u_xlat2 = fma(mtl_TessCoord.xxxx, phase0_Input0_2[0], u_xlat2);
        u_xlat2 = fma(mtl_TessCoord.zzzz, phase0_Input0_2[2], u_xlat2);
        u_xlat3.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
        u_xlat3.xyz = fma(mtl_TessCoord.xxx, input.cp[0].NORMAL0.xyz, u_xlat3.xyz);
        u_xlat3.xyz = fma(mtl_TessCoord.zzz, input.cp[2].NORMAL0.xyz, u_xlat3.xyz);
        u_xlat4 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
        u_xlat4 = fma(mtl_TessCoord.xxxx, input.cp[0].TANGENT0, u_xlat4);
        u_xlat4 = fma(mtl_TessCoord.zzzz, input.cp[2].TANGENT0, u_xlat4);
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat3.xyz = float3(u_xlat42) * u_xlat3.xyz;
        u_xlat42 = dot(input.cp[0].mtl_Position.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat5.xyz = float3(u_xlat42) * input.cp[0].NORMAL0.xyz;
        u_xlat42 = dot(input.cp[1].mtl_Position.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat6.xyz = float3(u_xlat42) * input.cp[1].NORMAL0.xyz;
        u_xlat42 = dot(input.cp[2].mtl_Position.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat7.xyz = float3(u_xlat42) * input.cp[2].NORMAL0.xyz;
        u_xlat6.xyz = u_xlat6.xyz * mtl_TessCoord.yyy;
        u_xlat5.xyz = fma(u_xlat5.xyz, mtl_TessCoord.xxx, u_xlat6.xyz);
        u_xlat5.xyz = fma(u_xlat7.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
        u_xlat0.xyz = fma(u_xlat5.xyz, float3(VGlobals._TessStrength), u_xlat0.xyz);
        u_xlatb45 = int(VGlobals._UseAudioLink)!=0x0;
        u_xlatb5.x = int(VGlobals._AudioLink2Vertex)!=0x0;
        u_xlatb45 = u_xlatb45 && u_xlatb5.x;
        if(u_xlatb45){
            u_xlatb5.xy = (int2(VGlobals._AudioLinkVertexUVMode)==int2(0x1, 0x2));
            u_xlat6.xyz = u_xlat0.xyz + (-VGlobals._AudioLinkVertexStart.xyz);
            u_xlat45 = dot(u_xlat6.xyz, u_xlat6.xyz);
            u_xlat45 = sqrt(u_xlat45);
            u_xlat45 = fma(u_xlat45, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat45 = (u_xlatb5.x) ? u_xlat45 : VGlobals._AudioLinkVertexUVParams.y;
            u_xlat5.x = sin(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat6.x = cos(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat33.xy = u_xlat1.xy + float2(-0.5, -0.5);
            u_xlat5.x = u_xlat5.x * u_xlat33.y;
            u_xlat5.x = fma(u_xlat33.x, u_xlat6.x, (-u_xlat5.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = fma(u_xlat5.x, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat5.x = (u_xlatb5.y) ? u_xlat5.x : u_xlat45;
            if((VGlobals._AudioLinkAsLocal)!=uint(0)){
                u_xlat45 = (-VGlobals._Time.y) * VGlobals._AudioLinkLocalMapParams.x;
                u_xlat45 = u_xlat45 * VGlobals._AudioLinkLocalMapParams.y;
                u_xlat45 = u_xlat45 * 0.0166666675;
                u_xlat45 = fract(u_xlat45);
                u_xlat45 = u_xlat45 + VGlobals._AudioLinkLocalMapParams.z;
                u_xlat6.x = u_xlat45 + u_xlat5.x;
                u_xlat6.y = VGlobals._AudioLinkVertexUVParams.w;
                u_xlat45 = _AudioLinkLocalMap.sample(lil_sampler_trilinear_repeat, u_xlat6.xy, level(0.0)).x;
            } else {
                u_xlat33.x = float(_AudioTexture.get_width(0x0));
                u_xlati33 = int(u_xlat33.x);
                u_xlatb33 = 0x10<u_xlati33;
                if(u_xlatb33){
                    u_xlat5.y = VGlobals._AudioLinkVertexUVParams.w * 0.0625;
                    u_xlat45 = _AudioTexture.sample(lil_sampler_linear_clamp, u_xlat5.xy, level(0.0)).x;
                    u_xlat45 = u_xlat45;
                    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
                } else {
                    u_xlat5.x = fma(VGlobals._Time.y, VGlobals._AudioLinkDefaultValue.z, (-u_xlat5.x));
                    u_xlat5.x = fract(u_xlat5.x);
                    u_xlat5.x = u_xlat5.x + VGlobals._AudioLinkDefaultValue.w;
                    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
                    u_xlat5.x = u_xlat5.x * VGlobals._AudioLinkDefaultValue.y;
                    u_xlat45 = fma((-u_xlat5.x), VGlobals._AudioLinkDefaultValue.x, VGlobals._AudioLinkDefaultValue.x);
                    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
                }
            }
            u_xlat5.xyz = fma(u_xlat3.xyz, VGlobals._AudioLinkVertexStrength.www, VGlobals._AudioLinkVertexStrength.xyz);
            u_xlat0.xyz = fma(u_xlat5.xyz, float3(u_xlat45), u_xlat0.xyz);
        }
        u_xlat5.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat6 = u_xlat5.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
        u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat5.xxxx, u_xlat6);
        u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat5.zzzz, u_xlat6);
        u_xlat6 = u_xlat6 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
        u_xlat7.x = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        output.TEXCOORD4.xyz = u_xlat3.xxx * u_xlat7.xyz;
        u_xlat3.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat4.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat4.zzz, u_xlat3.xyz);
        u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat45 = rsqrt(u_xlat45);
        output.TEXCOORD5.xyz = float3(u_xlat45) * u_xlat3.xyz;
        switch(int(int(VGlobals._IDMaskFrom))){
            case 0x0:
                u_xlatu3 = uint(u_xlat1.x);
                break;
            case 0x1:
                u_xlatu3 = uint(u_xlat1.z);
                break;
            case 0x2:
                u_xlatu3 = uint(u_xlat2.x);
                break;
            case 0x3:
                u_xlatu3 = uint(u_xlat2.z);
                break;
            case 0x4:
                u_xlat17 = mtl_TessCoord.y * input.cp[1].TEXCOORD4.x;
                u_xlat17 = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD4.x, u_xlat17);
                u_xlat17 = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD4.x, u_xlat17);
                u_xlatu3 = uint(u_xlat17);
                break;
            case 0x5:
                u_xlat17 = mtl_TessCoord.y * input.cp[1].TEXCOORD5.x;
                u_xlat17 = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD5.x, u_xlat17);
                u_xlat17 = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD5.x, u_xlat17);
                u_xlatu3 = uint(u_xlat17);
                break;
            case 0x6:
                u_xlat17 = mtl_TessCoord.y * input.cp[1].TEXCOORD6.x;
                u_xlat17 = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD6.x, u_xlat17);
                u_xlat17 = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD6.x, u_xlat17);
                u_xlatu3 = uint(u_xlat17);
                break;
            case 0x7:
                u_xlat17 = mtl_TessCoord.y * input.cp[1].TEXCOORD7.x;
                u_xlat17 = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD7.x, u_xlat17);
                u_xlat17 = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD7.x, u_xlat17);
                u_xlatu3 = uint(u_xlat17);
                break;
            default:
                u_xlatu3 = input.cp[0].TEXCOORD8.x;
                break;
            }
            if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                u_xlat7.x = rint(VGlobals._IDMask1);
                u_xlat7.yzw = rint(float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4));
                u_xlat17 = dot(u_xlat7, float4(1.0, 2.0, 4.0, 8.0));
                u_xlat7.x = rint(VGlobals._IDMask5);
                u_xlat7.yzw = rint(float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8));
                u_xlat31.x = dot(u_xlat7, float4(16.0, 32.0, 64.0, 128.0));
                u_xlat17 = u_xlat31.x + u_xlat17;
                u_xlatu17 = uint(u_xlat17);
                u_xlatb31 = int(u_xlatu3)!=0x0;
                u_xlati17 = int(u_xlatu3 & u_xlatu17);
                u_xlatb17 = int(u_xlatu3)==u_xlati17;
                u_xlati17 = int((uint(u_xlatb17) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            } else {
                u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                u_xlat7.xy = float2(u_xlati31.yx);
                u_xlati8 = int4(u_xlatu3) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                u_xlat8 = float4(u_xlati8.wxyz);
                u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                u_xlat31.xy = float2(u_xlati31.xy);
                u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                u_xlat7.x = (-u_xlat7.x);
                u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                u_xlat8 = (-u_xlat8);
                u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                u_xlat9.zw = u_xlat10.zw;
                u_xlat7.yzw = u_xlat8.yzw;
                u_xlat7 = u_xlat7 * u_xlat9;
                u_xlat10.zw = u_xlat31.xy + float2(1.0, 1.0);
                u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                u_xlat8.yz = (-u_xlat31.xy);
                u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                u_xlat8.w = 1.0;
                u_xlat8 = u_xlat8 * u_xlat10;
                u_xlat9.x = VGlobals._IDMask1;
                u_xlat9.yzw = float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4);
                u_xlat31.x = dot(u_xlat7, u_xlat9);
                u_xlat7.x = VGlobals._IDMask5;
                u_xlat7.yzw = float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8);
                u_xlat45 = dot(u_xlat8, u_xlat7);
                u_xlat31.x = u_xlat45 + u_xlat31.x;
                u_xlati17 = int((float(0.0)!=u_xlat31.x) ? 0xFFFFFFFFu : uint(0));
            }
            if((VGlobals._IDMaskControlsDissolve)!=uint(0)){
                if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                    u_xlat7.x = rint(VGlobals._IDMaskPrior1);
                    u_xlat7.yzw = rint(float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4));
                    u_xlat31.x = dot(u_xlat7, float4(1.0, 2.0, 4.0, 8.0));
                    u_xlat7.x = rint(VGlobals._IDMaskPrior5);
                    u_xlat7.yzw = rint(float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8));
                    u_xlat45 = dot(u_xlat7, float4(16.0, 32.0, 64.0, 128.0));
                    u_xlat31.x = u_xlat45 + u_xlat31.x;
                    u_xlatu31 = uint(u_xlat31.x);
                    u_xlatb45 = int(u_xlatu3)!=0x0;
                    u_xlati31.x = int(u_xlatu3 & u_xlatu31);
                    u_xlatb31 = int(u_xlatu3)==u_xlati31.x;
                    u_xlati18 = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb45) * 0xffffffffu));
                } else {
                    u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                    u_xlat7.xy = float2(u_xlati31.yx);
                    u_xlati8 = int4(u_xlatu3) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                    u_xlat8 = float4(u_xlati8.wxyz);
                    u_xlati3.xz = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                    u_xlat3.xz = float2(u_xlati3.xz);
                    u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                    u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                    u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                    u_xlat7.x = (-u_xlat7.x);
                    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                    u_xlat8 = (-u_xlat8);
                    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                    u_xlat9.zw = u_xlat10.zw;
                    u_xlat7.yzw = u_xlat8.yzw;
                    u_xlat7 = u_xlat7 * u_xlat9;
                    u_xlat10.zw = u_xlat3.xz + float2(1.0, 1.0);
                    u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                    u_xlat8.yz = (-u_xlat3.xz);
                    u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                    u_xlat8.w = 1.0;
                    u_xlat8 = u_xlat8 * u_xlat10;
                    u_xlat9.x = VGlobals._IDMaskPrior1;
                    u_xlat9.yzw = float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4);
                    u_xlat3.x = dot(u_xlat7, u_xlat9);
                    u_xlat7.x = VGlobals._IDMaskPrior5;
                    u_xlat7.yzw = float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8);
                    u_xlat31.x = dot(u_xlat8, u_xlat7);
                    u_xlat3.x = u_xlat31.x + u_xlat3.x;
                    u_xlati18 = int((float(0.0)!=u_xlat3.x) ? 0xFFFFFFFFu : uint(0));
                }
                u_xlati4 = int((u_xlati17!=u_xlati18) ? 0xFFFFFFFFu : uint(0));
                u_xlati17 = int(uint(u_xlati17) & uint(u_xlati18));
            } else {
                u_xlati4 = int(int(0xffffffffu));
                u_xlati18 = int(0x0);
            }
            u_xlatb7 = (float4(VGlobals._UDIMDiscardMode, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV)==float4(0.0, 0.0, 1.0, 2.0));
            u_xlatb3 = VGlobals._UDIMDiscardCompile==1.0;
            u_xlatb3 = u_xlatb3 && u_xlatb7.x;
            u_xlat7.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb7.yzw));
            u_xlat8 = u_xlat1 * u_xlat7.xxyy;
            u_xlat31.xy = u_xlat8.zw + u_xlat8.xy;
            u_xlat31.xy = fma(u_xlat2.xy, u_xlat7.zz, u_xlat31.xy);
            u_xlatb32 = VGlobals._UDIMDiscardUV==3.0;
            u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);
            u_xlat31.xy = fma(u_xlat2.zw, float2(u_xlat32), u_xlat31.xy);
            u_xlatb7 = (u_xlat31.xxxx>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb8 = (u_xlat31.xxxx<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati9 = int4((uint4(u_xlatb7) * 0xffffffffu) & (uint4(u_xlatb8) * 0xffffffffu));
            u_xlat9 = as_type<float4>(uint4(u_xlati9) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlatb10 = (u_xlat31.yyyy>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb11 = (u_xlat31.yyyy<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati12 = int4((uint4(u_xlatb10) * 0xffffffffu) & (uint4(u_xlatb11) * 0xffffffffu));
            u_xlat12 = as_type<float4>(uint4(u_xlati12) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow0_0, VGlobals._UDIMDiscardRow0_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow0_2, VGlobals._UDIMDiscardRow0_3);
            u_xlat31.x = dot(u_xlat13, u_xlat9);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow1_0, VGlobals._UDIMDiscardRow1_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow1_2, VGlobals._UDIMDiscardRow1_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat45 = u_xlat45 * u_xlat12.y;
            u_xlat31.x = fma(u_xlat12.x, u_xlat31.x, u_xlat45);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow2_0, VGlobals._UDIMDiscardRow2_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow2_2, VGlobals._UDIMDiscardRow2_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat31.x = fma(u_xlat12.z, u_xlat45, u_xlat31.x);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow3_0, VGlobals._UDIMDiscardRow3_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow3_2, VGlobals._UDIMDiscardRow3_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat31.x = fma(u_xlat12.w, u_xlat45, u_xlat31.x);
            u_xlatb8.x = u_xlatb10.x;
            u_xlatb8.y = u_xlatb11.w;
            u_xlatb8.z = u_xlatb7.x;
            u_xlat7 = select(float4(0.0, 0.0, 0.0, 0.0), float4(1.0, 1.0, 1.0, 1.0), bool4(u_xlatb8));
            u_xlat45 = dot(u_xlat7, u_xlat7);
            u_xlatb45 = u_xlat45!=0.0;
            u_xlat45 = u_xlatb45 ? 1.0 : float(0.0);
            u_xlat31.x = u_xlat45 * u_xlat31.x;
            u_xlatb31 = 0.00100000005<u_xlat31.x;
            u_xlatb3 = u_xlatb31 && u_xlatb3;
            u_xlati3.x = int((uint(u_xlatb3) * 0xffffffffu) | uint(u_xlati17));
            output.mtl_Position = (u_xlati3.x != 0) ? float4(as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u))) : u_xlat6;
            u_xlati3.x = int(bitFieldInsert(0x1u, 0x1u, uint(u_xlati18), 0x0u));
            u_xlati3.x = int(bitFieldInsert(0x1u, 0x0u, uint(u_xlati4), uint(u_xlati3.x)));
            u_xlat0.w = float(u_xlati3.x);
            output.TEXCOORD0 = u_xlat1;
            output.TEXCOORD1 = u_xlat2;
            output.TEXCOORD2 = u_xlat0;
            phase0_Output0_4.xyz = u_xlat5.xyz;
            phase0_Output0_4.w = 1.0;
            output.TEXCOORD5.w = u_xlat4.w;
        } else {
            output.mtl_Position = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD1 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_4 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD4.xyz = float3(0.0, 0.0, 0.0);
        }
    output.TEXCOORD3 = phase0_Output0_4.xyz;
    output.TEXCOORD9 = phase0_Output0_4.w;
        return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation failed: 

program_source:828:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:838:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
                             ^
program_source:839:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
                                               ^
program_source:1142:50: error: member reference base type 'uint' (aka 'unsigned int') is not a structure or union
                u_xlatu42 = input.cp[0].TEXCOORD8.x;
                            ~~~~~~~~~~~~~~~~~~~~~^~



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float4 COLOR0 [[ attribute(9) ]] ;
    float3 NORMAL0 [[ attribute(10) ]] ;
    float4 TANGENT0 [[ attribute(11) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    uint mtl_VertexID,
    uint mtl_BaseVertex,
    Mtl_VertexIn input)
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseVertex = 0;
#endif
    mtl_VertexID = mtl_VertexID - mtl_BaseVertex;
    Mtl_VertexOut output;
    output.mtl_Position = input.POSITION0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = input.TEXCOORD1.xy;
    output.TEXCOORD2.xy = input.TEXCOORD2.xy;
    output.TEXCOORD3.xy = input.TEXCOORD3.xy;
    output.TEXCOORD4.xy = input.TEXCOORD4.xy;
    output.TEXCOORD5.xy = input.TEXCOORD5.xy;
    output.TEXCOORD6.xy = input.TEXCOORD6.xy;
    output.TEXCOORD7.xy = input.TEXCOORD7.xy;
    output.COLOR0 = input.COLOR0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TANGENT0 = input.TANGENT0;
    output.TEXCOORD8 = mtl_VertexID;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(12) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float4 COLOR0 [[ attribute(9) ]] ;
    float3 NORMAL0 [[ attribute(10) ]] ;
    float4 TANGENT0 [[ attribute(11) ]] ;
    uint TEXCOORD8 [[ attribute(13) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
    float3 unity_LightColor0;
    float3 unity_LightColor1;
    float3 unity_LightColor2;
    float3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
    float4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _LightColor0;
    float4 _SpecColor;
    bool4 unity_MetaVertexControl;
    bool4 unity_MetaFragmentControl;
    int unity_VisualizationMode;
    float unity_OneOverOutputBoost;
    float unity_MaxOutputValue;
    float unity_UseLinearSpace;
    float4 _lilBackgroundTexture_TexelSize;
    float4 _LightDirectionOverride;
    float4 _BackfaceColor;
    float4 _Color;
    float4 _MainTex_ST;
    float4 _MainTex_ScrollRotate;
    float4 _MainTexHSVG;
    float4 _Color2nd;
    float4 _Main2ndTex_ST;
    float4 _Main2ndTex_ScrollRotate;
    float4 _Main2ndDistanceFade;
    float4 _Main2ndTexDecalAnimation;
    float4 _Main2ndTexDecalSubParam;
    float4 _Main2ndDissolveMask_ST;
    float4 _Main2ndDissolveColor;
    float4 _Main2ndDissolveParams;
    float4 _Main2ndDissolvePos;
    float4 _Main2ndDissolveNoiseMask_ST;
    float4 _Main2ndDissolveNoiseMask_ScrollRotate;
    float4 _Color3rd;
    float4 _Main3rdTex_ST;
    float4 _Main3rdTex_ScrollRotate;
    float4 _Main3rdDistanceFade;
    float4 _Main3rdTexDecalAnimation;
    float4 _Main3rdTexDecalSubParam;
    float4 _Main3rdDissolveMask_ST;
    float4 _Main3rdDissolveColor;
    float4 _Main3rdDissolveParams;
    float4 _Main3rdDissolvePos;
    float4 _Main3rdDissolveNoiseMask_ST;
    float4 _Main3rdDissolveNoiseMask_ScrollRotate;
    float4 _ShadowColor;
    float4 _Shadow2ndColor;
    float4 _Shadow3rdColor;
    float4 _ShadowBorderColor;
    float4 _ShadowAOShift;
    float4 _ShadowAOShift2;
    float4 _RimShadeColor;
    float4 _BacklightColor;
    float4 _BacklightColorTex_ST;
    float4 _EmissionColor;
    float4 _EmissionBlink;
    float4 _EmissionMap_ST;
    float4 _EmissionMap_ScrollRotate;
    float4 _EmissionBlendMask_ST;
    float4 _EmissionBlendMask_ScrollRotate;
    float4 _Emission2ndColor;
    float4 _Emission2ndBlink;
    float4 _Emission2ndMap_ST;
    float4 _Emission2ndMap_ScrollRotate;
    float4 _Emission2ndBlendMask_ST;
    float4 _Emission2ndBlendMask_ScrollRotate;
    float4 _BumpMap_ST;
    float4 _Bump2ndMap_ST;
    float4 _Bump2ndScaleMask_ST;
    float4 _AnisotropyTangentMap_ST;
    float4 _AnisotropyScaleMask_ST;
    float4 _AnisotropyShiftNoiseMask_ST;
    float4 _ReflectionColor;
    float4 _MetallicGlossMap_ST;
    float4 _ReflectionColorTex_ST;
    float4 _SmoothnessTex_ST;
    float4 _ReflectionCubeColor;
    float4 _ReflectionCubeTex_HDR;
    float4 _MatCapColor;
    float4 _MatCapTex_ST;
    float4 _MatCapBlendMask_ST;
    float4 _MatCapBlendUV1;
    float4 _MatCapBumpMap_ST;
    float4 _MatCap2ndColor;
    float4 _MatCap2ndTex_ST;
    float4 _MatCap2ndBlendMask_ST;
    float4 _MatCap2ndBlendUV1;
    float4 _MatCap2ndBumpMap_ST;
    float4 _RimColor;
    float4 _RimColorTex_ST;
    float4 _RimIndirColor;
    float4 _GlitterColor;
    float4 _GlitterColorTex_ST;
    float4 _GlitterParams1;
    float4 _GlitterParams2;
    float4 _GlitterShapeTex_ST;
    float4 _GlitterAtras;
    float4 _DistanceFade;
    float4 _DistanceFadeColor;
    float4 _DistanceFadeRimColor;
    float4 _DitherTex_TexelSize;
    float4 _AudioLinkMask_ST;
    float4 _AudioLinkMask_ScrollRotate;
    float4 _AudioLinkDefaultValue;
    float4 _AudioLinkUVParams;
    float4 _AudioLinkStart;
    float4 _AudioLinkVertexUVParams;
    float4 _AudioLinkVertexStart;
    float4 _AudioLinkVertexStrength;
    float4 _AudioLinkLocalMapParams;
    float4 _DissolveMask_ST;
    float4 _DissolveColor;
    float4 _DissolveParams;
    float4 _DissolvePos;
    float4 _DissolveNoiseMask_ST;
    float4 _DissolveNoiseMask_ScrollRotate;
    float4 _OutlineColor;
    float4 _OutlineLitColor;
    float4 _OutlineTex_ST;
    float4 _OutlineTex_ScrollRotate;
    float4 _OutlineTexHSVG;
    float _AsUnlit;
    float _Cutoff;
    float _SubpassCutoff;
    float _FlipNormal;
    float _ShiftBackfaceUV;
    float _VertexLightStrength;
    float _LightMinLimit;
    float _LightMaxLimit;
    float _MonochromeLighting;
    float _AAStrength;
    float _AlphaBoostFA;
    float _MainGradationStrength;
    float _Main2ndTexAngle;
    float _Main2ndEnableLighting;
    float _Main2ndDissolveNoiseStrength;
    float _Main3rdTexAngle;
    float _Main3rdEnableLighting;
    float _Main3rdDissolveNoiseStrength;
    float4 _AlphaMask_ST;
    float _AlphaMaskScale;
    float _AlphaMaskValue;
    float _BackfaceForceShadow;
    float _ShadowStrength;
    float _ShadowNormalStrength;
    float _ShadowBorder;
    float _ShadowBlur;
    float _ShadowStrengthMaskLOD;
    float _ShadowBorderMaskLOD;
    float _ShadowBlurMaskLOD;
    float _Shadow2ndNormalStrength;
    float _Shadow2ndBorder;
    float _Shadow2ndBlur;
    float _Shadow3rdNormalStrength;
    float _Shadow3rdBorder;
    float _Shadow3rdBlur;
    float _ShadowMainStrength;
    float _ShadowEnvStrength;
    float _ShadowBorderRange;
    float _ShadowReceive;
    float _Shadow2ndReceive;
    float _Shadow3rdReceive;
    float _ShadowFlatBlur;
    float _ShadowFlatBorder;
    float _RimShadeNormalStrength;
    float _RimShadeBorder;
    float _RimShadeBlur;
    float _RimShadeFresnelPower;
    float _BacklightNormalStrength;
    float _BacklightBorder;
    float _BacklightBlur;
    float _BacklightDirectivity;
    float _BacklightViewStrength;
    float _BacklightBackfaceMask;
    float _BacklightMainStrength;
    float _BumpScale;
    float _Bump2ndScale;
    float _AnisotropyScale;
    float _AnisotropyTangentWidth;
    float _AnisotropyBitangentWidth;
    float _AnisotropyShift;
    float _AnisotropyShiftNoiseScale;
    float _AnisotropySpecularStrength;
    float _Anisotropy2ndTangentWidth;
    float _Anisotropy2ndBitangentWidth;
    float _Anisotropy2ndShift;
    float _Anisotropy2ndShiftNoiseScale;
    float _Anisotropy2ndSpecularStrength;
    float _Reflectance;
    float _SpecularNormalStrength;
    float _SpecularBorder;
    float _SpecularBlur;
    float _ReflectionNormalStrength;
    float _ReflectionCubeEnableLighting;
    float _Smoothness;
    float _Metallic;
    float _GSAAStrength;
    float _MatCapBlend;
    float _MatCapEnableLighting;
    float _MatCapShadowMask;
    float _MatCapVRParallaxStrength;
    float _MatCapBackfaceMask;
    float _MatCapLod;
    float _MatCapNormalStrength;
    float _MatCapMainStrength;
    float _MatCapBumpScale;
    float _MatCap2ndBlend;
    float _MatCap2ndEnableLighting;
    float _MatCap2ndShadowMask;
    float _MatCap2ndVRParallaxStrength;
    float _MatCap2ndBackfaceMask;
    float _MatCap2ndLod;
    float _MatCap2ndNormalStrength;
    float _MatCap2ndMainStrength;
    float _MatCap2ndBumpScale;
    float _RimNormalStrength;
    float _RimBorder;
    float _RimBlur;
    float _RimFresnelPower;
    float _RimEnableLighting;
    float _RimShadowMask;
    float _RimVRParallaxStrength;
    float _RimBackfaceMask;
    float _RimMainStrength;
    float _RimDirStrength;
    float _RimDirRange;
    float _RimIndirRange;
    float _RimIndirBorder;
    float _RimIndirBlur;
    float _GlitterMainStrength;
    float _GlitterPostContrast;
    float _GlitterSensitivity;
    float _GlitterNormalStrength;
    float _GlitterEnableLighting;
    float _GlitterShadowMask;
    float _GlitterVRParallaxStrength;
    float _GlitterBackfaceMask;
    float _GlitterScaleRandomize;
    float _DistanceFadeRimFresnelPower;
    float _EmissionBlend;
    float _EmissionParallaxDepth;
    float _EmissionFluorescence;
    float _EmissionMainStrength;
    float _EmissionGradSpeed;
    float _Emission2ndBlend;
    float _Emission2ndParallaxDepth;
    float _Emission2ndFluorescence;
    float _Emission2ndMainStrength;
    float _Emission2ndGradSpeed;
    float _Parallax;
    float _ParallaxOffset;
    float _DitherMaxValue;
    float _AudioLink2EmissionGrad;
    float _AudioLink2Emission2ndGrad;
    float _DissolveNoiseStrength;
    float _IDMask1;
    float _IDMask2;
    float _IDMask3;
    float _IDMask4;
    float _IDMask5;
    float _IDMask6;
    float _IDMask7;
    float _IDMask8;
    float _IDMaskPrior1;
    float _IDMaskPrior2;
    float _IDMaskPrior3;
    float _IDMaskPrior4;
    float _IDMaskPrior5;
    float _IDMaskPrior6;
    float _IDMaskPrior7;
    float _IDMaskPrior8;
    float _UDIMDiscardCompile;
    float _UDIMDiscardMode;
    float _UDIMDiscardUV;
    float _UDIMDiscardRow3_0;
    float _UDIMDiscardRow3_1;
    float _UDIMDiscardRow3_2;
    float _UDIMDiscardRow3_3;
    float _UDIMDiscardRow2_0;
    float _UDIMDiscardRow2_1;
    float _UDIMDiscardRow2_2;
    float _UDIMDiscardRow2_3;
    float _UDIMDiscardRow1_0;
    float _UDIMDiscardRow1_1;
    float _UDIMDiscardRow1_2;
    float _UDIMDiscardRow1_3;
    float _UDIMDiscardRow0_0;
    float _UDIMDiscardRow0_1;
    float _UDIMDiscardRow0_2;
    float _UDIMDiscardRow0_3;
    float _lilShadowCasterBias;
    float _OutlineLitScale;
    float _OutlineLitOffset;
    float _OutlineWidth;
    float _OutlineEnableLighting;
    float _OutlineVectorScale;
    float _OutlineFixWidth;
    float _OutlineZBias;
    float _TessEdge;
    float _TessStrength;
    float _TessShrink;
    float _TessFactorMax;
    int _IDMaskIndex1;
    int _IDMaskIndex2;
    int _IDMaskIndex3;
    int _IDMaskIndex4;
    int _IDMaskIndex5;
    int _IDMaskIndex6;
    int _IDMaskIndex7;
    int _IDMaskIndex8;
    uint _IDMaskFrom;
    uint _IDMaskIsBitmap;
    uint _IDMaskControlsDissolve;
    uint _Cull;
    uint _OutlineCull;
    uint _Main2ndTexBlendMode;
    uint _Main2ndTexAlphaMode;
    uint _Main2ndTex_UVMode;
    uint _Main2ndTex_Cull;
    uint _Main3rdTexBlendMode;
    uint _Main3rdTexAlphaMode;
    uint _Main3rdTex_UVMode;
    uint _Main3rdTex_Cull;
    uint _AlphaMaskMode;
    uint _ShadowColorType;
    uint _ShadowMaskType;
    uint _Bump2ndMap_UVMode;
    uint _ReflectionBlendMode;
    uint _MatCapBlendMode;
    uint _MatCap2ndBlendMode;
    uint _RimBlendMode;
    uint _GlitterUVMode;
    uint _EmissionMap_UVMode;
    uint _EmissionBlendMode;
    uint _Emission2ndMap_UVMode;
    uint _Emission2ndBlendMode;
    uint _AudioLinkUVMode;
    uint _AudioLinkMask_UVMode;
    uint _AudioLinkVertexUVMode;
    uint _DistanceFadeMode;
    uint _UseDither;
    uint _OutlineVertexR2Width;
    uint _OutlineVectorUVMode;
    uint _Invisible;
    uint _UseMain2ndTex;
    uint _Main2ndTexIsMSDF;
    uint _Main2ndTexIsDecal;
    uint _Main2ndTexIsLeftOnly;
    uint _Main2ndTexIsRightOnly;
    uint _Main2ndTexShouldCopy;
    uint _Main2ndTexShouldFlipMirror;
    uint _Main2ndTexShouldFlipCopy;
    uint _UseMain3rdTex;
    uint _Main3rdTexIsMSDF;
    uint _Main3rdTexIsDecal;
    uint _Main3rdTexIsLeftOnly;
    uint _Main3rdTexIsRightOnly;
    uint _Main3rdTexShouldCopy;
    uint _Main3rdTexShouldFlipMirror;
    uint _Main3rdTexShouldFlipCopy;
    uint _UseShadow;
    uint _ShadowPostAO;
    uint _UseRimShade;
    uint _UseBacklight;
    uint _BacklightReceiveShadow;
    uint _UseBumpMap;
    uint _UseBump2ndMap;
    uint _UseAnisotropy;
    uint _Anisotropy2Reflection;
    uint _Anisotropy2MatCap;
    uint _Anisotropy2MatCap2nd;
    uint _UseReflection;
    uint _ApplySpecular;
    uint _ApplySpecularFA;
    uint _ApplyReflection;
    uint _SpecularToon;
    uint _ReflectionApplyTransparency;
    uint _ReflectionCubeOverride;
    uint _UseMatCap;
    uint _MatCapApplyTransparency;
    uint _MatCapPerspective;
    uint _MatCapZRotCancel;
    uint _MatCapCustomNormal;
    uint _UseMatCap2nd;
    uint _MatCap2ndApplyTransparency;
    uint _MatCap2ndPerspective;
    uint _MatCap2ndZRotCancel;
    uint _MatCap2ndCustomNormal;
    uint _UseRim;
    uint _RimApplyTransparency;
    uint _UseGlitter;
    uint _GlitterColorTex_UVMode;
    uint _GlitterApplyTransparency;
    uint _GlitterApplyShape;
    uint _GlitterAngleRandomize;
    uint _UseEmission;
    uint _EmissionUseGrad;
    uint _UseEmission2nd;
    uint _Emission2ndUseGrad;
    uint _UseParallax;
    uint _UsePOM;
    uint _UseAudioLink;
    uint _AudioLink2Main2nd;
    uint _AudioLink2Main3rd;
    uint _AudioLink2Emission;
    uint _AudioLink2Emission2nd;
    uint _AudioLink2Vertex;
    uint _AudioLinkAsLocal;
    uint _OutlineLitApplyTex;
    uint _OutlineLitShadowReceive;
    uint _OutlineDeleteMesh;
    uint _OutlineDisableInVR;
    float4 _AudioTexture_TexelSize;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    // mtl_VertexID generated in compute kernel,
    // mtl_BaseVertex generated in compute kernel,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(mtl_VertexID, mtl_BaseVertex, vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.TEXCOORD4 = input.cp[controlPointID].TEXCOORD4;
        output.TEXCOORD5 = input.cp[controlPointID].TEXCOORD5;
        output.TEXCOORD6 = input.cp[controlPointID].TEXCOORD6;
        output.TEXCOORD7 = input.cp[controlPointID].TEXCOORD7;
        output.COLOR0 = input.cp[controlPointID].COLOR0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float4 u_xlat1;
    int2 u_xlati1;
    bool4 u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    bool2 u_xlatb3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float3 u_xlat11;
    float u_xlat22;
    bool2 u_xlatb23;
    int2 u_xlati24;
    bool2 u_xlatb24;
    float u_xlat33;
    float u_xlat34;
    // fork_phase2
    {
        if((VGlobals._Invisible)!=uint(0)){
            tessFactor.edgeTessellationFactor[0] = 0.0;
            tessFactor.edgeTessellationFactor[1] = 0.0;
            tessFactor.edgeTessellationFactor[2] = 0.0;
            tessFactor.insideTessellationFactor = 0.0;
            return;
        }
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].mtl_Position.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].mtl_Position.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].mtl_Position.zzz, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].mtl_Position.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].mtl_Position.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].mtl_Position.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat3.xyz = u_xlat2.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].mtl_Position.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].mtl_Position.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].mtl_Position.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat4.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat4.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat6.x = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
        u_xlat7.x = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat7.xyz = float3(u_xlat33) * u_xlat7.xyz;
        u_xlat8.x = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat8.y = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat8.z = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
        u_xlat9.xyz = u_xlat2.xyz + u_xlat4.xyz;
        u_xlat9.xyz = fma(u_xlat9.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat9.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
        u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.x = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat4.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat4.xyz;
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.y = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.z = max(u_xlat33, 1.0);
        u_xlat9.xyz = min(u_xlat9.xyz, float3(VGlobals._TessFactorMax));
        u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
        u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
        u_xlat11.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat34 = dot(u_xlat11.xyz, u_xlat11.xyz);
        u_xlat34 = rsqrt(u_xlat34);
        u_xlat11.xyz = u_xlat11.xyz * float3(u_xlat34);
        u_xlat0.y = dot(u_xlat7.xyz, u_xlat11.xyz);
        u_xlat2.xyz = (-u_xlat4.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat22 = rsqrt(u_xlat22);
        u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
        u_xlat0.z = dot(u_xlat8.xyz, u_xlat2.xyz);
        u_xlat2.xyz = abs(u_xlat0.zxy) + abs(u_xlat0.yzx);
        u_xlat0.xyz = fma((-u_xlat2.xyz), float3(0.5, 0.5, 0.5), float3(1.0, 1.0, 1.0));
        u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
        u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xyz;
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat34 = u_xlat0.y + u_xlat0.x;
        u_xlat34 = u_xlat0.z + u_xlat34;
        u_xlat0.w = u_xlat34 * 0.333333343;
        u_xlat1.xy = u_xlat1.xy / abs(u_xlat1.zz);
        u_xlat1.zw = u_xlat3.xy / abs(u_xlat3.zz);
        u_xlat2.xy = u_xlat5.xy / abs(u_xlat5.zz);
        u_xlatb24.xy = (float2(1.00999999, 1.00999999)<u_xlat1.xy);
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat1.zw);
        u_xlati24.xy = int2((uint2(u_xlatb24.xy) * 0xffffffffu) & (uint2(u_xlatb3.xy) * 0xffffffffu));
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat2.xy);
        u_xlati24.xy = int2((uint2(u_xlatb3.xy) * 0xffffffffu) & uint2(u_xlati24.xy));
        u_xlatb1 = (u_xlat1<float4(-1.00999999, -1.00999999, -1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb1.zw) * 0xffffffffu) & (uint2(u_xlatb1.xy) * 0xffffffffu));
        u_xlatb23.xy = (u_xlat2.xy<float2(-1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb23.xy) * 0xffffffffu) & uint2(u_xlati1.xy));
        u_xlati1.x = int(uint(u_xlati1.x) | uint(u_xlati24.x));
        u_xlati1.x = int(uint(u_xlati24.y) | uint(u_xlati1.x));
        u_xlati1.x = int(uint(u_xlati1.y) | uint(u_xlati1.x));
        u_xlat0 = (u_xlati1.x != 0) ? float4(0.0, 0.0, 0.0, 0.0) : u_xlat0;
        tessFactor.edgeTessellationFactor[0] = u_xlat0.x;
        tessFactor.edgeTessellationFactor[1] = u_xlat0.y;
        tessFactor.edgeTessellationFactor[2] = u_xlat0.z;
        tessFactor.insideTessellationFactor = u_xlat0.w;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float TEXCOORD7 [[ user(TEXCOORD7) ]];
};
		template <typename UVecType> UVecType bitFieldInsert(const UVecType width, const UVecType offset, const UVecType src2, const UVecType src3)
		{
			UVecType bitmask = (((UVecType(1) << width)-1) << offset) & 0xffffffff;
			return ((src2 << offset) & bitmask) | (src3 & ~bitmask);
		}; 
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    // mtl_VertexID unused,
    // mtl_BaseVertex unused,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    texture2d<float, access::sample > _AudioLinkLocalMap [[ texture(0) ]] ,
    texture2d<float, access::sample > _OutlineWidthMask [[ texture(1) ]] ,
    texture2d<float, access::sample > _OutlineVectorTex [[ texture(2) ]] ,
    texture2d<float, access::sample > _AudioTexture [[ texture(3) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    constexpr sampler lil_sampler_trilinear_repeat(filter::linear,mip_filter::linear,address::repeat);
    constexpr sampler lil_sampler_linear_clamp(filter::linear,mip_filter::nearest,address::clamp_to_edge);
        float4 phase0_Input0_1[3];
        phase0_Input0_1[2] = float4(input.cp[2].TEXCOORD0, input.cp[2].TEXCOORD1);
        phase0_Input0_1[1] = float4(input.cp[1].TEXCOORD0, input.cp[1].TEXCOORD1);
        phase0_Input0_1[0] = float4(input.cp[0].TEXCOORD0, input.cp[0].TEXCOORD1);
        float4 phase0_Input0_2[3];
        phase0_Input0_2[2] = float4(input.cp[2].TEXCOORD2, input.cp[2].TEXCOORD3);
        phase0_Input0_2[1] = float4(input.cp[1].TEXCOORD2, input.cp[1].TEXCOORD3);
        phase0_Input0_2[0] = float4(input.cp[0].TEXCOORD2, input.cp[0].TEXCOORD3);
    float4 phase0_Output0_4;
    float3 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    int u_xlati4;
    uint u_xlatu4;
    bool4 u_xlatb4;
    float4 u_xlat5;
    float4 u_xlat6;
    int u_xlati6;
    bool2 u_xlatb6;
    float4 u_xlat7;
    int4 u_xlati7;
    bool4 u_xlatb7;
    float4 u_xlat8;
    int4 u_xlati8;
    bool4 u_xlatb8;
    float4 u_xlat9;
    int4 u_xlati9;
    float4 u_xlat10;
    bool4 u_xlatb10;
    float4 u_xlat11;
    int4 u_xlati11;
    float4 u_xlat12;
    bool u_xlatb13;
    float3 u_xlat16;
    float3 u_xlat17;
    int2 u_xlati17;
    uint u_xlatu17;
    bool u_xlatb17;
    int u_xlati19;
    float2 u_xlat21;
    bool u_xlatb26;
    float2 u_xlat30;
    bool u_xlatb30;
    bool2 u_xlatb32;
    float u_xlat39;
    int u_xlati39;
    bool u_xlatb39;
    float u_xlat42;
    uint u_xlatu42;
    bool u_xlatb42;
    float u_xlat43;
    int u_xlati43;
    uint u_xlatu43;
    bool u_xlatb43;
    float4 TempArray0[4];
    u_xlatb0 = int(VGlobals._Invisible)!=0x0;
    u_xlatb13 = int(VGlobals._OutlineDisableInVR)!=0x0;
    u_xlatb26 = 9.99999997e-07<abs(VGlobals.hlslcc_mtx4x4glstate_matrix_projection[2].x);
    u_xlatb13 = u_xlatb26 && u_xlatb13;
    u_xlatb0 = u_xlatb13 || u_xlatb0;
    if(!u_xlatb0){
        u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].mtl_Position.xyz;
        u_xlat0.xyz = fma(mtl_TessCoord.xxx, input.cp[0].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat0.xyz = fma(mtl_TessCoord.zzz, input.cp[2].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat1 = mtl_TessCoord.yyyy * phase0_Input0_1[1];
        u_xlat1 = fma(mtl_TessCoord.xxxx, phase0_Input0_1[0], u_xlat1);
        u_xlat1 = fma(mtl_TessCoord.zzzz, phase0_Input0_1[2], u_xlat1);
        u_xlat2 = mtl_TessCoord.yyyy * phase0_Input0_2[1];
        u_xlat2 = fma(mtl_TessCoord.xxxx, phase0_Input0_2[0], u_xlat2);
        u_xlat2 = fma(mtl_TessCoord.zzzz, phase0_Input0_2[2], u_xlat2);
        u_xlat3 = mtl_TessCoord.yyyy * input.cp[1].COLOR0;
        u_xlat3 = fma(mtl_TessCoord.xxxx, input.cp[0].COLOR0, u_xlat3);
        u_xlat3 = fma(mtl_TessCoord.zzzz, input.cp[2].COLOR0, u_xlat3);
        u_xlat4.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
        u_xlat4.xyz = fma(mtl_TessCoord.xxx, input.cp[0].NORMAL0.xyz, u_xlat4.xyz);
        u_xlat4.xyz = fma(mtl_TessCoord.zzz, input.cp[2].NORMAL0.xyz, u_xlat4.xyz);
        u_xlat5 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
        u_xlat5 = fma(mtl_TessCoord.xxxx, input.cp[0].TANGENT0, u_xlat5);
        u_xlat5 = fma(mtl_TessCoord.zzzz, input.cp[2].TANGENT0, u_xlat5);
        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat39 = rsqrt(u_xlat39);
        u_xlat4.xyz = float3(u_xlat39) * u_xlat4.xyz;
        u_xlat39 = dot(input.cp[0].mtl_Position.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat6.xyz = float3(u_xlat39) * input.cp[0].NORMAL0.xyz;
        u_xlat39 = dot(input.cp[1].mtl_Position.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat7.xyz = float3(u_xlat39) * input.cp[1].NORMAL0.xyz;
        u_xlat39 = dot(input.cp[2].mtl_Position.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat8.xyz = float3(u_xlat39) * input.cp[2].NORMAL0.xyz;
        u_xlat7.xyz = u_xlat7.xyz * mtl_TessCoord.yyy;
        u_xlat6.xyz = fma(u_xlat6.xyz, mtl_TessCoord.xxx, u_xlat7.xyz);
        u_xlat6.xyz = fma(u_xlat8.xyz, mtl_TessCoord.zzz, u_xlat6.xyz);
        u_xlat0.xyz = fma(u_xlat6.xyz, float3(VGlobals._TessStrength), u_xlat0.xyz);
        u_xlat6.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
        u_xlat7.xyz = u_xlat5.yzx * u_xlat4.zxy;
        u_xlat7.xyz = fma(u_xlat4.yzx, u_xlat5.zxy, (-u_xlat7.xyz));
        u_xlat39 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat39 = rsqrt(u_xlat39);
        u_xlat7.xyz = float3(u_xlat39) * u_xlat7.xyz;
        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat39 = sqrt(u_xlat39);
        u_xlat39 = u_xlat39 * u_xlat5.w;
        u_xlat7.xyz = float3(u_xlat39) * u_xlat7.xyz;
        u_xlatb39 = int(VGlobals._UseAudioLink)!=0x0;
        u_xlatb43 = int(VGlobals._AudioLink2Vertex)!=0x0;
        u_xlatb39 = u_xlatb39 && u_xlatb43;
        if(u_xlatb39){
            u_xlatb32.xy = (int2(VGlobals._AudioLinkVertexUVMode)==int2(0x1, 0x2));
            u_xlat8.xyz = u_xlat0.xyz + (-VGlobals._AudioLinkVertexStart.xyz);
            u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat39 = sqrt(u_xlat39);
            u_xlat39 = fma(u_xlat39, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat39 = (u_xlatb32.x) ? u_xlat39 : VGlobals._AudioLinkVertexUVParams.y;
            u_xlat8.x = sin(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat9.x = cos(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat21.xy = u_xlat1.xy + float2(-0.5, -0.5);
            u_xlat43 = u_xlat8.x * u_xlat21.y;
            u_xlat43 = fma(u_xlat21.x, u_xlat9.x, (-u_xlat43));
            u_xlat43 = u_xlat43 + 0.5;
            u_xlat43 = fma(u_xlat43, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat8.x = (u_xlatb32.y) ? u_xlat43 : u_xlat39;
            if((VGlobals._AudioLinkAsLocal)!=uint(0)){
                u_xlat39 = (-VGlobals._Time.y) * VGlobals._AudioLinkLocalMapParams.x;
                u_xlat39 = u_xlat39 * VGlobals._AudioLinkLocalMapParams.y;
                u_xlat39 = u_xlat39 * 0.0166666675;
                u_xlat39 = fract(u_xlat39);
                u_xlat39 = u_xlat39 + VGlobals._AudioLinkLocalMapParams.z;
                u_xlat9.x = u_xlat39 + u_xlat8.x;
                u_xlat9.y = VGlobals._AudioLinkVertexUVParams.w;
                u_xlat39 = _AudioLinkLocalMap.sample(lil_sampler_trilinear_repeat, u_xlat9.xy, level(0.0)).x;
            } else {
                u_xlat43 = float(_AudioTexture.get_width(0x0));
                u_xlati43 = int(u_xlat43);
                u_xlatb43 = 0x10<u_xlati43;
                if(u_xlatb43){
                    u_xlat8.y = VGlobals._AudioLinkVertexUVParams.w * 0.0625;
                    u_xlat39 = _AudioTexture.sample(lil_sampler_linear_clamp, u_xlat8.xy, level(0.0)).x;
                    u_xlat39 = u_xlat39;
                    u_xlat39 = clamp(u_xlat39, 0.0f, 1.0f);
                } else {
                    u_xlat43 = fma(VGlobals._Time.y, VGlobals._AudioLinkDefaultValue.z, (-u_xlat8.x));
                    u_xlat43 = fract(u_xlat43);
                    u_xlat43 = u_xlat43 + VGlobals._AudioLinkDefaultValue.w;
                    u_xlat43 = clamp(u_xlat43, 0.0f, 1.0f);
                    u_xlat43 = u_xlat43 * VGlobals._AudioLinkDefaultValue.y;
                    u_xlat39 = fma((-u_xlat43), VGlobals._AudioLinkDefaultValue.x, VGlobals._AudioLinkDefaultValue.x);
                    u_xlat39 = clamp(u_xlat39, 0.0f, 1.0f);
                }
            }
            u_xlat8.xyz = fma(u_xlat4.xyz, VGlobals._AudioLinkVertexStrength.www, VGlobals._AudioLinkVertexStrength.xyz);
            u_xlat0.xyz = fma(u_xlat8.xyz, float3(u_xlat39), u_xlat0.xyz);
        }
        TempArray0[0].xy = u_xlat6.xy;
        TempArray0[1].xy = u_xlat1.zw;
        TempArray0[2].xy = u_xlat2.xy;
        TempArray0[3].xy = u_xlat2.zw;
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz);
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, u_xlat0.yyy, u_xlat8.xyz);
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat8.xyz);
        u_xlat39 = VGlobals._OutlineWidth * 0.00999999978;
        u_xlat43 = _OutlineWidthMask.sample(lil_sampler_trilinear_repeat, u_xlat6.xy, level(0.0)).x;
        u_xlat39 = u_xlat39 * u_xlat43;
        u_xlatb6.xy = (int2(VGlobals._OutlineVertexR2Width)==int2(0x1, 0x2));
        u_xlat43 = u_xlat3.x * u_xlat39;
        u_xlat39 = (u_xlatb6.x) ? u_xlat43 : u_xlat39;
        u_xlat42 = u_xlat3.w * u_xlat39;
        u_xlat39 = (u_xlatb6.y) ? u_xlat42 : u_xlat39;
        u_xlat6.xzw = (-u_xlat8.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat42 = dot(u_xlat6.xzw, u_xlat6.xzw);
        u_xlat42 = sqrt(u_xlat42);
        u_xlat42 = min(u_xlat42, 1.0);
        u_xlat42 = u_xlat42 + -1.0;
        u_xlat42 = fma(VGlobals._OutlineFixWidth, u_xlat42, 1.0);
        u_xlat42 = u_xlat39 * u_xlat42;
        u_xlatu43 = VGlobals._OutlineVectorUVMode;
        u_xlat6.xz = TempArray0[int(u_xlatu43)].xy;
        u_xlat6.xzw = _OutlineVectorTex.sample(lil_sampler_trilinear_repeat, u_xlat6.xz, level(0.0)).xyw;
        u_xlat6.x = u_xlat6.x * u_xlat6.w;
        u_xlat6.xz = fma(u_xlat6.xz, float2(2.0, 2.0), float2(-1.0, -1.0));
        u_xlat6.xz = u_xlat6.xz * float2(VGlobals._OutlineVectorScale);
        u_xlat43 = dot(u_xlat6.xz, u_xlat6.xz);
        u_xlat43 = min(u_xlat43, 1.0);
        u_xlat43 = (-u_xlat43) + 1.0;
        u_xlat43 = sqrt(u_xlat43);
        u_xlat8.xyz = u_xlat7.xyz * u_xlat6.zzz;
        u_xlat6.xzw = fma(u_xlat6.xxx, u_xlat5.xyz, u_xlat8.xyz);
        u_xlat6.xzw = fma(float3(u_xlat43), u_xlat4.xyz, u_xlat6.xzw);
        u_xlat3.xyz = fma(u_xlat3.xyz, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
        u_xlat7.xyz = u_xlat7.xyz * u_xlat3.yyy;
        u_xlat5.xyz = fma(u_xlat3.xxx, u_xlat5.xyz, u_xlat7.xyz);
        u_xlat3.xyz = fma(u_xlat3.zzz, u_xlat4.xyz, u_xlat5.xyz);
        u_xlat3.xyz = (u_xlatb6.y) ? u_xlat3.xyz : u_xlat6.xzw;
        u_xlat0.xyz = fma(u_xlat3.xyz, float3(u_xlat42), u_xlat0.xyz);
        u_xlatb3 = VGlobals.unity_OrthoParams.w==0.0;
        u_xlat16.xyz = VGlobals._WorldSpaceCameraPos.xyzx.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz;
        u_xlat16.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz, VGlobals._WorldSpaceCameraPos.xyzx.xxx, u_xlat16.xyz);
        u_xlat16.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz, VGlobals._WorldSpaceCameraPos.xyzx.zzz, u_xlat16.xyz);
        u_xlat16.xyz = u_xlat16.xyz + VGlobals.hlslcc_mtx4x4unity_WorldToObject[3].xyz;
        u_xlat16.xyz = (-u_xlat0.xyz) + u_xlat16.xyz;
        u_xlat5.xyz = VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].zzz;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz, VGlobals.hlslcc_mtx4x4unity_MatrixV[0].zzz, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz, VGlobals.hlslcc_mtx4x4unity_MatrixV[2].zzz, u_xlat5.xyz);
        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat16.xyz : u_xlat5.xyz;
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat3.xyz = float3(u_xlat42) * u_xlat3.xyz;
        u_xlat0.xyz = fma((-u_xlat3.xyz), float3(VGlobals._OutlineZBias), u_xlat0.xyz);
        u_xlat3.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
        u_xlat5 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat5);
        u_xlat5 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat5);
        u_xlat5 = u_xlat5 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
        u_xlat6.x = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat4.xyz = float3(u_xlat42) * u_xlat6.xyz;
        u_xlat17.xz = u_xlat4.yy * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].xy;
        u_xlat4.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].xy, u_xlat4.xx, u_xlat17.xz);
        u_xlat4.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].xy, u_xlat4.zz, u_xlat4.xy);
        u_xlat42 = dot(u_xlat4.xy, u_xlat4.xy);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat4.xy = float2(u_xlat42) * u_xlat4.xy;
        u_xlat6.xyz = fma((-u_xlat3.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat6.xyz = float3(u_xlat42) * u_xlat6.xyz;
        u_xlat30.xy = u_xlat6.yy * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].xy;
        u_xlat30.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].xy, u_xlat6.xx, u_xlat30.xy);
        u_xlat30.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].xy, u_xlat6.zz, u_xlat30.xy);
        u_xlat42 = dot(u_xlat30.xy, u_xlat30.xy);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat30.xy = float2(u_xlat42) * u_xlat30.xy;
        u_xlat42 = dot(u_xlat4.xy, u_xlat30.xy);
        phase0_Output0_4.w = fma(u_xlat42, 0.5, 0.5);
        u_xlatb42 = -9.99999997e-07<u_xlat39;
        u_xlatb39 = u_xlat39<9.99999997e-07;
        u_xlatb39 = u_xlatb39 && u_xlatb42;
        u_xlatb42 = int(VGlobals._OutlineDeleteMesh)!=0x0;
        u_xlatb39 = u_xlatb39 && u_xlatb42;
        switch(int(int(VGlobals._IDMaskFrom))){
            case 0x0:
                u_xlatu42 = uint(u_xlat1.x);
                break;
            case 0x1:
                u_xlatu42 = uint(u_xlat1.z);
                break;
            case 0x2:
                u_xlatu42 = uint(u_xlat2.x);
                break;
            case 0x3:
                u_xlatu42 = uint(u_xlat2.z);
                break;
            case 0x4:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD4.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD4.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD4.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x5:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD5.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD5.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD5.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x6:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD6.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD6.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD6.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x7:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD7.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD7.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD7.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            default:
                u_xlatu42 = input.cp[0].TEXCOORD8.x;
                break;
            }
            if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                u_xlat4.x = rint(VGlobals._IDMask1);
                u_xlat4.yzw = rint(float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4));
                u_xlat4.x = dot(u_xlat4, float4(1.0, 2.0, 4.0, 8.0));
                u_xlat6.x = rint(VGlobals._IDMask5);
                u_xlat6.yzw = rint(float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8));
                u_xlat17.x = dot(u_xlat6, float4(16.0, 32.0, 64.0, 128.0));
                u_xlat4.x = u_xlat17.x + u_xlat4.x;
                u_xlatu4 = uint(u_xlat4.x);
                u_xlatb17 = int(u_xlatu42)!=0x0;
                u_xlati4 = int(u_xlatu42 & u_xlatu4);
                u_xlatb4.x = int(u_xlatu42)==u_xlati4;
                u_xlati4 = int((uint(u_xlatb4.x) * 0xffffffffu) & (uint(u_xlatb17) * 0xffffffffu));
            } else {
                u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                u_xlat6.xy = float2(u_xlati17.yx);
                u_xlati7 = int4(u_xlatu42) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                u_xlat7 = float4(u_xlati7.wxyz);
                u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                u_xlat17.xy = float2(u_xlati17.xy);
                u_xlat8.xy = u_xlat6.yx + float2(1.0, 1.0);
                u_xlat8.xy = clamp(u_xlat8.xy, 0.0f, 1.0f);
                u_xlat9 = u_xlat7.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
                u_xlat6.x = (-u_xlat6.x);
                u_xlat6.x = clamp(u_xlat6.x, 0.0f, 1.0f);
                u_xlat7 = (-u_xlat7);
                u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
                u_xlat8.zw = u_xlat9.zw;
                u_xlat6.yzw = u_xlat7.yzw;
                u_xlat6 = u_xlat6 * u_xlat8;
                u_xlat9.zw = u_xlat17.xy + float2(1.0, 1.0);
                u_xlat9.zw = clamp(u_xlat9.zw, 0.0f, 1.0f);
                u_xlat7.yz = (-u_xlat17.xy);
                u_xlat7.yz = clamp(u_xlat7.yz, 0.0f, 1.0f);
                u_xlat7.w = 1.0;
                u_xlat7 = u_xlat7 * u_xlat9;
                u_xlat8.x = VGlobals._IDMask1;
                u_xlat8.yzw = float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4);
                u_xlat17.x = dot(u_xlat6, u_xlat8);
                u_xlat6.x = VGlobals._IDMask5;
                u_xlat6.yzw = float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8);
                u_xlat30.x = dot(u_xlat7, u_xlat6);
                u_xlat17.x = u_xlat30.x + u_xlat17.x;
                u_xlati4 = int((float(0.0)!=u_xlat17.x) ? 0xFFFFFFFFu : uint(0));
            }
            if((VGlobals._IDMaskControlsDissolve)!=uint(0)){
                if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                    u_xlat6.x = rint(VGlobals._IDMaskPrior1);
                    u_xlat6.yzw = rint(float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4));
                    u_xlat17.x = dot(u_xlat6, float4(1.0, 2.0, 4.0, 8.0));
                    u_xlat6.x = rint(VGlobals._IDMaskPrior5);
                    u_xlat6.yzw = rint(float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8));
                    u_xlat30.x = dot(u_xlat6, float4(16.0, 32.0, 64.0, 128.0));
                    u_xlat17.x = u_xlat30.x + u_xlat17.x;
                    u_xlatu17 = uint(u_xlat17.x);
                    u_xlatb30 = int(u_xlatu42)!=0x0;
                    u_xlati17.x = int(u_xlatu42 & u_xlatu17);
                    u_xlatb17 = int(u_xlatu42)==u_xlati17.x;
                    u_xlati19 = int((uint(u_xlatb17) * 0xffffffffu) & (uint(u_xlatb30) * 0xffffffffu));
                } else {
                    u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                    u_xlat7.xy = float2(u_xlati17.yx);
                    u_xlati8 = int4(u_xlatu42) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                    u_xlat8 = float4(u_xlati8.wxyz);
                    u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                    u_xlat17.xy = float2(u_xlati17.xy);
                    u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                    u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                    u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                    u_xlat7.x = (-u_xlat7.x);
                    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                    u_xlat8 = (-u_xlat8);
                    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                    u_xlat9.zw = u_xlat10.zw;
                    u_xlat7.yzw = u_xlat8.yzw;
                    u_xlat7 = u_xlat7 * u_xlat9;
                    u_xlat10.zw = u_xlat17.xy + float2(1.0, 1.0);
                    u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                    u_xlat8.yz = (-u_xlat17.xy);
                    u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                    u_xlat8.w = 1.0;
                    u_xlat8 = u_xlat8 * u_xlat10;
                    u_xlat9.x = VGlobals._IDMaskPrior1;
                    u_xlat9.yzw = float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4);
                    u_xlat42 = dot(u_xlat7, u_xlat9);
                    u_xlat7.x = VGlobals._IDMaskPrior5;
                    u_xlat7.yzw = float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8);
                    u_xlat17.x = dot(u_xlat8, u_xlat7);
                    u_xlat42 = u_xlat42 + u_xlat17.x;
                    u_xlati19 = int((float(0.0)!=u_xlat42) ? 0xFFFFFFFFu : uint(0));
                }
                u_xlati6 = int((u_xlati4!=u_xlati19) ? 0xFFFFFFFFu : uint(0));
                u_xlati4 = int(uint(u_xlati4) & uint(u_xlati19));
            } else {
                u_xlati6 = int(int(0xffffffffu));
                u_xlati19 = int(0x0);
            }
            u_xlati39 = int((uint(u_xlatb39) * 0xffffffffu) | uint(u_xlati4));
            u_xlatb4 = (float4(VGlobals._UDIMDiscardMode, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV)==float4(0.0, 0.0, 1.0, 2.0));
            u_xlatb42 = VGlobals._UDIMDiscardCompile==1.0;
            u_xlatb42 = u_xlatb42 && u_xlatb4.x;
            u_xlat4.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb4.yzw));
            u_xlat7 = u_xlat1 * u_xlat4.xxyy;
            u_xlat4.xy = u_xlat7.zw + u_xlat7.xy;
            u_xlat4.xy = fma(u_xlat2.xy, u_xlat4.zz, u_xlat4.xy);
            u_xlatb30 = VGlobals._UDIMDiscardUV==3.0;
            u_xlat30.x = u_xlatb30 ? 1.0 : float(0.0);
            u_xlat4.xy = fma(u_xlat2.zw, u_xlat30.xx, u_xlat4.xy);
            u_xlatb7 = (u_xlat4.xxxx>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb8 = (u_xlat4.xxxx<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati9 = int4((uint4(u_xlatb7) * 0xffffffffu) & (uint4(u_xlatb8) * 0xffffffffu));
            u_xlat9 = as_type<float4>(uint4(u_xlati9) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlatb10 = (u_xlat4.yyyy>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb4 = (u_xlat4.yyyy<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati11 = int4((uint4(u_xlatb4) * 0xffffffffu) & (uint4(u_xlatb10) * 0xffffffffu));
            u_xlat11 = as_type<float4>(uint4(u_xlati11) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow0_0, VGlobals._UDIMDiscardRow0_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow0_2, VGlobals._UDIMDiscardRow0_3);
            u_xlat4.x = dot(u_xlat12, u_xlat9);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow1_0, VGlobals._UDIMDiscardRow1_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow1_2, VGlobals._UDIMDiscardRow1_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat17.x = u_xlat17.x * u_xlat11.y;
            u_xlat4.x = fma(u_xlat11.x, u_xlat4.x, u_xlat17.x);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow2_0, VGlobals._UDIMDiscardRow2_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow2_2, VGlobals._UDIMDiscardRow2_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat4.x = fma(u_xlat11.z, u_xlat17.x, u_xlat4.x);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow3_0, VGlobals._UDIMDiscardRow3_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow3_2, VGlobals._UDIMDiscardRow3_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat4.x = fma(u_xlat11.w, u_xlat17.x, u_xlat4.x);
            u_xlatb8.x = u_xlatb10.x;
            u_xlatb8.y = u_xlatb4.w;
            u_xlatb8.z = u_xlatb7.x;
            u_xlat7 = select(float4(0.0, 0.0, 0.0, 0.0), float4(1.0, 1.0, 1.0, 1.0), bool4(u_xlatb8));
            u_xlat17.x = dot(u_xlat7, u_xlat7);
            u_xlatb17 = u_xlat17.x!=0.0;
            u_xlat17.x = u_xlatb17 ? 1.0 : float(0.0);
            u_xlat4.x = u_xlat17.x * u_xlat4.x;
            u_xlatb4.x = 0.00100000005<u_xlat4.x;
            u_xlatb42 = u_xlatb42 && u_xlatb4.x;
            u_xlati39 = int(uint(u_xlati39) | (uint(u_xlatb42) * 0xffffffffu));
            output.mtl_Position = (int(u_xlati39) != 0) ? float4(as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u))) : u_xlat5;
            u_xlati39 = int(bitFieldInsert(0x1u, 0x1u, uint(u_xlati19), 0x0u));
            u_xlati39 = int(bitFieldInsert(0x1u, 0x0u, uint(u_xlati6), uint(u_xlati39)));
            output.TEXCOORD2.w = float(u_xlati39);
            output.TEXCOORD0 = u_xlat1;
            output.TEXCOORD1 = u_xlat2;
            output.TEXCOORD2.xyz = u_xlat0.xyz;
            phase0_Output0_4.xyz = u_xlat3.xyz;
            output.TEXCOORD7 = 1.0;
        } else {
            output.mtl_Position = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD1 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_4 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD7 = 0.0;
        }
    output.TEXCOORD3 = phase0_Output0_4.xyz;
    output.TEXCOORD5 = phase0_Output0_4.w;
        return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation failed: 

program_source:826:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:834:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
                             ^
program_source:835:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
                                               ^
program_source:1093:49: error: member reference base type 'uint' (aka 'unsigned int') is not a structure or union
                u_xlatu3 = input.cp[0].TEXCOORD8.x;
                           ~~~~~~~~~~~~~~~~~~~~~^~



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float3 NORMAL0 [[ attribute(9) ]] ;
    float4 TANGENT0 [[ attribute(10) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    uint mtl_VertexID,
    uint mtl_BaseVertex,
    Mtl_VertexIn input)
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseVertex = 0;
#endif
    mtl_VertexID = mtl_VertexID - mtl_BaseVertex;
    Mtl_VertexOut output;
    output.mtl_Position = input.POSITION0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = input.TEXCOORD1.xy;
    output.TEXCOORD2.xy = input.TEXCOORD2.xy;
    output.TEXCOORD3.xy = input.TEXCOORD3.xy;
    output.TEXCOORD4.xy = input.TEXCOORD4.xy;
    output.TEXCOORD5.xy = input.TEXCOORD5.xy;
    output.TEXCOORD6.xy = input.TEXCOORD6.xy;
    output.TEXCOORD7.xy = input.TEXCOORD7.xy;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TANGENT0 = input.TANGENT0;
    output.TEXCOORD8 = mtl_VertexID;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(11) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float3 NORMAL0 [[ attribute(9) ]] ;
    float4 TANGENT0 [[ attribute(10) ]] ;
    uint TEXCOORD8 [[ attribute(12) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
    float3 unity_LightColor0;
    float3 unity_LightColor1;
    float3 unity_LightColor2;
    float3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
    float4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _LightColor0;
    float4 _SpecColor;
    bool4 unity_MetaVertexControl;
    bool4 unity_MetaFragmentControl;
    int unity_VisualizationMode;
    float unity_OneOverOutputBoost;
    float unity_MaxOutputValue;
    float unity_UseLinearSpace;
    float4 _lilBackgroundTexture_TexelSize;
    float4 _LightDirectionOverride;
    float4 _BackfaceColor;
    float4 _Color;
    float4 _MainTex_ST;
    float4 _MainTex_ScrollRotate;
    float4 _MainTexHSVG;
    float4 _Color2nd;
    float4 _Main2ndTex_ST;
    float4 _Main2ndTex_ScrollRotate;
    float4 _Main2ndDistanceFade;
    float4 _Main2ndTexDecalAnimation;
    float4 _Main2ndTexDecalSubParam;
    float4 _Main2ndDissolveMask_ST;
    float4 _Main2ndDissolveColor;
    float4 _Main2ndDissolveParams;
    float4 _Main2ndDissolvePos;
    float4 _Main2ndDissolveNoiseMask_ST;
    float4 _Main2ndDissolveNoiseMask_ScrollRotate;
    float4 _Color3rd;
    float4 _Main3rdTex_ST;
    float4 _Main3rdTex_ScrollRotate;
    float4 _Main3rdDistanceFade;
    float4 _Main3rdTexDecalAnimation;
    float4 _Main3rdTexDecalSubParam;
    float4 _Main3rdDissolveMask_ST;
    float4 _Main3rdDissolveColor;
    float4 _Main3rdDissolveParams;
    float4 _Main3rdDissolvePos;
    float4 _Main3rdDissolveNoiseMask_ST;
    float4 _Main3rdDissolveNoiseMask_ScrollRotate;
    float4 _ShadowColor;
    float4 _Shadow2ndColor;
    float4 _Shadow3rdColor;
    float4 _ShadowBorderColor;
    float4 _ShadowAOShift;
    float4 _ShadowAOShift2;
    float4 _RimShadeColor;
    float4 _BacklightColor;
    float4 _BacklightColorTex_ST;
    float4 _EmissionColor;
    float4 _EmissionBlink;
    float4 _EmissionMap_ST;
    float4 _EmissionMap_ScrollRotate;
    float4 _EmissionBlendMask_ST;
    float4 _EmissionBlendMask_ScrollRotate;
    float4 _Emission2ndColor;
    float4 _Emission2ndBlink;
    float4 _Emission2ndMap_ST;
    float4 _Emission2ndMap_ScrollRotate;
    float4 _Emission2ndBlendMask_ST;
    float4 _Emission2ndBlendMask_ScrollRotate;
    float4 _BumpMap_ST;
    float4 _Bump2ndMap_ST;
    float4 _Bump2ndScaleMask_ST;
    float4 _AnisotropyTangentMap_ST;
    float4 _AnisotropyScaleMask_ST;
    float4 _AnisotropyShiftNoiseMask_ST;
    float4 _ReflectionColor;
    float4 _MetallicGlossMap_ST;
    float4 _ReflectionColorTex_ST;
    float4 _SmoothnessTex_ST;
    float4 _ReflectionCubeColor;
    float4 _ReflectionCubeTex_HDR;
    float4 _MatCapColor;
    float4 _MatCapTex_ST;
    float4 _MatCapBlendMask_ST;
    float4 _MatCapBlendUV1;
    float4 _MatCapBumpMap_ST;
    float4 _MatCap2ndColor;
    float4 _MatCap2ndTex_ST;
    float4 _MatCap2ndBlendMask_ST;
    float4 _MatCap2ndBlendUV1;
    float4 _MatCap2ndBumpMap_ST;
    float4 _RimColor;
    float4 _RimColorTex_ST;
    float4 _RimIndirColor;
    float4 _GlitterColor;
    float4 _GlitterColorTex_ST;
    float4 _GlitterParams1;
    float4 _GlitterParams2;
    float4 _GlitterShapeTex_ST;
    float4 _GlitterAtras;
    float4 _DistanceFade;
    float4 _DistanceFadeColor;
    float4 _DistanceFadeRimColor;
    float4 _DitherTex_TexelSize;
    float4 _AudioLinkMask_ST;
    float4 _AudioLinkMask_ScrollRotate;
    float4 _AudioLinkDefaultValue;
    float4 _AudioLinkUVParams;
    float4 _AudioLinkStart;
    float4 _AudioLinkVertexUVParams;
    float4 _AudioLinkVertexStart;
    float4 _AudioLinkVertexStrength;
    float4 _AudioLinkLocalMapParams;
    float4 _DissolveMask_ST;
    float4 _DissolveColor;
    float4 _DissolveParams;
    float4 _DissolvePos;
    float4 _DissolveNoiseMask_ST;
    float4 _DissolveNoiseMask_ScrollRotate;
    float4 _OutlineColor;
    float4 _OutlineLitColor;
    float4 _OutlineTex_ST;
    float4 _OutlineTex_ScrollRotate;
    float4 _OutlineTexHSVG;
    float _AsUnlit;
    float _Cutoff;
    float _SubpassCutoff;
    float _FlipNormal;
    float _ShiftBackfaceUV;
    float _VertexLightStrength;
    float _LightMinLimit;
    float _LightMaxLimit;
    float _MonochromeLighting;
    float _AAStrength;
    float _AlphaBoostFA;
    float _MainGradationStrength;
    float _Main2ndTexAngle;
    float _Main2ndEnableLighting;
    float _Main2ndDissolveNoiseStrength;
    float _Main3rdTexAngle;
    float _Main3rdEnableLighting;
    float _Main3rdDissolveNoiseStrength;
    float4 _AlphaMask_ST;
    float _AlphaMaskScale;
    float _AlphaMaskValue;
    float _BackfaceForceShadow;
    float _ShadowStrength;
    float _ShadowNormalStrength;
    float _ShadowBorder;
    float _ShadowBlur;
    float _ShadowStrengthMaskLOD;
    float _ShadowBorderMaskLOD;
    float _ShadowBlurMaskLOD;
    float _Shadow2ndNormalStrength;
    float _Shadow2ndBorder;
    float _Shadow2ndBlur;
    float _Shadow3rdNormalStrength;
    float _Shadow3rdBorder;
    float _Shadow3rdBlur;
    float _ShadowMainStrength;
    float _ShadowEnvStrength;
    float _ShadowBorderRange;
    float _ShadowReceive;
    float _Shadow2ndReceive;
    float _Shadow3rdReceive;
    float _ShadowFlatBlur;
    float _ShadowFlatBorder;
    float _RimShadeNormalStrength;
    float _RimShadeBorder;
    float _RimShadeBlur;
    float _RimShadeFresnelPower;
    float _BacklightNormalStrength;
    float _BacklightBorder;
    float _BacklightBlur;
    float _BacklightDirectivity;
    float _BacklightViewStrength;
    float _BacklightBackfaceMask;
    float _BacklightMainStrength;
    float _BumpScale;
    float _Bump2ndScale;
    float _AnisotropyScale;
    float _AnisotropyTangentWidth;
    float _AnisotropyBitangentWidth;
    float _AnisotropyShift;
    float _AnisotropyShiftNoiseScale;
    float _AnisotropySpecularStrength;
    float _Anisotropy2ndTangentWidth;
    float _Anisotropy2ndBitangentWidth;
    float _Anisotropy2ndShift;
    float _Anisotropy2ndShiftNoiseScale;
    float _Anisotropy2ndSpecularStrength;
    float _Reflectance;
    float _SpecularNormalStrength;
    float _SpecularBorder;
    float _SpecularBlur;
    float _ReflectionNormalStrength;
    float _ReflectionCubeEnableLighting;
    float _Smoothness;
    float _Metallic;
    float _GSAAStrength;
    float _MatCapBlend;
    float _MatCapEnableLighting;
    float _MatCapShadowMask;
    float _MatCapVRParallaxStrength;
    float _MatCapBackfaceMask;
    float _MatCapLod;
    float _MatCapNormalStrength;
    float _MatCapMainStrength;
    float _MatCapBumpScale;
    float _MatCap2ndBlend;
    float _MatCap2ndEnableLighting;
    float _MatCap2ndShadowMask;
    float _MatCap2ndVRParallaxStrength;
    float _MatCap2ndBackfaceMask;
    float _MatCap2ndLod;
    float _MatCap2ndNormalStrength;
    float _MatCap2ndMainStrength;
    float _MatCap2ndBumpScale;
    float _RimNormalStrength;
    float _RimBorder;
    float _RimBlur;
    float _RimFresnelPower;
    float _RimEnableLighting;
    float _RimShadowMask;
    float _RimVRParallaxStrength;
    float _RimBackfaceMask;
    float _RimMainStrength;
    float _RimDirStrength;
    float _RimDirRange;
    float _RimIndirRange;
    float _RimIndirBorder;
    float _RimIndirBlur;
    float _GlitterMainStrength;
    float _GlitterPostContrast;
    float _GlitterSensitivity;
    float _GlitterNormalStrength;
    float _GlitterEnableLighting;
    float _GlitterShadowMask;
    float _GlitterVRParallaxStrength;
    float _GlitterBackfaceMask;
    float _GlitterScaleRandomize;
    float _DistanceFadeRimFresnelPower;
    float _EmissionBlend;
    float _EmissionParallaxDepth;
    float _EmissionFluorescence;
    float _EmissionMainStrength;
    float _EmissionGradSpeed;
    float _Emission2ndBlend;
    float _Emission2ndParallaxDepth;
    float _Emission2ndFluorescence;
    float _Emission2ndMainStrength;
    float _Emission2ndGradSpeed;
    float _Parallax;
    float _ParallaxOffset;
    float _DitherMaxValue;
    float _AudioLink2EmissionGrad;
    float _AudioLink2Emission2ndGrad;
    float _DissolveNoiseStrength;
    float _IDMask1;
    float _IDMask2;
    float _IDMask3;
    float _IDMask4;
    float _IDMask5;
    float _IDMask6;
    float _IDMask7;
    float _IDMask8;
    float _IDMaskPrior1;
    float _IDMaskPrior2;
    float _IDMaskPrior3;
    float _IDMaskPrior4;
    float _IDMaskPrior5;
    float _IDMaskPrior6;
    float _IDMaskPrior7;
    float _IDMaskPrior8;
    float _UDIMDiscardCompile;
    float _UDIMDiscardMode;
    float _UDIMDiscardUV;
    float _UDIMDiscardRow3_0;
    float _UDIMDiscardRow3_1;
    float _UDIMDiscardRow3_2;
    float _UDIMDiscardRow3_3;
    float _UDIMDiscardRow2_0;
    float _UDIMDiscardRow2_1;
    float _UDIMDiscardRow2_2;
    float _UDIMDiscardRow2_3;
    float _UDIMDiscardRow1_0;
    float _UDIMDiscardRow1_1;
    float _UDIMDiscardRow1_2;
    float _UDIMDiscardRow1_3;
    float _UDIMDiscardRow0_0;
    float _UDIMDiscardRow0_1;
    float _UDIMDiscardRow0_2;
    float _UDIMDiscardRow0_3;
    float _lilShadowCasterBias;
    float _OutlineLitScale;
    float _OutlineLitOffset;
    float _OutlineWidth;
    float _OutlineEnableLighting;
    float _OutlineVectorScale;
    float _OutlineFixWidth;
    float _OutlineZBias;
    float _TessEdge;
    float _TessStrength;
    float _TessShrink;
    float _TessFactorMax;
    int _IDMaskIndex1;
    int _IDMaskIndex2;
    int _IDMaskIndex3;
    int _IDMaskIndex4;
    int _IDMaskIndex5;
    int _IDMaskIndex6;
    int _IDMaskIndex7;
    int _IDMaskIndex8;
    uint _IDMaskFrom;
    uint _IDMaskIsBitmap;
    uint _IDMaskControlsDissolve;
    uint _Cull;
    uint _OutlineCull;
    uint _Main2ndTexBlendMode;
    uint _Main2ndTexAlphaMode;
    uint _Main2ndTex_UVMode;
    uint _Main2ndTex_Cull;
    uint _Main3rdTexBlendMode;
    uint _Main3rdTexAlphaMode;
    uint _Main3rdTex_UVMode;
    uint _Main3rdTex_Cull;
    uint _AlphaMaskMode;
    uint _ShadowColorType;
    uint _ShadowMaskType;
    uint _Bump2ndMap_UVMode;
    uint _ReflectionBlendMode;
    uint _MatCapBlendMode;
    uint _MatCap2ndBlendMode;
    uint _RimBlendMode;
    uint _GlitterUVMode;
    uint _EmissionMap_UVMode;
    uint _EmissionBlendMode;
    uint _Emission2ndMap_UVMode;
    uint _Emission2ndBlendMode;
    uint _AudioLinkUVMode;
    uint _AudioLinkMask_UVMode;
    uint _AudioLinkVertexUVMode;
    uint _DistanceFadeMode;
    uint _UseDither;
    uint _OutlineVertexR2Width;
    uint _OutlineVectorUVMode;
    uint _Invisible;
    uint _UseMain2ndTex;
    uint _Main2ndTexIsMSDF;
    uint _Main2ndTexIsDecal;
    uint _Main2ndTexIsLeftOnly;
    uint _Main2ndTexIsRightOnly;
    uint _Main2ndTexShouldCopy;
    uint _Main2ndTexShouldFlipMirror;
    uint _Main2ndTexShouldFlipCopy;
    uint _UseMain3rdTex;
    uint _Main3rdTexIsMSDF;
    uint _Main3rdTexIsDecal;
    uint _Main3rdTexIsLeftOnly;
    uint _Main3rdTexIsRightOnly;
    uint _Main3rdTexShouldCopy;
    uint _Main3rdTexShouldFlipMirror;
    uint _Main3rdTexShouldFlipCopy;
    uint _UseShadow;
    uint _ShadowPostAO;
    uint _UseRimShade;
    uint _UseBacklight;
    uint _BacklightReceiveShadow;
    uint _UseBumpMap;
    uint _UseBump2ndMap;
    uint _UseAnisotropy;
    uint _Anisotropy2Reflection;
    uint _Anisotropy2MatCap;
    uint _Anisotropy2MatCap2nd;
    uint _UseReflection;
    uint _ApplySpecular;
    uint _ApplySpecularFA;
    uint _ApplyReflection;
    uint _SpecularToon;
    uint _ReflectionApplyTransparency;
    uint _ReflectionCubeOverride;
    uint _UseMatCap;
    uint _MatCapApplyTransparency;
    uint _MatCapPerspective;
    uint _MatCapZRotCancel;
    uint _MatCapCustomNormal;
    uint _UseMatCap2nd;
    uint _MatCap2ndApplyTransparency;
    uint _MatCap2ndPerspective;
    uint _MatCap2ndZRotCancel;
    uint _MatCap2ndCustomNormal;
    uint _UseRim;
    uint _RimApplyTransparency;
    uint _UseGlitter;
    uint _GlitterColorTex_UVMode;
    uint _GlitterApplyTransparency;
    uint _GlitterApplyShape;
    uint _GlitterAngleRandomize;
    uint _UseEmission;
    uint _EmissionUseGrad;
    uint _UseEmission2nd;
    uint _Emission2ndUseGrad;
    uint _UseParallax;
    uint _UsePOM;
    uint _UseAudioLink;
    uint _AudioLink2Main2nd;
    uint _AudioLink2Main3rd;
    uint _AudioLink2Emission;
    uint _AudioLink2Emission2nd;
    uint _AudioLink2Vertex;
    uint _AudioLinkAsLocal;
    uint _OutlineLitApplyTex;
    uint _OutlineLitShadowReceive;
    uint _OutlineDeleteMesh;
    uint _OutlineDisableInVR;
    float4 _AudioTexture_TexelSize;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    // mtl_VertexID generated in compute kernel,
    // mtl_BaseVertex generated in compute kernel,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(mtl_VertexID, mtl_BaseVertex, vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.TEXCOORD4 = input.cp[controlPointID].TEXCOORD4;
        output.TEXCOORD5 = input.cp[controlPointID].TEXCOORD5;
        output.TEXCOORD6 = input.cp[controlPointID].TEXCOORD6;
        output.TEXCOORD7 = input.cp[controlPointID].TEXCOORD7;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float4 u_xlat1;
    int2 u_xlati1;
    bool4 u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    bool2 u_xlatb3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float3 u_xlat11;
    float u_xlat22;
    bool2 u_xlatb23;
    int2 u_xlati24;
    bool2 u_xlatb24;
    float u_xlat33;
    float u_xlat34;
    // fork_phase2
    {
        if((VGlobals._Invisible)!=uint(0)){
            tessFactor.edgeTessellationFactor[0] = 0.0;
            tessFactor.edgeTessellationFactor[1] = 0.0;
            tessFactor.edgeTessellationFactor[2] = 0.0;
            tessFactor.insideTessellationFactor = 0.0;
            return;
        }
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].mtl_Position.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].mtl_Position.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].mtl_Position.zzz, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].mtl_Position.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].mtl_Position.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].mtl_Position.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat3.xyz = u_xlat2.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].mtl_Position.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].mtl_Position.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].mtl_Position.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat4.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat4.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat6.x = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
        u_xlat7.x = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat7.xyz = float3(u_xlat33) * u_xlat7.xyz;
        u_xlat8.x = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat8.y = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat8.z = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
        u_xlat9.xyz = u_xlat2.xyz + u_xlat4.xyz;
        u_xlat9.xyz = fma(u_xlat9.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat9.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
        u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.x = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat4.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat4.xyz;
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.y = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.z = max(u_xlat33, 1.0);
        u_xlat9.xyz = min(u_xlat9.xyz, float3(VGlobals._TessFactorMax));
        u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
        u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
        u_xlat11.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat34 = dot(u_xlat11.xyz, u_xlat11.xyz);
        u_xlat34 = rsqrt(u_xlat34);
        u_xlat11.xyz = u_xlat11.xyz * float3(u_xlat34);
        u_xlat0.y = dot(u_xlat7.xyz, u_xlat11.xyz);
        u_xlat2.xyz = (-u_xlat4.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat22 = rsqrt(u_xlat22);
        u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
        u_xlat0.z = dot(u_xlat8.xyz, u_xlat2.xyz);
        u_xlat2.xyz = abs(u_xlat0.zxy) + abs(u_xlat0.yzx);
        u_xlat0.xyz = fma((-u_xlat2.xyz), float3(0.5, 0.5, 0.5), float3(1.0, 1.0, 1.0));
        u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
        u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xyz;
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat34 = u_xlat0.y + u_xlat0.x;
        u_xlat34 = u_xlat0.z + u_xlat34;
        u_xlat0.w = u_xlat34 * 0.333333343;
        u_xlat1.xy = u_xlat1.xy / abs(u_xlat1.zz);
        u_xlat1.zw = u_xlat3.xy / abs(u_xlat3.zz);
        u_xlat2.xy = u_xlat5.xy / abs(u_xlat5.zz);
        u_xlatb24.xy = (float2(1.00999999, 1.00999999)<u_xlat1.xy);
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat1.zw);
        u_xlati24.xy = int2((uint2(u_xlatb24.xy) * 0xffffffffu) & (uint2(u_xlatb3.xy) * 0xffffffffu));
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat2.xy);
        u_xlati24.xy = int2((uint2(u_xlatb3.xy) * 0xffffffffu) & uint2(u_xlati24.xy));
        u_xlatb1 = (u_xlat1<float4(-1.00999999, -1.00999999, -1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb1.zw) * 0xffffffffu) & (uint2(u_xlatb1.xy) * 0xffffffffu));
        u_xlatb23.xy = (u_xlat2.xy<float2(-1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb23.xy) * 0xffffffffu) & uint2(u_xlati1.xy));
        u_xlati1.x = int(uint(u_xlati1.x) | uint(u_xlati24.x));
        u_xlati1.x = int(uint(u_xlati24.y) | uint(u_xlati1.x));
        u_xlati1.x = int(uint(u_xlati1.y) | uint(u_xlati1.x));
        u_xlat0 = (u_xlati1.x != 0) ? float4(0.0, 0.0, 0.0, 0.0) : u_xlat0;
        tessFactor.edgeTessellationFactor[0] = u_xlat0.x;
        tessFactor.edgeTessellationFactor[1] = u_xlat0.y;
        tessFactor.edgeTessellationFactor[2] = u_xlat0.z;
        tessFactor.insideTessellationFactor = u_xlat0.w;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float TEXCOORD9 [[ user(TEXCOORD9) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float3 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
};
		template <typename UVecType> UVecType bitFieldInsert(const UVecType width, const UVecType offset, const UVecType src2, const UVecType src3)
		{
			UVecType bitmask = (((UVecType(1) << width)-1) << offset) & 0xffffffff;
			return ((src2 << offset) & bitmask) | (src3 & ~bitmask);
		}; 
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    // mtl_VertexID unused,
    // mtl_BaseVertex unused,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    texture2d<float, access::sample > _AudioLinkLocalMap [[ texture(0) ]] ,
    texture2d<float, access::sample > _AudioTexture [[ texture(1) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    constexpr sampler lil_sampler_trilinear_repeat(filter::linear,mip_filter::linear,address::repeat);
    constexpr sampler lil_sampler_linear_clamp(filter::linear,mip_filter::nearest,address::clamp_to_edge);
        float4 phase0_Input0_1[3];
        phase0_Input0_1[2] = float4(input.cp[2].TEXCOORD0, input.cp[2].TEXCOORD1);
        phase0_Input0_1[1] = float4(input.cp[1].TEXCOORD0, input.cp[1].TEXCOORD1);
        phase0_Input0_1[0] = float4(input.cp[0].TEXCOORD0, input.cp[0].TEXCOORD1);
        float4 phase0_Input0_2[3];
        phase0_Input0_2[2] = float4(input.cp[2].TEXCOORD2, input.cp[2].TEXCOORD3);
        phase0_Input0_2[1] = float4(input.cp[1].TEXCOORD2, input.cp[1].TEXCOORD3);
        phase0_Input0_2[0] = float4(input.cp[0].TEXCOORD2, input.cp[0].TEXCOORD3);
    float4 phase0_Output0_4;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    int3 u_xlati3;
    uint u_xlatu3;
    bool u_xlatb3;
    float4 u_xlat4;
    int u_xlati4;
    bool u_xlatb4;
    float3 u_xlat5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    bool4 u_xlatb7;
    float4 u_xlat8;
    int4 u_xlati8;
    bool4 u_xlatb8;
    float4 u_xlat9;
    int4 u_xlati9;
    float4 u_xlat10;
    bool4 u_xlatb10;
    bool4 u_xlatb11;
    float4 u_xlat12;
    int4 u_xlati12;
    float4 u_xlat13;
    float3 u_xlat17;
    int u_xlati17;
    uint u_xlatu17;
    bool u_xlatb17;
    int u_xlati18;
    float2 u_xlat31;
    int2 u_xlati31;
    uint u_xlatu31;
    bool u_xlatb31;
    float u_xlat32;
    bool u_xlatb32;
    float2 u_xlat33;
    int u_xlati33;
    bool u_xlatb33;
    float u_xlat42;
    float u_xlat45;
    bool u_xlatb45;
    if((VGlobals._Invisible)==uint(0)){
        u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].mtl_Position.xyz;
        u_xlat0.xyz = fma(mtl_TessCoord.xxx, input.cp[0].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat0.xyz = fma(mtl_TessCoord.zzz, input.cp[2].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat1 = mtl_TessCoord.yyyy * phase0_Input0_1[1];
        u_xlat1 = fma(mtl_TessCoord.xxxx, phase0_Input0_1[0], u_xlat1);
        u_xlat1 = fma(mtl_TessCoord.zzzz, phase0_Input0_1[2], u_xlat1);
        u_xlat2 = mtl_TessCoord.yyyy * phase0_Input0_2[1];
        u_xlat2 = fma(mtl_TessCoord.xxxx, phase0_Input0_2[0], u_xlat2);
        u_xlat2 = fma(mtl_TessCoord.zzzz, phase0_Input0_2[2], u_xlat2);
        u_xlat3.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
        u_xlat3.xyz = fma(mtl_TessCoord.xxx, input.cp[0].NORMAL0.xyz, u_xlat3.xyz);
        u_xlat3.xyz = fma(mtl_TessCoord.zzz, input.cp[2].NORMAL0.xyz, u_xlat3.xyz);
        u_xlat4 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
        u_xlat4 = fma(mtl_TessCoord.xxxx, input.cp[0].TANGENT0, u_xlat4);
        u_xlat4 = fma(mtl_TessCoord.zzzz, input.cp[2].TANGENT0, u_xlat4);
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat3.xyz = float3(u_xlat42) * u_xlat3.xyz;
        u_xlat42 = dot(input.cp[0].mtl_Position.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat5.xyz = float3(u_xlat42) * input.cp[0].NORMAL0.xyz;
        u_xlat42 = dot(input.cp[1].mtl_Position.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat6.xyz = float3(u_xlat42) * input.cp[1].NORMAL0.xyz;
        u_xlat42 = dot(input.cp[2].mtl_Position.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat7.xyz = float3(u_xlat42) * input.cp[2].NORMAL0.xyz;
        u_xlat6.xyz = u_xlat6.xyz * mtl_TessCoord.yyy;
        u_xlat5.xyz = fma(u_xlat5.xyz, mtl_TessCoord.xxx, u_xlat6.xyz);
        u_xlat5.xyz = fma(u_xlat7.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
        u_xlat0.xyz = fma(u_xlat5.xyz, float3(VGlobals._TessStrength), u_xlat0.xyz);
        u_xlatb45 = int(VGlobals._UseAudioLink)!=0x0;
        u_xlatb5.x = int(VGlobals._AudioLink2Vertex)!=0x0;
        u_xlatb45 = u_xlatb45 && u_xlatb5.x;
        if(u_xlatb45){
            u_xlatb5.xy = (int2(VGlobals._AudioLinkVertexUVMode)==int2(0x1, 0x2));
            u_xlat6.xyz = u_xlat0.xyz + (-VGlobals._AudioLinkVertexStart.xyz);
            u_xlat45 = dot(u_xlat6.xyz, u_xlat6.xyz);
            u_xlat45 = sqrt(u_xlat45);
            u_xlat45 = fma(u_xlat45, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat45 = (u_xlatb5.x) ? u_xlat45 : VGlobals._AudioLinkVertexUVParams.y;
            u_xlat5.x = sin(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat6.x = cos(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat33.xy = u_xlat1.xy + float2(-0.5, -0.5);
            u_xlat5.x = u_xlat5.x * u_xlat33.y;
            u_xlat5.x = fma(u_xlat33.x, u_xlat6.x, (-u_xlat5.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = fma(u_xlat5.x, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat5.x = (u_xlatb5.y) ? u_xlat5.x : u_xlat45;
            if((VGlobals._AudioLinkAsLocal)!=uint(0)){
                u_xlat45 = (-VGlobals._Time.y) * VGlobals._AudioLinkLocalMapParams.x;
                u_xlat45 = u_xlat45 * VGlobals._AudioLinkLocalMapParams.y;
                u_xlat45 = u_xlat45 * 0.0166666675;
                u_xlat45 = fract(u_xlat45);
                u_xlat45 = u_xlat45 + VGlobals._AudioLinkLocalMapParams.z;
                u_xlat6.x = u_xlat45 + u_xlat5.x;
                u_xlat6.y = VGlobals._AudioLinkVertexUVParams.w;
                u_xlat45 = _AudioLinkLocalMap.sample(lil_sampler_trilinear_repeat, u_xlat6.xy, level(0.0)).x;
            } else {
                u_xlat33.x = float(_AudioTexture.get_width(0x0));
                u_xlati33 = int(u_xlat33.x);
                u_xlatb33 = 0x10<u_xlati33;
                if(u_xlatb33){
                    u_xlat5.y = VGlobals._AudioLinkVertexUVParams.w * 0.0625;
                    u_xlat45 = _AudioTexture.sample(lil_sampler_linear_clamp, u_xlat5.xy, level(0.0)).x;
                    u_xlat45 = u_xlat45;
                    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
                } else {
                    u_xlat5.x = fma(VGlobals._Time.y, VGlobals._AudioLinkDefaultValue.z, (-u_xlat5.x));
                    u_xlat5.x = fract(u_xlat5.x);
                    u_xlat5.x = u_xlat5.x + VGlobals._AudioLinkDefaultValue.w;
                    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
                    u_xlat5.x = u_xlat5.x * VGlobals._AudioLinkDefaultValue.y;
                    u_xlat45 = fma((-u_xlat5.x), VGlobals._AudioLinkDefaultValue.x, VGlobals._AudioLinkDefaultValue.x);
                    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
                }
            }
            u_xlat5.xyz = fma(u_xlat3.xyz, VGlobals._AudioLinkVertexStrength.www, VGlobals._AudioLinkVertexStrength.xyz);
            u_xlat0.xyz = fma(u_xlat5.xyz, float3(u_xlat45), u_xlat0.xyz);
        }
        u_xlat5.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat6 = u_xlat5.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
        u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat5.xxxx, u_xlat6);
        u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat5.zzzz, u_xlat6);
        u_xlat6 = u_xlat6 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
        u_xlat7.x = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        output.TEXCOORD4.xyz = u_xlat3.xxx * u_xlat7.xyz;
        u_xlat3.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat4.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat4.zzz, u_xlat3.xyz);
        u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat45 = rsqrt(u_xlat45);
        output.TEXCOORD5.xyz = float3(u_xlat45) * u_xlat3.xyz;
        u_xlat3.x = dot(VGlobals._LightColor0.xyz, float3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat17.xyz = VGlobals.unity_SHAg.xyz * float3(0.333332986, 0.333332986, 0.333332986);
        u_xlat17.xyz = fma(VGlobals.unity_SHAr.xyz, float3(0.333332986, 0.333332986, 0.333332986), u_xlat17.xyz);
        u_xlat7.xyz = fma(VGlobals.unity_SHAb.xyz, float3(0.333332986, 0.333332986, 0.333332986), u_xlat17.xyz);
        u_xlat7.w = abs(u_xlat7.y);
        u_xlat17.x = dot(VGlobals._LightDirectionOverride.xyz, VGlobals._LightDirectionOverride.xyz);
        u_xlat17.x = sqrt(u_xlat17.x);
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * VGlobals._LightDirectionOverride.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals._LightDirectionOverride.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, VGlobals._LightDirectionOverride.zzz, u_xlat4.xyz);
        u_xlat31.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat31.x = rsqrt(u_xlat31.x);
        u_xlat4.xyz = u_xlat31.xxx * u_xlat4.xyz;
        u_xlat17.xyz = u_xlat17.xxx * u_xlat4.xyz;
        u_xlatb4 = float(0.0)!=VGlobals._LightDirectionOverride.w;
        u_xlat17.xyz = (bool(u_xlatb4)) ? u_xlat17.xyz : VGlobals._LightDirectionOverride.xyz;
        u_xlat4.xyz = fma(VGlobals._WorldSpaceLightPos0.xyz, u_xlat3.xxx, u_xlat7.xwz);
        u_xlat17.xyz = u_xlat17.xyz + u_xlat4.xyz;
        u_xlat4.x = dot(u_xlat17.xyz, u_xlat17.xyz);
        u_xlat4.x = rsqrt(u_xlat4.x);
        output.TEXCOORD7.xyz = u_xlat17.xyz * u_xlat4.xxx;
        u_xlat3.xyz = fma(VGlobals._WorldSpaceLightPos0.xyz, u_xlat3.xxx, u_xlat7.xyz);
        u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlatb4 = u_xlat45<9.99999997e-07;
        u_xlat45 = rsqrt(u_xlat45);
        u_xlat3.xyz = float3(u_xlat45) * u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz * float3(0.666665971, 0.666665971, 0.666665971);
        u_xlat3.xyz = (bool(u_xlatb4)) ? float3(0.0, 0.0, 0.0) : u_xlat3.xyz;
        u_xlat7 = u_xlat3.yzzx * u_xlat3.xyzz;
        u_xlat45 = dot(VGlobals.unity_SHBr, u_xlat7);
        u_xlat4.x = u_xlat45 + VGlobals.unity_SHAr.w;
        u_xlat45 = dot(VGlobals.unity_SHBg, u_xlat7);
        u_xlat4.y = u_xlat45 + VGlobals.unity_SHAg.w;
        u_xlat45 = dot(VGlobals.unity_SHBb, u_xlat7);
        u_xlat4.z = u_xlat45 + VGlobals.unity_SHAb.w;
        u_xlat45 = u_xlat3.y * u_xlat3.y;
        u_xlat45 = fma(u_xlat3.x, u_xlat3.x, (-u_xlat45));
        u_xlat4.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat45), u_xlat4.xyz);
        u_xlat7.x = dot(VGlobals.unity_SHAr.xyz, u_xlat3.xyz);
        u_xlat7.y = dot(VGlobals.unity_SHAg.xyz, u_xlat3.xyz);
        u_xlat7.z = dot(VGlobals.unity_SHAb.xyz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat4.xyz + u_xlat7.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-u_xlat7.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals._LightColor0.xyz;
        u_xlat3.xyz = max(u_xlat3.xyz, float3(VGlobals._LightMinLimit));
        u_xlat3.xyz = min(u_xlat3.xyz, float3(VGlobals._LightMaxLimit));
        u_xlat45 = dot(u_xlat3.xyz, float3(0.333333343, 0.333333343, 0.333333343));
        u_xlat7.xyz = (-u_xlat3.xyz) + float3(u_xlat45);
        u_xlat3.xyz = fma(float3(VGlobals._MonochromeLighting), u_xlat7.xyz, u_xlat3.xyz);
        u_xlat7.xyz = (-u_xlat3.xyz) + float3(1.0, 1.0, 1.0);
        output.TEXCOORD6.xyz = fma(float3(VGlobals._AsUnlit), u_xlat7.xyz, u_xlat3.xyz);
        output.TEXCOORD8.xyz = u_xlat4.xyz * float3(VGlobals._ShadowEnvStrength);
        switch(int(int(VGlobals._IDMaskFrom))){
            case 0x0:
                u_xlatu3 = uint(u_xlat1.x);
                break;
            case 0x1:
                u_xlatu3 = uint(u_xlat1.z);
                break;
            case 0x2:
                u_xlatu3 = uint(u_xlat2.x);
                break;
            case 0x3:
                u_xlatu3 = uint(u_xlat2.z);
                break;
            case 0x4:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD4.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD4.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD4.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            case 0x5:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD5.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD5.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD5.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            case 0x6:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD6.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD6.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD6.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            case 0x7:
                u_xlat17.x = mtl_TessCoord.y * input.cp[1].TEXCOORD7.x;
                u_xlat17.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD7.x, u_xlat17.x);
                u_xlat17.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD7.x, u_xlat17.x);
                u_xlatu3 = uint(u_xlat17.x);
                break;
            default:
                u_xlatu3 = input.cp[0].TEXCOORD8.x;
                break;
            }
            if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                u_xlat7.x = rint(VGlobals._IDMask1);
                u_xlat7.yzw = rint(float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4));
                u_xlat17.x = dot(u_xlat7, float4(1.0, 2.0, 4.0, 8.0));
                u_xlat7.x = rint(VGlobals._IDMask5);
                u_xlat7.yzw = rint(float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8));
                u_xlat31.x = dot(u_xlat7, float4(16.0, 32.0, 64.0, 128.0));
                u_xlat17.x = u_xlat31.x + u_xlat17.x;
                u_xlatu17 = uint(u_xlat17.x);
                u_xlatb31 = int(u_xlatu3)!=0x0;
                u_xlati17 = int(u_xlatu3 & u_xlatu17);
                u_xlatb17 = int(u_xlatu3)==u_xlati17;
                u_xlati17 = int((uint(u_xlatb17) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            } else {
                u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                u_xlat7.xy = float2(u_xlati31.yx);
                u_xlati8 = int4(u_xlatu3) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                u_xlat8 = float4(u_xlati8.wxyz);
                u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                u_xlat31.xy = float2(u_xlati31.xy);
                u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                u_xlat7.x = (-u_xlat7.x);
                u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                u_xlat8 = (-u_xlat8);
                u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                u_xlat9.zw = u_xlat10.zw;
                u_xlat7.yzw = u_xlat8.yzw;
                u_xlat7 = u_xlat7 * u_xlat9;
                u_xlat10.zw = u_xlat31.xy + float2(1.0, 1.0);
                u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                u_xlat8.yz = (-u_xlat31.xy);
                u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                u_xlat8.w = 1.0;
                u_xlat8 = u_xlat8 * u_xlat10;
                u_xlat9.x = VGlobals._IDMask1;
                u_xlat9.yzw = float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4);
                u_xlat31.x = dot(u_xlat7, u_xlat9);
                u_xlat7.x = VGlobals._IDMask5;
                u_xlat7.yzw = float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8);
                u_xlat45 = dot(u_xlat8, u_xlat7);
                u_xlat31.x = u_xlat45 + u_xlat31.x;
                u_xlati17 = int((float(0.0)!=u_xlat31.x) ? 0xFFFFFFFFu : uint(0));
            }
            if((VGlobals._IDMaskControlsDissolve)!=uint(0)){
                if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                    u_xlat7.x = rint(VGlobals._IDMaskPrior1);
                    u_xlat7.yzw = rint(float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4));
                    u_xlat31.x = dot(u_xlat7, float4(1.0, 2.0, 4.0, 8.0));
                    u_xlat7.x = rint(VGlobals._IDMaskPrior5);
                    u_xlat7.yzw = rint(float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8));
                    u_xlat45 = dot(u_xlat7, float4(16.0, 32.0, 64.0, 128.0));
                    u_xlat31.x = u_xlat45 + u_xlat31.x;
                    u_xlatu31 = uint(u_xlat31.x);
                    u_xlatb45 = int(u_xlatu3)!=0x0;
                    u_xlati31.x = int(u_xlatu3 & u_xlatu31);
                    u_xlatb31 = int(u_xlatu3)==u_xlati31.x;
                    u_xlati18 = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb45) * 0xffffffffu));
                } else {
                    u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                    u_xlat7.xy = float2(u_xlati31.yx);
                    u_xlati8 = int4(u_xlatu3) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                    u_xlat8 = float4(u_xlati8.wxyz);
                    u_xlati3.xz = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                    u_xlat3.xz = float2(u_xlati3.xz);
                    u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                    u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                    u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                    u_xlat7.x = (-u_xlat7.x);
                    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                    u_xlat8 = (-u_xlat8);
                    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                    u_xlat9.zw = u_xlat10.zw;
                    u_xlat7.yzw = u_xlat8.yzw;
                    u_xlat7 = u_xlat7 * u_xlat9;
                    u_xlat10.zw = u_xlat3.xz + float2(1.0, 1.0);
                    u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                    u_xlat8.yz = (-u_xlat3.xz);
                    u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                    u_xlat8.w = 1.0;
                    u_xlat8 = u_xlat8 * u_xlat10;
                    u_xlat9.x = VGlobals._IDMaskPrior1;
                    u_xlat9.yzw = float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4);
                    u_xlat3.x = dot(u_xlat7, u_xlat9);
                    u_xlat7.x = VGlobals._IDMaskPrior5;
                    u_xlat7.yzw = float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8);
                    u_xlat31.x = dot(u_xlat8, u_xlat7);
                    u_xlat3.x = u_xlat31.x + u_xlat3.x;
                    u_xlati18 = int((float(0.0)!=u_xlat3.x) ? 0xFFFFFFFFu : uint(0));
                }
                u_xlati4 = int((u_xlati17!=u_xlati18) ? 0xFFFFFFFFu : uint(0));
                u_xlati17 = int(uint(u_xlati17) & uint(u_xlati18));
            } else {
                u_xlati4 = int(int(0xffffffffu));
                u_xlati18 = int(0x0);
            }
            u_xlatb7 = (float4(VGlobals._UDIMDiscardMode, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV)==float4(0.0, 0.0, 1.0, 2.0));
            u_xlatb3 = VGlobals._UDIMDiscardCompile==1.0;
            u_xlatb3 = u_xlatb3 && u_xlatb7.x;
            u_xlat7.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb7.yzw));
            u_xlat8 = u_xlat1 * u_xlat7.xxyy;
            u_xlat31.xy = u_xlat8.zw + u_xlat8.xy;
            u_xlat31.xy = fma(u_xlat2.xy, u_xlat7.zz, u_xlat31.xy);
            u_xlatb32 = VGlobals._UDIMDiscardUV==3.0;
            u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);
            u_xlat31.xy = fma(u_xlat2.zw, float2(u_xlat32), u_xlat31.xy);
            u_xlatb7 = (u_xlat31.xxxx>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb8 = (u_xlat31.xxxx<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati9 = int4((uint4(u_xlatb7) * 0xffffffffu) & (uint4(u_xlatb8) * 0xffffffffu));
            u_xlat9 = as_type<float4>(uint4(u_xlati9) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlatb10 = (u_xlat31.yyyy>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb11 = (u_xlat31.yyyy<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati12 = int4((uint4(u_xlatb10) * 0xffffffffu) & (uint4(u_xlatb11) * 0xffffffffu));
            u_xlat12 = as_type<float4>(uint4(u_xlati12) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow0_0, VGlobals._UDIMDiscardRow0_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow0_2, VGlobals._UDIMDiscardRow0_3);
            u_xlat31.x = dot(u_xlat13, u_xlat9);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow1_0, VGlobals._UDIMDiscardRow1_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow1_2, VGlobals._UDIMDiscardRow1_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat45 = u_xlat45 * u_xlat12.y;
            u_xlat31.x = fma(u_xlat12.x, u_xlat31.x, u_xlat45);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow2_0, VGlobals._UDIMDiscardRow2_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow2_2, VGlobals._UDIMDiscardRow2_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat31.x = fma(u_xlat12.z, u_xlat45, u_xlat31.x);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow3_0, VGlobals._UDIMDiscardRow3_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow3_2, VGlobals._UDIMDiscardRow3_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat31.x = fma(u_xlat12.w, u_xlat45, u_xlat31.x);
            u_xlatb8.x = u_xlatb10.x;
            u_xlatb8.y = u_xlatb11.w;
            u_xlatb8.z = u_xlatb7.x;
            u_xlat7 = select(float4(0.0, 0.0, 0.0, 0.0), float4(1.0, 1.0, 1.0, 1.0), bool4(u_xlatb8));
            u_xlat45 = dot(u_xlat7, u_xlat7);
            u_xlatb45 = u_xlat45!=0.0;
            u_xlat45 = u_xlatb45 ? 1.0 : float(0.0);
            u_xlat31.x = u_xlat45 * u_xlat31.x;
            u_xlatb31 = 0.00100000005<u_xlat31.x;
            u_xlatb3 = u_xlatb31 && u_xlatb3;
            u_xlati3.x = int((uint(u_xlatb3) * 0xffffffffu) | uint(u_xlati17));
            output.mtl_Position = (u_xlati3.x != 0) ? float4(as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u))) : u_xlat6;
            u_xlati3.x = int(bitFieldInsert(0x1u, 0x1u, uint(u_xlati18), 0x0u));
            u_xlati3.x = int(bitFieldInsert(0x1u, 0x0u, uint(u_xlati4), uint(u_xlati3.x)));
            u_xlat0.w = float(u_xlati3.x);
            output.TEXCOORD0 = u_xlat1;
            output.TEXCOORD1 = u_xlat2;
            output.TEXCOORD2 = u_xlat0;
            phase0_Output0_4.xyz = u_xlat5.xyz;
            phase0_Output0_4.w = 1.0;
            output.TEXCOORD5.w = u_xlat4.w;
        } else {
            output.mtl_Position = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD1 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_4 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD4.xyz = float3(0.0, 0.0, 0.0);
            output.TEXCOORD6.xyz = float3(0.0, 0.0, 0.0);
            output.TEXCOORD7.xyz = float3(0.0, 0.0, 0.0);
            output.TEXCOORD8.xyz = float3(0.0, 0.0, 0.0);
        }
    output.TEXCOORD3 = phase0_Output0_4.xyz;
    output.TEXCOORD9 = phase0_Output0_4.w;
        return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation failed: 

program_source:829:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:839:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
                             ^
program_source:840:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
                                               ^
program_source:1191:50: error: member reference base type 'uint' (aka 'unsigned int') is not a structure or union
                u_xlatu42 = input.cp[0].TEXCOORD8.x;
                            ~~~~~~~~~~~~~~~~~~~~~^~



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float4 COLOR0 [[ attribute(9) ]] ;
    float3 NORMAL0 [[ attribute(10) ]] ;
    float4 TANGENT0 [[ attribute(11) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    uint mtl_VertexID,
    uint mtl_BaseVertex,
    Mtl_VertexIn input)
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseVertex = 0;
#endif
    mtl_VertexID = mtl_VertexID - mtl_BaseVertex;
    Mtl_VertexOut output;
    output.mtl_Position = input.POSITION0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = input.TEXCOORD1.xy;
    output.TEXCOORD2.xy = input.TEXCOORD2.xy;
    output.TEXCOORD3.xy = input.TEXCOORD3.xy;
    output.TEXCOORD4.xy = input.TEXCOORD4.xy;
    output.TEXCOORD5.xy = input.TEXCOORD5.xy;
    output.TEXCOORD6.xy = input.TEXCOORD6.xy;
    output.TEXCOORD7.xy = input.TEXCOORD7.xy;
    output.COLOR0 = input.COLOR0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TANGENT0 = input.TANGENT0;
    output.TEXCOORD8 = mtl_VertexID;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(12) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float4 COLOR0 [[ attribute(9) ]] ;
    float3 NORMAL0 [[ attribute(10) ]] ;
    float4 TANGENT0 [[ attribute(11) ]] ;
    uint TEXCOORD8 [[ attribute(13) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
    float3 unity_LightColor0;
    float3 unity_LightColor1;
    float3 unity_LightColor2;
    float3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
    float4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _LightColor0;
    float4 _SpecColor;
    bool4 unity_MetaVertexControl;
    bool4 unity_MetaFragmentControl;
    int unity_VisualizationMode;
    float unity_OneOverOutputBoost;
    float unity_MaxOutputValue;
    float unity_UseLinearSpace;
    float4 _lilBackgroundTexture_TexelSize;
    float4 _LightDirectionOverride;
    float4 _BackfaceColor;
    float4 _Color;
    float4 _MainTex_ST;
    float4 _MainTex_ScrollRotate;
    float4 _MainTexHSVG;
    float4 _Color2nd;
    float4 _Main2ndTex_ST;
    float4 _Main2ndTex_ScrollRotate;
    float4 _Main2ndDistanceFade;
    float4 _Main2ndTexDecalAnimation;
    float4 _Main2ndTexDecalSubParam;
    float4 _Main2ndDissolveMask_ST;
    float4 _Main2ndDissolveColor;
    float4 _Main2ndDissolveParams;
    float4 _Main2ndDissolvePos;
    float4 _Main2ndDissolveNoiseMask_ST;
    float4 _Main2ndDissolveNoiseMask_ScrollRotate;
    float4 _Color3rd;
    float4 _Main3rdTex_ST;
    float4 _Main3rdTex_ScrollRotate;
    float4 _Main3rdDistanceFade;
    float4 _Main3rdTexDecalAnimation;
    float4 _Main3rdTexDecalSubParam;
    float4 _Main3rdDissolveMask_ST;
    float4 _Main3rdDissolveColor;
    float4 _Main3rdDissolveParams;
    float4 _Main3rdDissolvePos;
    float4 _Main3rdDissolveNoiseMask_ST;
    float4 _Main3rdDissolveNoiseMask_ScrollRotate;
    float4 _ShadowColor;
    float4 _Shadow2ndColor;
    float4 _Shadow3rdColor;
    float4 _ShadowBorderColor;
    float4 _ShadowAOShift;
    float4 _ShadowAOShift2;
    float4 _RimShadeColor;
    float4 _BacklightColor;
    float4 _BacklightColorTex_ST;
    float4 _EmissionColor;
    float4 _EmissionBlink;
    float4 _EmissionMap_ST;
    float4 _EmissionMap_ScrollRotate;
    float4 _EmissionBlendMask_ST;
    float4 _EmissionBlendMask_ScrollRotate;
    float4 _Emission2ndColor;
    float4 _Emission2ndBlink;
    float4 _Emission2ndMap_ST;
    float4 _Emission2ndMap_ScrollRotate;
    float4 _Emission2ndBlendMask_ST;
    float4 _Emission2ndBlendMask_ScrollRotate;
    float4 _BumpMap_ST;
    float4 _Bump2ndMap_ST;
    float4 _Bump2ndScaleMask_ST;
    float4 _AnisotropyTangentMap_ST;
    float4 _AnisotropyScaleMask_ST;
    float4 _AnisotropyShiftNoiseMask_ST;
    float4 _ReflectionColor;
    float4 _MetallicGlossMap_ST;
    float4 _ReflectionColorTex_ST;
    float4 _SmoothnessTex_ST;
    float4 _ReflectionCubeColor;
    float4 _ReflectionCubeTex_HDR;
    float4 _MatCapColor;
    float4 _MatCapTex_ST;
    float4 _MatCapBlendMask_ST;
    float4 _MatCapBlendUV1;
    float4 _MatCapBumpMap_ST;
    float4 _MatCap2ndColor;
    float4 _MatCap2ndTex_ST;
    float4 _MatCap2ndBlendMask_ST;
    float4 _MatCap2ndBlendUV1;
    float4 _MatCap2ndBumpMap_ST;
    float4 _RimColor;
    float4 _RimColorTex_ST;
    float4 _RimIndirColor;
    float4 _GlitterColor;
    float4 _GlitterColorTex_ST;
    float4 _GlitterParams1;
    float4 _GlitterParams2;
    float4 _GlitterShapeTex_ST;
    float4 _GlitterAtras;
    float4 _DistanceFade;
    float4 _DistanceFadeColor;
    float4 _DistanceFadeRimColor;
    float4 _DitherTex_TexelSize;
    float4 _AudioLinkMask_ST;
    float4 _AudioLinkMask_ScrollRotate;
    float4 _AudioLinkDefaultValue;
    float4 _AudioLinkUVParams;
    float4 _AudioLinkStart;
    float4 _AudioLinkVertexUVParams;
    float4 _AudioLinkVertexStart;
    float4 _AudioLinkVertexStrength;
    float4 _AudioLinkLocalMapParams;
    float4 _DissolveMask_ST;
    float4 _DissolveColor;
    float4 _DissolveParams;
    float4 _DissolvePos;
    float4 _DissolveNoiseMask_ST;
    float4 _DissolveNoiseMask_ScrollRotate;
    float4 _OutlineColor;
    float4 _OutlineLitColor;
    float4 _OutlineTex_ST;
    float4 _OutlineTex_ScrollRotate;
    float4 _OutlineTexHSVG;
    float _AsUnlit;
    float _Cutoff;
    float _SubpassCutoff;
    float _FlipNormal;
    float _ShiftBackfaceUV;
    float _VertexLightStrength;
    float _LightMinLimit;
    float _LightMaxLimit;
    float _MonochromeLighting;
    float _AAStrength;
    float _AlphaBoostFA;
    float _MainGradationStrength;
    float _Main2ndTexAngle;
    float _Main2ndEnableLighting;
    float _Main2ndDissolveNoiseStrength;
    float _Main3rdTexAngle;
    float _Main3rdEnableLighting;
    float _Main3rdDissolveNoiseStrength;
    float4 _AlphaMask_ST;
    float _AlphaMaskScale;
    float _AlphaMaskValue;
    float _BackfaceForceShadow;
    float _ShadowStrength;
    float _ShadowNormalStrength;
    float _ShadowBorder;
    float _ShadowBlur;
    float _ShadowStrengthMaskLOD;
    float _ShadowBorderMaskLOD;
    float _ShadowBlurMaskLOD;
    float _Shadow2ndNormalStrength;
    float _Shadow2ndBorder;
    float _Shadow2ndBlur;
    float _Shadow3rdNormalStrength;
    float _Shadow3rdBorder;
    float _Shadow3rdBlur;
    float _ShadowMainStrength;
    float _ShadowEnvStrength;
    float _ShadowBorderRange;
    float _ShadowReceive;
    float _Shadow2ndReceive;
    float _Shadow3rdReceive;
    float _ShadowFlatBlur;
    float _ShadowFlatBorder;
    float _RimShadeNormalStrength;
    float _RimShadeBorder;
    float _RimShadeBlur;
    float _RimShadeFresnelPower;
    float _BacklightNormalStrength;
    float _BacklightBorder;
    float _BacklightBlur;
    float _BacklightDirectivity;
    float _BacklightViewStrength;
    float _BacklightBackfaceMask;
    float _BacklightMainStrength;
    float _BumpScale;
    float _Bump2ndScale;
    float _AnisotropyScale;
    float _AnisotropyTangentWidth;
    float _AnisotropyBitangentWidth;
    float _AnisotropyShift;
    float _AnisotropyShiftNoiseScale;
    float _AnisotropySpecularStrength;
    float _Anisotropy2ndTangentWidth;
    float _Anisotropy2ndBitangentWidth;
    float _Anisotropy2ndShift;
    float _Anisotropy2ndShiftNoiseScale;
    float _Anisotropy2ndSpecularStrength;
    float _Reflectance;
    float _SpecularNormalStrength;
    float _SpecularBorder;
    float _SpecularBlur;
    float _ReflectionNormalStrength;
    float _ReflectionCubeEnableLighting;
    float _Smoothness;
    float _Metallic;
    float _GSAAStrength;
    float _MatCapBlend;
    float _MatCapEnableLighting;
    float _MatCapShadowMask;
    float _MatCapVRParallaxStrength;
    float _MatCapBackfaceMask;
    float _MatCapLod;
    float _MatCapNormalStrength;
    float _MatCapMainStrength;
    float _MatCapBumpScale;
    float _MatCap2ndBlend;
    float _MatCap2ndEnableLighting;
    float _MatCap2ndShadowMask;
    float _MatCap2ndVRParallaxStrength;
    float _MatCap2ndBackfaceMask;
    float _MatCap2ndLod;
    float _MatCap2ndNormalStrength;
    float _MatCap2ndMainStrength;
    float _MatCap2ndBumpScale;
    float _RimNormalStrength;
    float _RimBorder;
    float _RimBlur;
    float _RimFresnelPower;
    float _RimEnableLighting;
    float _RimShadowMask;
    float _RimVRParallaxStrength;
    float _RimBackfaceMask;
    float _RimMainStrength;
    float _RimDirStrength;
    float _RimDirRange;
    float _RimIndirRange;
    float _RimIndirBorder;
    float _RimIndirBlur;
    float _GlitterMainStrength;
    float _GlitterPostContrast;
    float _GlitterSensitivity;
    float _GlitterNormalStrength;
    float _GlitterEnableLighting;
    float _GlitterShadowMask;
    float _GlitterVRParallaxStrength;
    float _GlitterBackfaceMask;
    float _GlitterScaleRandomize;
    float _DistanceFadeRimFresnelPower;
    float _EmissionBlend;
    float _EmissionParallaxDepth;
    float _EmissionFluorescence;
    float _EmissionMainStrength;
    float _EmissionGradSpeed;
    float _Emission2ndBlend;
    float _Emission2ndParallaxDepth;
    float _Emission2ndFluorescence;
    float _Emission2ndMainStrength;
    float _Emission2ndGradSpeed;
    float _Parallax;
    float _ParallaxOffset;
    float _DitherMaxValue;
    float _AudioLink2EmissionGrad;
    float _AudioLink2Emission2ndGrad;
    float _DissolveNoiseStrength;
    float _IDMask1;
    float _IDMask2;
    float _IDMask3;
    float _IDMask4;
    float _IDMask5;
    float _IDMask6;
    float _IDMask7;
    float _IDMask8;
    float _IDMaskPrior1;
    float _IDMaskPrior2;
    float _IDMaskPrior3;
    float _IDMaskPrior4;
    float _IDMaskPrior5;
    float _IDMaskPrior6;
    float _IDMaskPrior7;
    float _IDMaskPrior8;
    float _UDIMDiscardCompile;
    float _UDIMDiscardMode;
    float _UDIMDiscardUV;
    float _UDIMDiscardRow3_0;
    float _UDIMDiscardRow3_1;
    float _UDIMDiscardRow3_2;
    float _UDIMDiscardRow3_3;
    float _UDIMDiscardRow2_0;
    float _UDIMDiscardRow2_1;
    float _UDIMDiscardRow2_2;
    float _UDIMDiscardRow2_3;
    float _UDIMDiscardRow1_0;
    float _UDIMDiscardRow1_1;
    float _UDIMDiscardRow1_2;
    float _UDIMDiscardRow1_3;
    float _UDIMDiscardRow0_0;
    float _UDIMDiscardRow0_1;
    float _UDIMDiscardRow0_2;
    float _UDIMDiscardRow0_3;
    float _lilShadowCasterBias;
    float _OutlineLitScale;
    float _OutlineLitOffset;
    float _OutlineWidth;
    float _OutlineEnableLighting;
    float _OutlineVectorScale;
    float _OutlineFixWidth;
    float _OutlineZBias;
    float _TessEdge;
    float _TessStrength;
    float _TessShrink;
    float _TessFactorMax;
    int _IDMaskIndex1;
    int _IDMaskIndex2;
    int _IDMaskIndex3;
    int _IDMaskIndex4;
    int _IDMaskIndex5;
    int _IDMaskIndex6;
    int _IDMaskIndex7;
    int _IDMaskIndex8;
    uint _IDMaskFrom;
    uint _IDMaskIsBitmap;
    uint _IDMaskControlsDissolve;
    uint _Cull;
    uint _OutlineCull;
    uint _Main2ndTexBlendMode;
    uint _Main2ndTexAlphaMode;
    uint _Main2ndTex_UVMode;
    uint _Main2ndTex_Cull;
    uint _Main3rdTexBlendMode;
    uint _Main3rdTexAlphaMode;
    uint _Main3rdTex_UVMode;
    uint _Main3rdTex_Cull;
    uint _AlphaMaskMode;
    uint _ShadowColorType;
    uint _ShadowMaskType;
    uint _Bump2ndMap_UVMode;
    uint _ReflectionBlendMode;
    uint _MatCapBlendMode;
    uint _MatCap2ndBlendMode;
    uint _RimBlendMode;
    uint _GlitterUVMode;
    uint _EmissionMap_UVMode;
    uint _EmissionBlendMode;
    uint _Emission2ndMap_UVMode;
    uint _Emission2ndBlendMode;
    uint _AudioLinkUVMode;
    uint _AudioLinkMask_UVMode;
    uint _AudioLinkVertexUVMode;
    uint _DistanceFadeMode;
    uint _UseDither;
    uint _OutlineVertexR2Width;
    uint _OutlineVectorUVMode;
    uint _Invisible;
    uint _UseMain2ndTex;
    uint _Main2ndTexIsMSDF;
    uint _Main2ndTexIsDecal;
    uint _Main2ndTexIsLeftOnly;
    uint _Main2ndTexIsRightOnly;
    uint _Main2ndTexShouldCopy;
    uint _Main2ndTexShouldFlipMirror;
    uint _Main2ndTexShouldFlipCopy;
    uint _UseMain3rdTex;
    uint _Main3rdTexIsMSDF;
    uint _Main3rdTexIsDecal;
    uint _Main3rdTexIsLeftOnly;
    uint _Main3rdTexIsRightOnly;
    uint _Main3rdTexShouldCopy;
    uint _Main3rdTexShouldFlipMirror;
    uint _Main3rdTexShouldFlipCopy;
    uint _UseShadow;
    uint _ShadowPostAO;
    uint _UseRimShade;
    uint _UseBacklight;
    uint _BacklightReceiveShadow;
    uint _UseBumpMap;
    uint _UseBump2ndMap;
    uint _UseAnisotropy;
    uint _Anisotropy2Reflection;
    uint _Anisotropy2MatCap;
    uint _Anisotropy2MatCap2nd;
    uint _UseReflection;
    uint _ApplySpecular;
    uint _ApplySpecularFA;
    uint _ApplyReflection;
    uint _SpecularToon;
    uint _ReflectionApplyTransparency;
    uint _ReflectionCubeOverride;
    uint _UseMatCap;
    uint _MatCapApplyTransparency;
    uint _MatCapPerspective;
    uint _MatCapZRotCancel;
    uint _MatCapCustomNormal;
    uint _UseMatCap2nd;
    uint _MatCap2ndApplyTransparency;
    uint _MatCap2ndPerspective;
    uint _MatCap2ndZRotCancel;
    uint _MatCap2ndCustomNormal;
    uint _UseRim;
    uint _RimApplyTransparency;
    uint _UseGlitter;
    uint _GlitterColorTex_UVMode;
    uint _GlitterApplyTransparency;
    uint _GlitterApplyShape;
    uint _GlitterAngleRandomize;
    uint _UseEmission;
    uint _EmissionUseGrad;
    uint _UseEmission2nd;
    uint _Emission2ndUseGrad;
    uint _UseParallax;
    uint _UsePOM;
    uint _UseAudioLink;
    uint _AudioLink2Main2nd;
    uint _AudioLink2Main3rd;
    uint _AudioLink2Emission;
    uint _AudioLink2Emission2nd;
    uint _AudioLink2Vertex;
    uint _AudioLinkAsLocal;
    uint _OutlineLitApplyTex;
    uint _OutlineLitShadowReceive;
    uint _OutlineDeleteMesh;
    uint _OutlineDisableInVR;
    float4 _AudioTexture_TexelSize;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    // mtl_VertexID generated in compute kernel,
    // mtl_BaseVertex generated in compute kernel,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(mtl_VertexID, mtl_BaseVertex, vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.TEXCOORD4 = input.cp[controlPointID].TEXCOORD4;
        output.TEXCOORD5 = input.cp[controlPointID].TEXCOORD5;
        output.TEXCOORD6 = input.cp[controlPointID].TEXCOORD6;
        output.TEXCOORD7 = input.cp[controlPointID].TEXCOORD7;
        output.COLOR0 = input.cp[controlPointID].COLOR0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float4 u_xlat1;
    int2 u_xlati1;
    bool4 u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    bool2 u_xlatb3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float3 u_xlat11;
    float u_xlat22;
    bool2 u_xlatb23;
    int2 u_xlati24;
    bool2 u_xlatb24;
    float u_xlat33;
    float u_xlat34;
    // fork_phase2
    {
        if((VGlobals._Invisible)!=uint(0)){
            tessFactor.edgeTessellationFactor[0] = 0.0;
            tessFactor.edgeTessellationFactor[1] = 0.0;
            tessFactor.edgeTessellationFactor[2] = 0.0;
            tessFactor.insideTessellationFactor = 0.0;
            return;
        }
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].mtl_Position.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].mtl_Position.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].mtl_Position.zzz, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].mtl_Position.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].mtl_Position.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].mtl_Position.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat3.xyz = u_xlat2.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].mtl_Position.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].mtl_Position.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].mtl_Position.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat4.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat4.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat6.x = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
        u_xlat7.x = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat7.xyz = float3(u_xlat33) * u_xlat7.xyz;
        u_xlat8.x = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat8.y = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat8.z = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
        u_xlat9.xyz = u_xlat2.xyz + u_xlat4.xyz;
        u_xlat9.xyz = fma(u_xlat9.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat9.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
        u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.x = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat4.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat4.xyz;
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.y = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.z = max(u_xlat33, 1.0);
        u_xlat9.xyz = min(u_xlat9.xyz, float3(VGlobals._TessFactorMax));
        u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
        u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
        u_xlat11.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat34 = dot(u_xlat11.xyz, u_xlat11.xyz);
        u_xlat34 = rsqrt(u_xlat34);
        u_xlat11.xyz = u_xlat11.xyz * float3(u_xlat34);
        u_xlat0.y = dot(u_xlat7.xyz, u_xlat11.xyz);
        u_xlat2.xyz = (-u_xlat4.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat22 = rsqrt(u_xlat22);
        u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
        u_xlat0.z = dot(u_xlat8.xyz, u_xlat2.xyz);
        u_xlat2.xyz = abs(u_xlat0.zxy) + abs(u_xlat0.yzx);
        u_xlat0.xyz = fma((-u_xlat2.xyz), float3(0.5, 0.5, 0.5), float3(1.0, 1.0, 1.0));
        u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
        u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xyz;
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat34 = u_xlat0.y + u_xlat0.x;
        u_xlat34 = u_xlat0.z + u_xlat34;
        u_xlat0.w = u_xlat34 * 0.333333343;
        u_xlat1.xy = u_xlat1.xy / abs(u_xlat1.zz);
        u_xlat1.zw = u_xlat3.xy / abs(u_xlat3.zz);
        u_xlat2.xy = u_xlat5.xy / abs(u_xlat5.zz);
        u_xlatb24.xy = (float2(1.00999999, 1.00999999)<u_xlat1.xy);
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat1.zw);
        u_xlati24.xy = int2((uint2(u_xlatb24.xy) * 0xffffffffu) & (uint2(u_xlatb3.xy) * 0xffffffffu));
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat2.xy);
        u_xlati24.xy = int2((uint2(u_xlatb3.xy) * 0xffffffffu) & uint2(u_xlati24.xy));
        u_xlatb1 = (u_xlat1<float4(-1.00999999, -1.00999999, -1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb1.zw) * 0xffffffffu) & (uint2(u_xlatb1.xy) * 0xffffffffu));
        u_xlatb23.xy = (u_xlat2.xy<float2(-1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb23.xy) * 0xffffffffu) & uint2(u_xlati1.xy));
        u_xlati1.x = int(uint(u_xlati1.x) | uint(u_xlati24.x));
        u_xlati1.x = int(uint(u_xlati24.y) | uint(u_xlati1.x));
        u_xlati1.x = int(uint(u_xlati1.y) | uint(u_xlati1.x));
        u_xlat0 = (u_xlati1.x != 0) ? float4(0.0, 0.0, 0.0, 0.0) : u_xlat0;
        tessFactor.edgeTessellationFactor[0] = u_xlat0.x;
        tessFactor.edgeTessellationFactor[1] = u_xlat0.y;
        tessFactor.edgeTessellationFactor[2] = u_xlat0.z;
        tessFactor.insideTessellationFactor = u_xlat0.w;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float TEXCOORD7 [[ user(TEXCOORD7) ]];
};
		template <typename UVecType> UVecType bitFieldInsert(const UVecType width, const UVecType offset, const UVecType src2, const UVecType src3)
		{
			UVecType bitmask = (((UVecType(1) << width)-1) << offset) & 0xffffffff;
			return ((src2 << offset) & bitmask) | (src3 & ~bitmask);
		}; 
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    // mtl_VertexID unused,
    // mtl_BaseVertex unused,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    texture2d<float, access::sample > _AudioLinkLocalMap [[ texture(0) ]] ,
    texture2d<float, access::sample > _OutlineWidthMask [[ texture(1) ]] ,
    texture2d<float, access::sample > _OutlineVectorTex [[ texture(2) ]] ,
    texture2d<float, access::sample > _AudioTexture [[ texture(3) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    constexpr sampler lil_sampler_trilinear_repeat(filter::linear,mip_filter::linear,address::repeat);
    constexpr sampler lil_sampler_linear_clamp(filter::linear,mip_filter::nearest,address::clamp_to_edge);
        float4 phase0_Input0_1[3];
        phase0_Input0_1[2] = float4(input.cp[2].TEXCOORD0, input.cp[2].TEXCOORD1);
        phase0_Input0_1[1] = float4(input.cp[1].TEXCOORD0, input.cp[1].TEXCOORD1);
        phase0_Input0_1[0] = float4(input.cp[0].TEXCOORD0, input.cp[0].TEXCOORD1);
        float4 phase0_Input0_2[3];
        phase0_Input0_2[2] = float4(input.cp[2].TEXCOORD2, input.cp[2].TEXCOORD3);
        phase0_Input0_2[1] = float4(input.cp[1].TEXCOORD2, input.cp[1].TEXCOORD3);
        phase0_Input0_2[0] = float4(input.cp[0].TEXCOORD2, input.cp[0].TEXCOORD3);
    float4 phase0_Output0_4;
    float4 phase0_Output0_5;
    float3 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    int u_xlati4;
    uint u_xlatu4;
    bool4 u_xlatb4;
    float4 u_xlat5;
    float4 u_xlat6;
    int u_xlati6;
    bool2 u_xlatb6;
    float4 u_xlat7;
    int4 u_xlati7;
    bool4 u_xlatb7;
    float4 u_xlat8;
    int4 u_xlati8;
    bool4 u_xlatb8;
    float4 u_xlat9;
    int4 u_xlati9;
    float4 u_xlat10;
    bool4 u_xlatb10;
    float4 u_xlat11;
    int4 u_xlati11;
    float4 u_xlat12;
    bool u_xlatb13;
    float3 u_xlat16;
    float3 u_xlat17;
    int2 u_xlati17;
    uint u_xlatu17;
    bool u_xlatb17;
    int u_xlati19;
    float2 u_xlat21;
    bool u_xlatb26;
    float2 u_xlat30;
    bool u_xlatb30;
    bool2 u_xlatb32;
    float u_xlat39;
    int u_xlati39;
    bool u_xlatb39;
    float u_xlat42;
    uint u_xlatu42;
    bool u_xlatb42;
    float u_xlat43;
    int u_xlati43;
    uint u_xlatu43;
    bool u_xlatb43;
    float u_xlat46;
    float4 TempArray0[4];
    u_xlatb0 = int(VGlobals._Invisible)!=0x0;
    u_xlatb13 = int(VGlobals._OutlineDisableInVR)!=0x0;
    u_xlatb26 = 9.99999997e-07<abs(VGlobals.hlslcc_mtx4x4glstate_matrix_projection[2].x);
    u_xlatb13 = u_xlatb26 && u_xlatb13;
    u_xlatb0 = u_xlatb13 || u_xlatb0;
    if(!u_xlatb0){
        u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].mtl_Position.xyz;
        u_xlat0.xyz = fma(mtl_TessCoord.xxx, input.cp[0].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat0.xyz = fma(mtl_TessCoord.zzz, input.cp[2].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat1 = mtl_TessCoord.yyyy * phase0_Input0_1[1];
        u_xlat1 = fma(mtl_TessCoord.xxxx, phase0_Input0_1[0], u_xlat1);
        u_xlat1 = fma(mtl_TessCoord.zzzz, phase0_Input0_1[2], u_xlat1);
        u_xlat2 = mtl_TessCoord.yyyy * phase0_Input0_2[1];
        u_xlat2 = fma(mtl_TessCoord.xxxx, phase0_Input0_2[0], u_xlat2);
        u_xlat2 = fma(mtl_TessCoord.zzzz, phase0_Input0_2[2], u_xlat2);
        u_xlat3 = mtl_TessCoord.yyyy * input.cp[1].COLOR0;
        u_xlat3 = fma(mtl_TessCoord.xxxx, input.cp[0].COLOR0, u_xlat3);
        u_xlat3 = fma(mtl_TessCoord.zzzz, input.cp[2].COLOR0, u_xlat3);
        u_xlat4.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
        u_xlat4.xyz = fma(mtl_TessCoord.xxx, input.cp[0].NORMAL0.xyz, u_xlat4.xyz);
        u_xlat4.xyz = fma(mtl_TessCoord.zzz, input.cp[2].NORMAL0.xyz, u_xlat4.xyz);
        u_xlat5 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
        u_xlat5 = fma(mtl_TessCoord.xxxx, input.cp[0].TANGENT0, u_xlat5);
        u_xlat5 = fma(mtl_TessCoord.zzzz, input.cp[2].TANGENT0, u_xlat5);
        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat39 = rsqrt(u_xlat39);
        u_xlat4.xyz = float3(u_xlat39) * u_xlat4.xyz;
        u_xlat39 = dot(input.cp[0].mtl_Position.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat6.xyz = float3(u_xlat39) * input.cp[0].NORMAL0.xyz;
        u_xlat39 = dot(input.cp[1].mtl_Position.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat7.xyz = float3(u_xlat39) * input.cp[1].NORMAL0.xyz;
        u_xlat39 = dot(input.cp[2].mtl_Position.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat8.xyz = float3(u_xlat39) * input.cp[2].NORMAL0.xyz;
        u_xlat7.xyz = u_xlat7.xyz * mtl_TessCoord.yyy;
        u_xlat6.xyz = fma(u_xlat6.xyz, mtl_TessCoord.xxx, u_xlat7.xyz);
        u_xlat6.xyz = fma(u_xlat8.xyz, mtl_TessCoord.zzz, u_xlat6.xyz);
        u_xlat0.xyz = fma(u_xlat6.xyz, float3(VGlobals._TessStrength), u_xlat0.xyz);
        u_xlat6.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
        u_xlat7.xyz = u_xlat5.yzx * u_xlat4.zxy;
        u_xlat7.xyz = fma(u_xlat4.yzx, u_xlat5.zxy, (-u_xlat7.xyz));
        u_xlat39 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat39 = rsqrt(u_xlat39);
        u_xlat7.xyz = float3(u_xlat39) * u_xlat7.xyz;
        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat39 = sqrt(u_xlat39);
        u_xlat39 = u_xlat39 * u_xlat5.w;
        u_xlat7.xyz = float3(u_xlat39) * u_xlat7.xyz;
        u_xlatb39 = int(VGlobals._UseAudioLink)!=0x0;
        u_xlatb43 = int(VGlobals._AudioLink2Vertex)!=0x0;
        u_xlatb39 = u_xlatb39 && u_xlatb43;
        if(u_xlatb39){
            u_xlatb32.xy = (int2(VGlobals._AudioLinkVertexUVMode)==int2(0x1, 0x2));
            u_xlat8.xyz = u_xlat0.xyz + (-VGlobals._AudioLinkVertexStart.xyz);
            u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat39 = sqrt(u_xlat39);
            u_xlat39 = fma(u_xlat39, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat39 = (u_xlatb32.x) ? u_xlat39 : VGlobals._AudioLinkVertexUVParams.y;
            u_xlat8.x = sin(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat9.x = cos(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat21.xy = u_xlat1.xy + float2(-0.5, -0.5);
            u_xlat43 = u_xlat8.x * u_xlat21.y;
            u_xlat43 = fma(u_xlat21.x, u_xlat9.x, (-u_xlat43));
            u_xlat43 = u_xlat43 + 0.5;
            u_xlat43 = fma(u_xlat43, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat8.x = (u_xlatb32.y) ? u_xlat43 : u_xlat39;
            if((VGlobals._AudioLinkAsLocal)!=uint(0)){
                u_xlat39 = (-VGlobals._Time.y) * VGlobals._AudioLinkLocalMapParams.x;
                u_xlat39 = u_xlat39 * VGlobals._AudioLinkLocalMapParams.y;
                u_xlat39 = u_xlat39 * 0.0166666675;
                u_xlat39 = fract(u_xlat39);
                u_xlat39 = u_xlat39 + VGlobals._AudioLinkLocalMapParams.z;
                u_xlat9.x = u_xlat39 + u_xlat8.x;
                u_xlat9.y = VGlobals._AudioLinkVertexUVParams.w;
                u_xlat39 = _AudioLinkLocalMap.sample(lil_sampler_trilinear_repeat, u_xlat9.xy, level(0.0)).x;
            } else {
                u_xlat43 = float(_AudioTexture.get_width(0x0));
                u_xlati43 = int(u_xlat43);
                u_xlatb43 = 0x10<u_xlati43;
                if(u_xlatb43){
                    u_xlat8.y = VGlobals._AudioLinkVertexUVParams.w * 0.0625;
                    u_xlat39 = _AudioTexture.sample(lil_sampler_linear_clamp, u_xlat8.xy, level(0.0)).x;
                    u_xlat39 = u_xlat39;
                    u_xlat39 = clamp(u_xlat39, 0.0f, 1.0f);
                } else {
                    u_xlat43 = fma(VGlobals._Time.y, VGlobals._AudioLinkDefaultValue.z, (-u_xlat8.x));
                    u_xlat43 = fract(u_xlat43);
                    u_xlat43 = u_xlat43 + VGlobals._AudioLinkDefaultValue.w;
                    u_xlat43 = clamp(u_xlat43, 0.0f, 1.0f);
                    u_xlat43 = u_xlat43 * VGlobals._AudioLinkDefaultValue.y;
                    u_xlat39 = fma((-u_xlat43), VGlobals._AudioLinkDefaultValue.x, VGlobals._AudioLinkDefaultValue.x);
                    u_xlat39 = clamp(u_xlat39, 0.0f, 1.0f);
                }
            }
            u_xlat8.xyz = fma(u_xlat4.xyz, VGlobals._AudioLinkVertexStrength.www, VGlobals._AudioLinkVertexStrength.xyz);
            u_xlat0.xyz = fma(u_xlat8.xyz, float3(u_xlat39), u_xlat0.xyz);
        }
        TempArray0[0].xy = u_xlat6.xy;
        TempArray0[1].xy = u_xlat1.zw;
        TempArray0[2].xy = u_xlat2.xy;
        TempArray0[3].xy = u_xlat2.zw;
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz);
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, u_xlat0.yyy, u_xlat8.xyz);
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat8.xyz);
        u_xlat39 = VGlobals._OutlineWidth * 0.00999999978;
        u_xlat43 = _OutlineWidthMask.sample(lil_sampler_trilinear_repeat, u_xlat6.xy, level(0.0)).x;
        u_xlat39 = u_xlat39 * u_xlat43;
        u_xlatb6.xy = (int2(VGlobals._OutlineVertexR2Width)==int2(0x1, 0x2));
        u_xlat43 = u_xlat3.x * u_xlat39;
        u_xlat39 = (u_xlatb6.x) ? u_xlat43 : u_xlat39;
        u_xlat42 = u_xlat3.w * u_xlat39;
        u_xlat39 = (u_xlatb6.y) ? u_xlat42 : u_xlat39;
        u_xlat6.xzw = (-u_xlat8.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat42 = dot(u_xlat6.xzw, u_xlat6.xzw);
        u_xlat42 = sqrt(u_xlat42);
        u_xlat42 = min(u_xlat42, 1.0);
        u_xlat42 = u_xlat42 + -1.0;
        u_xlat42 = fma(VGlobals._OutlineFixWidth, u_xlat42, 1.0);
        u_xlat42 = u_xlat39 * u_xlat42;
        u_xlatu43 = VGlobals._OutlineVectorUVMode;
        u_xlat6.xz = TempArray0[int(u_xlatu43)].xy;
        u_xlat6.xzw = _OutlineVectorTex.sample(lil_sampler_trilinear_repeat, u_xlat6.xz, level(0.0)).xyw;
        u_xlat6.x = u_xlat6.x * u_xlat6.w;
        u_xlat6.xz = fma(u_xlat6.xz, float2(2.0, 2.0), float2(-1.0, -1.0));
        u_xlat6.xz = u_xlat6.xz * float2(VGlobals._OutlineVectorScale);
        u_xlat43 = dot(u_xlat6.xz, u_xlat6.xz);
        u_xlat43 = min(u_xlat43, 1.0);
        u_xlat43 = (-u_xlat43) + 1.0;
        u_xlat43 = sqrt(u_xlat43);
        u_xlat8.xyz = u_xlat7.xyz * u_xlat6.zzz;
        u_xlat6.xzw = fma(u_xlat6.xxx, u_xlat5.xyz, u_xlat8.xyz);
        u_xlat6.xzw = fma(float3(u_xlat43), u_xlat4.xyz, u_xlat6.xzw);
        u_xlat3.xyz = fma(u_xlat3.xyz, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
        u_xlat7.xyz = u_xlat7.xyz * u_xlat3.yyy;
        u_xlat5.xyz = fma(u_xlat3.xxx, u_xlat5.xyz, u_xlat7.xyz);
        u_xlat3.xyz = fma(u_xlat3.zzz, u_xlat4.xyz, u_xlat5.xyz);
        u_xlat3.xyz = (u_xlatb6.y) ? u_xlat3.xyz : u_xlat6.xzw;
        u_xlat0.xyz = fma(u_xlat3.xyz, float3(u_xlat42), u_xlat0.xyz);
        u_xlatb3 = VGlobals.unity_OrthoParams.w==0.0;
        u_xlat16.xyz = VGlobals._WorldSpaceCameraPos.xyzx.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz;
        u_xlat16.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz, VGlobals._WorldSpaceCameraPos.xyzx.xxx, u_xlat16.xyz);
        u_xlat16.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz, VGlobals._WorldSpaceCameraPos.xyzx.zzz, u_xlat16.xyz);
        u_xlat16.xyz = u_xlat16.xyz + VGlobals.hlslcc_mtx4x4unity_WorldToObject[3].xyz;
        u_xlat16.xyz = (-u_xlat0.xyz) + u_xlat16.xyz;
        u_xlat5.xyz = VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].zzz;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz, VGlobals.hlslcc_mtx4x4unity_MatrixV[0].zzz, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz, VGlobals.hlslcc_mtx4x4unity_MatrixV[2].zzz, u_xlat5.xyz);
        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat16.xyz : u_xlat5.xyz;
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat3.xyz = float3(u_xlat42) * u_xlat3.xyz;
        u_xlat0.xyz = fma((-u_xlat3.xyz), float3(VGlobals._OutlineZBias), u_xlat0.xyz);
        u_xlat3.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
        u_xlat5 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat5);
        u_xlat5 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat5);
        u_xlat5 = u_xlat5 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
        u_xlat6.x = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat4.xyz = float3(u_xlat42) * u_xlat6.xyz;
        u_xlat42 = dot(VGlobals._LightColor0.xyz, float3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat6.xyz = VGlobals.unity_SHAg.xyz * float3(0.333332986, 0.333332986, 0.333332986);
        u_xlat6.xyz = fma(VGlobals.unity_SHAr.xyz, float3(0.333332986, 0.333332986, 0.333332986), u_xlat6.xyz);
        u_xlat6.xyz = fma(VGlobals.unity_SHAb.xyz, float3(0.333332986, 0.333332986, 0.333332986), u_xlat6.xyz);
        u_xlat6.w = abs(u_xlat6.y);
        u_xlat43 = dot(VGlobals._LightDirectionOverride.xyz, VGlobals._LightDirectionOverride.xyz);
        u_xlat43 = sqrt(u_xlat43);
        u_xlat7.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * VGlobals._LightDirectionOverride.yyy;
        u_xlat7.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals._LightDirectionOverride.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, VGlobals._LightDirectionOverride.zzz, u_xlat7.xyz);
        u_xlat46 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat46 = rsqrt(u_xlat46);
        u_xlat7.xyz = float3(u_xlat46) * u_xlat7.xyz;
        u_xlat7.xyz = float3(u_xlat43) * u_xlat7.xyz;
        u_xlatb43 = float(0.0)!=VGlobals._LightDirectionOverride.w;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : VGlobals._LightDirectionOverride.xyz;
        u_xlat8.xyz = fma(VGlobals._WorldSpaceLightPos0.xyz, float3(u_xlat42), u_xlat6.xwz);
        u_xlat7.xyz = u_xlat7.xyz + u_xlat8.xyz;
        u_xlat43 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat7.xyz = float3(u_xlat43) * u_xlat7.xyz;
        u_xlat6.xyz = fma(VGlobals._WorldSpaceLightPos0.xyz, float3(u_xlat42), u_xlat6.xyz);
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlatb43 = u_xlat42<9.99999997e-07;
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat6.xyz = float3(u_xlat42) * u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz * float3(0.666665971, 0.666665971, 0.666665971);
        u_xlat6.xyz = (bool(u_xlatb43)) ? float3(0.0, 0.0, 0.0) : u_xlat6.xyz;
        u_xlat8 = u_xlat6.yzzx * u_xlat6.xyzz;
        u_xlat42 = dot(VGlobals.unity_SHBr, u_xlat8);
        u_xlat9.x = u_xlat42 + VGlobals.unity_SHAr.w;
        u_xlat42 = dot(VGlobals.unity_SHBg, u_xlat8);
        u_xlat9.y = u_xlat42 + VGlobals.unity_SHAg.w;
        u_xlat42 = dot(VGlobals.unity_SHBb, u_xlat8);
        u_xlat9.z = u_xlat42 + VGlobals.unity_SHAb.w;
        u_xlat42 = u_xlat6.y * u_xlat6.y;
        u_xlat42 = fma(u_xlat6.x, u_xlat6.x, (-u_xlat42));
        u_xlat8.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat42), u_xlat9.xyz);
        u_xlat9.x = dot(VGlobals.unity_SHAr.xyz, u_xlat6.xyz);
        u_xlat9.y = dot(VGlobals.unity_SHAg.xyz, u_xlat6.xyz);
        u_xlat9.z = dot(VGlobals.unity_SHAb.xyz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat8.xyz + u_xlat9.xyz;
        u_xlat6.xyz = u_xlat6.xyz + VGlobals._LightColor0.xyz;
        u_xlat6.xyz = max(u_xlat6.xyz, float3(VGlobals._LightMinLimit));
        u_xlat6.xyz = min(u_xlat6.xyz, float3(VGlobals._LightMaxLimit));
        u_xlat42 = dot(u_xlat6.xyz, float3(0.333333343, 0.333333343, 0.333333343));
        u_xlat8.xyz = (-u_xlat6.xyz) + float3(u_xlat42);
        u_xlat6.xyz = fma(float3(VGlobals._MonochromeLighting), u_xlat8.xyz, u_xlat6.xyz);
        u_xlat8.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
        phase0_Output0_5.xyz = fma(float3(VGlobals._AsUnlit), u_xlat8.xyz, u_xlat6.xyz);
        u_xlat17.xz = u_xlat4.yy * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].xy;
        u_xlat4.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].xy, u_xlat4.xx, u_xlat17.xz);
        u_xlat4.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].xy, u_xlat4.zz, u_xlat4.xy);
        u_xlat42 = dot(u_xlat4.xy, u_xlat4.xy);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat4.xy = float2(u_xlat42) * u_xlat4.xy;
        u_xlat30.xy = u_xlat7.yy * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].xy;
        u_xlat30.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].xy, u_xlat7.xx, u_xlat30.xy);
        u_xlat30.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].xy, u_xlat7.zz, u_xlat30.xy);
        u_xlat42 = dot(u_xlat30.xy, u_xlat30.xy);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat30.xy = float2(u_xlat42) * u_xlat30.xy;
        u_xlat42 = dot(u_xlat4.xy, u_xlat30.xy);
        phase0_Output0_4.w = fma(u_xlat42, 0.5, 0.5);
        u_xlatb42 = -9.99999997e-07<u_xlat39;
        u_xlatb39 = u_xlat39<9.99999997e-07;
        u_xlatb39 = u_xlatb39 && u_xlatb42;
        u_xlatb42 = int(VGlobals._OutlineDeleteMesh)!=0x0;
        u_xlatb39 = u_xlatb39 && u_xlatb42;
        switch(int(int(VGlobals._IDMaskFrom))){
            case 0x0:
                u_xlatu42 = uint(u_xlat1.x);
                break;
            case 0x1:
                u_xlatu42 = uint(u_xlat1.z);
                break;
            case 0x2:
                u_xlatu42 = uint(u_xlat2.x);
                break;
            case 0x3:
                u_xlatu42 = uint(u_xlat2.z);
                break;
            case 0x4:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD4.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD4.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD4.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x5:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD5.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD5.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD5.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x6:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD6.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD6.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD6.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x7:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD7.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD7.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD7.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            default:
                u_xlatu42 = input.cp[0].TEXCOORD8.x;
                break;
            }
            if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                u_xlat4.x = rint(VGlobals._IDMask1);
                u_xlat4.yzw = rint(float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4));
                u_xlat4.x = dot(u_xlat4, float4(1.0, 2.0, 4.0, 8.0));
                u_xlat6.x = rint(VGlobals._IDMask5);
                u_xlat6.yzw = rint(float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8));
                u_xlat17.x = dot(u_xlat6, float4(16.0, 32.0, 64.0, 128.0));
                u_xlat4.x = u_xlat17.x + u_xlat4.x;
                u_xlatu4 = uint(u_xlat4.x);
                u_xlatb17 = int(u_xlatu42)!=0x0;
                u_xlati4 = int(u_xlatu42 & u_xlatu4);
                u_xlatb4.x = int(u_xlatu42)==u_xlati4;
                u_xlati4 = int((uint(u_xlatb4.x) * 0xffffffffu) & (uint(u_xlatb17) * 0xffffffffu));
            } else {
                u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                u_xlat6.xy = float2(u_xlati17.yx);
                u_xlati7 = int4(u_xlatu42) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                u_xlat7 = float4(u_xlati7.wxyz);
                u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                u_xlat17.xy = float2(u_xlati17.xy);
                u_xlat8.xy = u_xlat6.yx + float2(1.0, 1.0);
                u_xlat8.xy = clamp(u_xlat8.xy, 0.0f, 1.0f);
                u_xlat9 = u_xlat7.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
                u_xlat6.x = (-u_xlat6.x);
                u_xlat6.x = clamp(u_xlat6.x, 0.0f, 1.0f);
                u_xlat7 = (-u_xlat7);
                u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
                u_xlat8.zw = u_xlat9.zw;
                u_xlat6.yzw = u_xlat7.yzw;
                u_xlat6 = u_xlat6 * u_xlat8;
                u_xlat9.zw = u_xlat17.xy + float2(1.0, 1.0);
                u_xlat9.zw = clamp(u_xlat9.zw, 0.0f, 1.0f);
                u_xlat7.yz = (-u_xlat17.xy);
                u_xlat7.yz = clamp(u_xlat7.yz, 0.0f, 1.0f);
                u_xlat7.w = 1.0;
                u_xlat7 = u_xlat7 * u_xlat9;
                u_xlat8.x = VGlobals._IDMask1;
                u_xlat8.yzw = float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4);
                u_xlat17.x = dot(u_xlat6, u_xlat8);
                u_xlat6.x = VGlobals._IDMask5;
                u_xlat6.yzw = float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8);
                u_xlat30.x = dot(u_xlat7, u_xlat6);
                u_xlat17.x = u_xlat30.x + u_xlat17.x;
                u_xlati4 = int((float(0.0)!=u_xlat17.x) ? 0xFFFFFFFFu : uint(0));
            }
            if((VGlobals._IDMaskControlsDissolve)!=uint(0)){
                if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                    u_xlat6.x = rint(VGlobals._IDMaskPrior1);
                    u_xlat6.yzw = rint(float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4));
                    u_xlat17.x = dot(u_xlat6, float4(1.0, 2.0, 4.0, 8.0));
                    u_xlat6.x = rint(VGlobals._IDMaskPrior5);
                    u_xlat6.yzw = rint(float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8));
                    u_xlat30.x = dot(u_xlat6, float4(16.0, 32.0, 64.0, 128.0));
                    u_xlat17.x = u_xlat30.x + u_xlat17.x;
                    u_xlatu17 = uint(u_xlat17.x);
                    u_xlatb30 = int(u_xlatu42)!=0x0;
                    u_xlati17.x = int(u_xlatu42 & u_xlatu17);
                    u_xlatb17 = int(u_xlatu42)==u_xlati17.x;
                    u_xlati19 = int((uint(u_xlatb17) * 0xffffffffu) & (uint(u_xlatb30) * 0xffffffffu));
                } else {
                    u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                    u_xlat7.xy = float2(u_xlati17.yx);
                    u_xlati8 = int4(u_xlatu42) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                    u_xlat8 = float4(u_xlati8.wxyz);
                    u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                    u_xlat17.xy = float2(u_xlati17.xy);
                    u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                    u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                    u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                    u_xlat7.x = (-u_xlat7.x);
                    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                    u_xlat8 = (-u_xlat8);
                    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                    u_xlat9.zw = u_xlat10.zw;
                    u_xlat7.yzw = u_xlat8.yzw;
                    u_xlat7 = u_xlat7 * u_xlat9;
                    u_xlat10.zw = u_xlat17.xy + float2(1.0, 1.0);
                    u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                    u_xlat8.yz = (-u_xlat17.xy);
                    u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                    u_xlat8.w = 1.0;
                    u_xlat8 = u_xlat8 * u_xlat10;
                    u_xlat9.x = VGlobals._IDMaskPrior1;
                    u_xlat9.yzw = float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4);
                    u_xlat42 = dot(u_xlat7, u_xlat9);
                    u_xlat7.x = VGlobals._IDMaskPrior5;
                    u_xlat7.yzw = float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8);
                    u_xlat17.x = dot(u_xlat8, u_xlat7);
                    u_xlat42 = u_xlat42 + u_xlat17.x;
                    u_xlati19 = int((float(0.0)!=u_xlat42) ? 0xFFFFFFFFu : uint(0));
                }
                u_xlati6 = int((u_xlati4!=u_xlati19) ? 0xFFFFFFFFu : uint(0));
                u_xlati4 = int(uint(u_xlati4) & uint(u_xlati19));
            } else {
                u_xlati6 = int(int(0xffffffffu));
                u_xlati19 = int(0x0);
            }
            u_xlati39 = int((uint(u_xlatb39) * 0xffffffffu) | uint(u_xlati4));
            u_xlatb4 = (float4(VGlobals._UDIMDiscardMode, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV)==float4(0.0, 0.0, 1.0, 2.0));
            u_xlatb42 = VGlobals._UDIMDiscardCompile==1.0;
            u_xlatb42 = u_xlatb42 && u_xlatb4.x;
            u_xlat4.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb4.yzw));
            u_xlat7 = u_xlat1 * u_xlat4.xxyy;
            u_xlat4.xy = u_xlat7.zw + u_xlat7.xy;
            u_xlat4.xy = fma(u_xlat2.xy, u_xlat4.zz, u_xlat4.xy);
            u_xlatb30 = VGlobals._UDIMDiscardUV==3.0;
            u_xlat30.x = u_xlatb30 ? 1.0 : float(0.0);
            u_xlat4.xy = fma(u_xlat2.zw, u_xlat30.xx, u_xlat4.xy);
            u_xlatb7 = (u_xlat4.xxxx>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb8 = (u_xlat4.xxxx<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati9 = int4((uint4(u_xlatb7) * 0xffffffffu) & (uint4(u_xlatb8) * 0xffffffffu));
            u_xlat9 = as_type<float4>(uint4(u_xlati9) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlatb10 = (u_xlat4.yyyy>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb4 = (u_xlat4.yyyy<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati11 = int4((uint4(u_xlatb4) * 0xffffffffu) & (uint4(u_xlatb10) * 0xffffffffu));
            u_xlat11 = as_type<float4>(uint4(u_xlati11) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow0_0, VGlobals._UDIMDiscardRow0_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow0_2, VGlobals._UDIMDiscardRow0_3);
            u_xlat4.x = dot(u_xlat12, u_xlat9);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow1_0, VGlobals._UDIMDiscardRow1_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow1_2, VGlobals._UDIMDiscardRow1_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat17.x = u_xlat17.x * u_xlat11.y;
            u_xlat4.x = fma(u_xlat11.x, u_xlat4.x, u_xlat17.x);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow2_0, VGlobals._UDIMDiscardRow2_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow2_2, VGlobals._UDIMDiscardRow2_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat4.x = fma(u_xlat11.z, u_xlat17.x, u_xlat4.x);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow3_0, VGlobals._UDIMDiscardRow3_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow3_2, VGlobals._UDIMDiscardRow3_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat4.x = fma(u_xlat11.w, u_xlat17.x, u_xlat4.x);
            u_xlatb8.x = u_xlatb10.x;
            u_xlatb8.y = u_xlatb4.w;
            u_xlatb8.z = u_xlatb7.x;
            u_xlat7 = select(float4(0.0, 0.0, 0.0, 0.0), float4(1.0, 1.0, 1.0, 1.0), bool4(u_xlatb8));
            u_xlat17.x = dot(u_xlat7, u_xlat7);
            u_xlatb17 = u_xlat17.x!=0.0;
            u_xlat17.x = u_xlatb17 ? 1.0 : float(0.0);
            u_xlat4.x = u_xlat17.x * u_xlat4.x;
            u_xlatb4.x = 0.00100000005<u_xlat4.x;
            u_xlatb42 = u_xlatb42 && u_xlatb4.x;
            u_xlati39 = int(uint(u_xlati39) | (uint(u_xlatb42) * 0xffffffffu));
            output.mtl_Position = (int(u_xlati39) != 0) ? float4(as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u))) : u_xlat5;
            u_xlati39 = int(bitFieldInsert(0x1u, 0x1u, uint(u_xlati19), 0x0u));
            u_xlati39 = int(bitFieldInsert(0x1u, 0x0u, uint(u_xlati6), uint(u_xlati39)));
            output.TEXCOORD2.w = float(u_xlati39);
            output.TEXCOORD0 = u_xlat1;
            output.TEXCOORD1 = u_xlat2;
            output.TEXCOORD2.xyz = u_xlat0.xyz;
            phase0_Output0_4.xyz = u_xlat3.xyz;
            phase0_Output0_5.w = 1.0;
        } else {
            output.mtl_Position = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD1 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_4 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_5 = float4(0.0, 0.0, 0.0, 0.0);
        }
    output.TEXCOORD3 = phase0_Output0_4.xyz;
    output.TEXCOORD5 = phase0_Output0_4.w;
    output.TEXCOORD6 = phase0_Output0_5.xyz;
    output.TEXCOORD7 = phase0_Output0_5.w;
        return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation failed: 

program_source:823:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:831:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
                             ^
program_source:832:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
                                               ^
program_source:1037:49: error: member reference base type 'uint' (aka 'unsigned int') is not a structure or union
                u_xlatu3 = input.cp[0].TEXCOORD8.x;
                           ~~~~~~~~~~~~~~~~~~~~~^~



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float3 NORMAL0 [[ attribute(9) ]] ;
    float4 TANGENT0 [[ attribute(10) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    uint mtl_VertexID,
    uint mtl_BaseVertex,
    Mtl_VertexIn input)
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseVertex = 0;
#endif
    mtl_VertexID = mtl_VertexID - mtl_BaseVertex;
    Mtl_VertexOut output;
    output.mtl_Position = input.POSITION0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = input.TEXCOORD1.xy;
    output.TEXCOORD2.xy = input.TEXCOORD2.xy;
    output.TEXCOORD3.xy = input.TEXCOORD3.xy;
    output.TEXCOORD4.xy = input.TEXCOORD4.xy;
    output.TEXCOORD5.xy = input.TEXCOORD5.xy;
    output.TEXCOORD6.xy = input.TEXCOORD6.xy;
    output.TEXCOORD7.xy = input.TEXCOORD7.xy;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TANGENT0 = input.TANGENT0;
    output.TEXCOORD8 = mtl_VertexID;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(11) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float3 NORMAL0 [[ attribute(9) ]] ;
    float4 TANGENT0 [[ attribute(10) ]] ;
    uint TEXCOORD8 [[ attribute(12) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
    float3 unity_LightColor0;
    float3 unity_LightColor1;
    float3 unity_LightColor2;
    float3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
    float4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _LightColor0;
    float4 _SpecColor;
    bool4 unity_MetaVertexControl;
    bool4 unity_MetaFragmentControl;
    int unity_VisualizationMode;
    float unity_OneOverOutputBoost;
    float unity_MaxOutputValue;
    float unity_UseLinearSpace;
    float4 _lilBackgroundTexture_TexelSize;
    float4 _LightDirectionOverride;
    float4 _BackfaceColor;
    float4 _Color;
    float4 _MainTex_ST;
    float4 _MainTex_ScrollRotate;
    float4 _MainTexHSVG;
    float4 _Color2nd;
    float4 _Main2ndTex_ST;
    float4 _Main2ndTex_ScrollRotate;
    float4 _Main2ndDistanceFade;
    float4 _Main2ndTexDecalAnimation;
    float4 _Main2ndTexDecalSubParam;
    float4 _Main2ndDissolveMask_ST;
    float4 _Main2ndDissolveColor;
    float4 _Main2ndDissolveParams;
    float4 _Main2ndDissolvePos;
    float4 _Main2ndDissolveNoiseMask_ST;
    float4 _Main2ndDissolveNoiseMask_ScrollRotate;
    float4 _Color3rd;
    float4 _Main3rdTex_ST;
    float4 _Main3rdTex_ScrollRotate;
    float4 _Main3rdDistanceFade;
    float4 _Main3rdTexDecalAnimation;
    float4 _Main3rdTexDecalSubParam;
    float4 _Main3rdDissolveMask_ST;
    float4 _Main3rdDissolveColor;
    float4 _Main3rdDissolveParams;
    float4 _Main3rdDissolvePos;
    float4 _Main3rdDissolveNoiseMask_ST;
    float4 _Main3rdDissolveNoiseMask_ScrollRotate;
    float4 _ShadowColor;
    float4 _Shadow2ndColor;
    float4 _Shadow3rdColor;
    float4 _ShadowBorderColor;
    float4 _ShadowAOShift;
    float4 _ShadowAOShift2;
    float4 _RimShadeColor;
    float4 _BacklightColor;
    float4 _BacklightColorTex_ST;
    float4 _EmissionColor;
    float4 _EmissionBlink;
    float4 _EmissionMap_ST;
    float4 _EmissionMap_ScrollRotate;
    float4 _EmissionBlendMask_ST;
    float4 _EmissionBlendMask_ScrollRotate;
    float4 _Emission2ndColor;
    float4 _Emission2ndBlink;
    float4 _Emission2ndMap_ST;
    float4 _Emission2ndMap_ScrollRotate;
    float4 _Emission2ndBlendMask_ST;
    float4 _Emission2ndBlendMask_ScrollRotate;
    float4 _BumpMap_ST;
    float4 _Bump2ndMap_ST;
    float4 _Bump2ndScaleMask_ST;
    float4 _AnisotropyTangentMap_ST;
    float4 _AnisotropyScaleMask_ST;
    float4 _AnisotropyShiftNoiseMask_ST;
    float4 _ReflectionColor;
    float4 _MetallicGlossMap_ST;
    float4 _ReflectionColorTex_ST;
    float4 _SmoothnessTex_ST;
    float4 _ReflectionCubeColor;
    float4 _ReflectionCubeTex_HDR;
    float4 _MatCapColor;
    float4 _MatCapTex_ST;
    float4 _MatCapBlendMask_ST;
    float4 _MatCapBlendUV1;
    float4 _MatCapBumpMap_ST;
    float4 _MatCap2ndColor;
    float4 _MatCap2ndTex_ST;
    float4 _MatCap2ndBlendMask_ST;
    float4 _MatCap2ndBlendUV1;
    float4 _MatCap2ndBumpMap_ST;
    float4 _RimColor;
    float4 _RimColorTex_ST;
    float4 _RimIndirColor;
    float4 _GlitterColor;
    float4 _GlitterColorTex_ST;
    float4 _GlitterParams1;
    float4 _GlitterParams2;
    float4 _GlitterShapeTex_ST;
    float4 _GlitterAtras;
    float4 _DistanceFade;
    float4 _DistanceFadeColor;
    float4 _DistanceFadeRimColor;
    float4 _DitherTex_TexelSize;
    float4 _AudioLinkMask_ST;
    float4 _AudioLinkMask_ScrollRotate;
    float4 _AudioLinkDefaultValue;
    float4 _AudioLinkUVParams;
    float4 _AudioLinkStart;
    float4 _AudioLinkVertexUVParams;
    float4 _AudioLinkVertexStart;
    float4 _AudioLinkVertexStrength;
    float4 _AudioLinkLocalMapParams;
    float4 _DissolveMask_ST;
    float4 _DissolveColor;
    float4 _DissolveParams;
    float4 _DissolvePos;
    float4 _DissolveNoiseMask_ST;
    float4 _DissolveNoiseMask_ScrollRotate;
    float4 _OutlineColor;
    float4 _OutlineLitColor;
    float4 _OutlineTex_ST;
    float4 _OutlineTex_ScrollRotate;
    float4 _OutlineTexHSVG;
    float _AsUnlit;
    float _Cutoff;
    float _SubpassCutoff;
    float _FlipNormal;
    float _ShiftBackfaceUV;
    float _VertexLightStrength;
    float _LightMinLimit;
    float _LightMaxLimit;
    float _MonochromeLighting;
    float _AAStrength;
    float _AlphaBoostFA;
    float _MainGradationStrength;
    float _Main2ndTexAngle;
    float _Main2ndEnableLighting;
    float _Main2ndDissolveNoiseStrength;
    float _Main3rdTexAngle;
    float _Main3rdEnableLighting;
    float _Main3rdDissolveNoiseStrength;
    float4 _AlphaMask_ST;
    float _AlphaMaskScale;
    float _AlphaMaskValue;
    float _BackfaceForceShadow;
    float _ShadowStrength;
    float _ShadowNormalStrength;
    float _ShadowBorder;
    float _ShadowBlur;
    float _ShadowStrengthMaskLOD;
    float _ShadowBorderMaskLOD;
    float _ShadowBlurMaskLOD;
    float _Shadow2ndNormalStrength;
    float _Shadow2ndBorder;
    float _Shadow2ndBlur;
    float _Shadow3rdNormalStrength;
    float _Shadow3rdBorder;
    float _Shadow3rdBlur;
    float _ShadowMainStrength;
    float _ShadowEnvStrength;
    float _ShadowBorderRange;
    float _ShadowReceive;
    float _Shadow2ndReceive;
    float _Shadow3rdReceive;
    float _ShadowFlatBlur;
    float _ShadowFlatBorder;
    float _RimShadeNormalStrength;
    float _RimShadeBorder;
    float _RimShadeBlur;
    float _RimShadeFresnelPower;
    float _BacklightNormalStrength;
    float _BacklightBorder;
    float _BacklightBlur;
    float _BacklightDirectivity;
    float _BacklightViewStrength;
    float _BacklightBackfaceMask;
    float _BacklightMainStrength;
    float _BumpScale;
    float _Bump2ndScale;
    float _AnisotropyScale;
    float _AnisotropyTangentWidth;
    float _AnisotropyBitangentWidth;
    float _AnisotropyShift;
    float _AnisotropyShiftNoiseScale;
    float _AnisotropySpecularStrength;
    float _Anisotropy2ndTangentWidth;
    float _Anisotropy2ndBitangentWidth;
    float _Anisotropy2ndShift;
    float _Anisotropy2ndShiftNoiseScale;
    float _Anisotropy2ndSpecularStrength;
    float _Reflectance;
    float _SpecularNormalStrength;
    float _SpecularBorder;
    float _SpecularBlur;
    float _ReflectionNormalStrength;
    float _ReflectionCubeEnableLighting;
    float _Smoothness;
    float _Metallic;
    float _GSAAStrength;
    float _MatCapBlend;
    float _MatCapEnableLighting;
    float _MatCapShadowMask;
    float _MatCapVRParallaxStrength;
    float _MatCapBackfaceMask;
    float _MatCapLod;
    float _MatCapNormalStrength;
    float _MatCapMainStrength;
    float _MatCapBumpScale;
    float _MatCap2ndBlend;
    float _MatCap2ndEnableLighting;
    float _MatCap2ndShadowMask;
    float _MatCap2ndVRParallaxStrength;
    float _MatCap2ndBackfaceMask;
    float _MatCap2ndLod;
    float _MatCap2ndNormalStrength;
    float _MatCap2ndMainStrength;
    float _MatCap2ndBumpScale;
    float _RimNormalStrength;
    float _RimBorder;
    float _RimBlur;
    float _RimFresnelPower;
    float _RimEnableLighting;
    float _RimShadowMask;
    float _RimVRParallaxStrength;
    float _RimBackfaceMask;
    float _RimMainStrength;
    float _RimDirStrength;
    float _RimDirRange;
    float _RimIndirRange;
    float _RimIndirBorder;
    float _RimIndirBlur;
    float _GlitterMainStrength;
    float _GlitterPostContrast;
    float _GlitterSensitivity;
    float _GlitterNormalStrength;
    float _GlitterEnableLighting;
    float _GlitterShadowMask;
    float _GlitterVRParallaxStrength;
    float _GlitterBackfaceMask;
    float _GlitterScaleRandomize;
    float _DistanceFadeRimFresnelPower;
    float _EmissionBlend;
    float _EmissionParallaxDepth;
    float _EmissionFluorescence;
    float _EmissionMainStrength;
    float _EmissionGradSpeed;
    float _Emission2ndBlend;
    float _Emission2ndParallaxDepth;
    float _Emission2ndFluorescence;
    float _Emission2ndMainStrength;
    float _Emission2ndGradSpeed;
    float _Parallax;
    float _ParallaxOffset;
    float _DitherMaxValue;
    float _AudioLink2EmissionGrad;
    float _AudioLink2Emission2ndGrad;
    float _DissolveNoiseStrength;
    float _IDMask1;
    float _IDMask2;
    float _IDMask3;
    float _IDMask4;
    float _IDMask5;
    float _IDMask6;
    float _IDMask7;
    float _IDMask8;
    float _IDMaskPrior1;
    float _IDMaskPrior2;
    float _IDMaskPrior3;
    float _IDMaskPrior4;
    float _IDMaskPrior5;
    float _IDMaskPrior6;
    float _IDMaskPrior7;
    float _IDMaskPrior8;
    float _UDIMDiscardCompile;
    float _UDIMDiscardMode;
    float _UDIMDiscardUV;
    float _UDIMDiscardRow3_0;
    float _UDIMDiscardRow3_1;
    float _UDIMDiscardRow3_2;
    float _UDIMDiscardRow3_3;
    float _UDIMDiscardRow2_0;
    float _UDIMDiscardRow2_1;
    float _UDIMDiscardRow2_2;
    float _UDIMDiscardRow2_3;
    float _UDIMDiscardRow1_0;
    float _UDIMDiscardRow1_1;
    float _UDIMDiscardRow1_2;
    float _UDIMDiscardRow1_3;
    float _UDIMDiscardRow0_0;
    float _UDIMDiscardRow0_1;
    float _UDIMDiscardRow0_2;
    float _UDIMDiscardRow0_3;
    float _lilShadowCasterBias;
    float _OutlineLitScale;
    float _OutlineLitOffset;
    float _OutlineWidth;
    float _OutlineEnableLighting;
    float _OutlineVectorScale;
    float _OutlineFixWidth;
    float _OutlineZBias;
    float _TessEdge;
    float _TessStrength;
    float _TessShrink;
    float _TessFactorMax;
    int _IDMaskIndex1;
    int _IDMaskIndex2;
    int _IDMaskIndex3;
    int _IDMaskIndex4;
    int _IDMaskIndex5;
    int _IDMaskIndex6;
    int _IDMaskIndex7;
    int _IDMaskIndex8;
    uint _IDMaskFrom;
    uint _IDMaskIsBitmap;
    uint _IDMaskControlsDissolve;
    uint _Cull;
    uint _OutlineCull;
    uint _Main2ndTexBlendMode;
    uint _Main2ndTexAlphaMode;
    uint _Main2ndTex_UVMode;
    uint _Main2ndTex_Cull;
    uint _Main3rdTexBlendMode;
    uint _Main3rdTexAlphaMode;
    uint _Main3rdTex_UVMode;
    uint _Main3rdTex_Cull;
    uint _AlphaMaskMode;
    uint _ShadowColorType;
    uint _ShadowMaskType;
    uint _Bump2ndMap_UVMode;
    uint _ReflectionBlendMode;
    uint _MatCapBlendMode;
    uint _MatCap2ndBlendMode;
    uint _RimBlendMode;
    uint _GlitterUVMode;
    uint _EmissionMap_UVMode;
    uint _EmissionBlendMode;
    uint _Emission2ndMap_UVMode;
    uint _Emission2ndBlendMode;
    uint _AudioLinkUVMode;
    uint _AudioLinkMask_UVMode;
    uint _AudioLinkVertexUVMode;
    uint _DistanceFadeMode;
    uint _UseDither;
    uint _OutlineVertexR2Width;
    uint _OutlineVectorUVMode;
    uint _Invisible;
    uint _UseMain2ndTex;
    uint _Main2ndTexIsMSDF;
    uint _Main2ndTexIsDecal;
    uint _Main2ndTexIsLeftOnly;
    uint _Main2ndTexIsRightOnly;
    uint _Main2ndTexShouldCopy;
    uint _Main2ndTexShouldFlipMirror;
    uint _Main2ndTexShouldFlipCopy;
    uint _UseMain3rdTex;
    uint _Main3rdTexIsMSDF;
    uint _Main3rdTexIsDecal;
    uint _Main3rdTexIsLeftOnly;
    uint _Main3rdTexIsRightOnly;
    uint _Main3rdTexShouldCopy;
    uint _Main3rdTexShouldFlipMirror;
    uint _Main3rdTexShouldFlipCopy;
    uint _UseShadow;
    uint _ShadowPostAO;
    uint _UseRimShade;
    uint _UseBacklight;
    uint _BacklightReceiveShadow;
    uint _UseBumpMap;
    uint _UseBump2ndMap;
    uint _UseAnisotropy;
    uint _Anisotropy2Reflection;
    uint _Anisotropy2MatCap;
    uint _Anisotropy2MatCap2nd;
    uint _UseReflection;
    uint _ApplySpecular;
    uint _ApplySpecularFA;
    uint _ApplyReflection;
    uint _SpecularToon;
    uint _ReflectionApplyTransparency;
    uint _ReflectionCubeOverride;
    uint _UseMatCap;
    uint _MatCapApplyTransparency;
    uint _MatCapPerspective;
    uint _MatCapZRotCancel;
    uint _MatCapCustomNormal;
    uint _UseMatCap2nd;
    uint _MatCap2ndApplyTransparency;
    uint _MatCap2ndPerspective;
    uint _MatCap2ndZRotCancel;
    uint _MatCap2ndCustomNormal;
    uint _UseRim;
    uint _RimApplyTransparency;
    uint _UseGlitter;
    uint _GlitterColorTex_UVMode;
    uint _GlitterApplyTransparency;
    uint _GlitterApplyShape;
    uint _GlitterAngleRandomize;
    uint _UseEmission;
    uint _EmissionUseGrad;
    uint _UseEmission2nd;
    uint _Emission2ndUseGrad;
    uint _UseParallax;
    uint _UsePOM;
    uint _UseAudioLink;
    uint _AudioLink2Main2nd;
    uint _AudioLink2Main3rd;
    uint _AudioLink2Emission;
    uint _AudioLink2Emission2nd;
    uint _AudioLink2Vertex;
    uint _AudioLinkAsLocal;
    uint _OutlineLitApplyTex;
    uint _OutlineLitShadowReceive;
    uint _OutlineDeleteMesh;
    uint _OutlineDisableInVR;
    float4 _AudioTexture_TexelSize;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    // mtl_VertexID generated in compute kernel,
    // mtl_BaseVertex generated in compute kernel,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(mtl_VertexID, mtl_BaseVertex, vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.TEXCOORD4 = input.cp[controlPointID].TEXCOORD4;
        output.TEXCOORD5 = input.cp[controlPointID].TEXCOORD5;
        output.TEXCOORD6 = input.cp[controlPointID].TEXCOORD6;
        output.TEXCOORD7 = input.cp[controlPointID].TEXCOORD7;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float4 u_xlat1;
    int2 u_xlati1;
    bool4 u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    bool2 u_xlatb3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float3 u_xlat11;
    float u_xlat22;
    bool2 u_xlatb23;
    int2 u_xlati24;
    bool2 u_xlatb24;
    float u_xlat33;
    float u_xlat34;
    // fork_phase2
    {
        if((VGlobals._Invisible)!=uint(0)){
            tessFactor.edgeTessellationFactor[0] = 0.0;
            tessFactor.edgeTessellationFactor[1] = 0.0;
            tessFactor.edgeTessellationFactor[2] = 0.0;
            tessFactor.insideTessellationFactor = 0.0;
            return;
        }
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].mtl_Position.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].mtl_Position.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].mtl_Position.zzz, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].mtl_Position.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].mtl_Position.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].mtl_Position.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat3.xyz = u_xlat2.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].mtl_Position.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].mtl_Position.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].mtl_Position.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat4.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat4.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat6.x = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
        u_xlat7.x = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat7.xyz = float3(u_xlat33) * u_xlat7.xyz;
        u_xlat8.x = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat8.y = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat8.z = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
        u_xlat9.xyz = u_xlat2.xyz + u_xlat4.xyz;
        u_xlat9.xyz = fma(u_xlat9.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat9.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
        u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.x = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat4.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat4.xyz;
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.y = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.z = max(u_xlat33, 1.0);
        u_xlat9.xyz = min(u_xlat9.xyz, float3(VGlobals._TessFactorMax));
        u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
        u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
        u_xlat11.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat34 = dot(u_xlat11.xyz, u_xlat11.xyz);
        u_xlat34 = rsqrt(u_xlat34);
        u_xlat11.xyz = u_xlat11.xyz * float3(u_xlat34);
        u_xlat0.y = dot(u_xlat7.xyz, u_xlat11.xyz);
        u_xlat2.xyz = (-u_xlat4.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat22 = rsqrt(u_xlat22);
        u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
        u_xlat0.z = dot(u_xlat8.xyz, u_xlat2.xyz);
        u_xlat2.xyz = abs(u_xlat0.zxy) + abs(u_xlat0.yzx);
        u_xlat0.xyz = fma((-u_xlat2.xyz), float3(0.5, 0.5, 0.5), float3(1.0, 1.0, 1.0));
        u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
        u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xyz;
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat34 = u_xlat0.y + u_xlat0.x;
        u_xlat34 = u_xlat0.z + u_xlat34;
        u_xlat0.w = u_xlat34 * 0.333333343;
        u_xlat1.xy = u_xlat1.xy / abs(u_xlat1.zz);
        u_xlat1.zw = u_xlat3.xy / abs(u_xlat3.zz);
        u_xlat2.xy = u_xlat5.xy / abs(u_xlat5.zz);
        u_xlatb24.xy = (float2(1.00999999, 1.00999999)<u_xlat1.xy);
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat1.zw);
        u_xlati24.xy = int2((uint2(u_xlatb24.xy) * 0xffffffffu) & (uint2(u_xlatb3.xy) * 0xffffffffu));
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat2.xy);
        u_xlati24.xy = int2((uint2(u_xlatb3.xy) * 0xffffffffu) & uint2(u_xlati24.xy));
        u_xlatb1 = (u_xlat1<float4(-1.00999999, -1.00999999, -1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb1.zw) * 0xffffffffu) & (uint2(u_xlatb1.xy) * 0xffffffffu));
        u_xlatb23.xy = (u_xlat2.xy<float2(-1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb23.xy) * 0xffffffffu) & uint2(u_xlati1.xy));
        u_xlati1.x = int(uint(u_xlati1.x) | uint(u_xlati24.x));
        u_xlati1.x = int(uint(u_xlati24.y) | uint(u_xlati1.x));
        u_xlati1.x = int(uint(u_xlati1.y) | uint(u_xlati1.x));
        u_xlat0 = (u_xlati1.x != 0) ? float4(0.0, 0.0, 0.0, 0.0) : u_xlat0;
        tessFactor.edgeTessellationFactor[0] = u_xlat0.x;
        tessFactor.edgeTessellationFactor[1] = u_xlat0.y;
        tessFactor.edgeTessellationFactor[2] = u_xlat0.z;
        tessFactor.insideTessellationFactor = u_xlat0.w;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float TEXCOORD9 [[ user(TEXCOORD9) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
		template <typename UVecType> UVecType bitFieldInsert(const UVecType width, const UVecType offset, const UVecType src2, const UVecType src3)
		{
			UVecType bitmask = (((UVecType(1) << width)-1) << offset) & 0xffffffff;
			return ((src2 << offset) & bitmask) | (src3 & ~bitmask);
		}; 
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    // mtl_VertexID unused,
    // mtl_BaseVertex unused,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    texture2d<float, access::sample > _AudioLinkLocalMap [[ texture(0) ]] ,
    texture2d<float, access::sample > _AudioTexture [[ texture(1) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    constexpr sampler lil_sampler_trilinear_repeat(filter::linear,mip_filter::linear,address::repeat);
    constexpr sampler lil_sampler_linear_clamp(filter::linear,mip_filter::nearest,address::clamp_to_edge);
        float4 phase0_Input0_1[3];
        phase0_Input0_1[2] = float4(input.cp[2].TEXCOORD0, input.cp[2].TEXCOORD1);
        phase0_Input0_1[1] = float4(input.cp[1].TEXCOORD0, input.cp[1].TEXCOORD1);
        phase0_Input0_1[0] = float4(input.cp[0].TEXCOORD0, input.cp[0].TEXCOORD1);
        float4 phase0_Input0_2[3];
        phase0_Input0_2[2] = float4(input.cp[2].TEXCOORD2, input.cp[2].TEXCOORD3);
        phase0_Input0_2[1] = float4(input.cp[1].TEXCOORD2, input.cp[1].TEXCOORD3);
        phase0_Input0_2[0] = float4(input.cp[0].TEXCOORD2, input.cp[0].TEXCOORD3);
    float4 phase0_Output0_4;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    int3 u_xlati3;
    uint u_xlatu3;
    bool u_xlatb3;
    float4 u_xlat4;
    int u_xlati4;
    float3 u_xlat5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    bool4 u_xlatb7;
    float4 u_xlat8;
    int4 u_xlati8;
    bool4 u_xlatb8;
    float4 u_xlat9;
    int4 u_xlati9;
    float4 u_xlat10;
    bool4 u_xlatb10;
    bool4 u_xlatb11;
    float4 u_xlat12;
    int4 u_xlati12;
    float4 u_xlat13;
    float u_xlat17;
    int u_xlati17;
    uint u_xlatu17;
    bool u_xlatb17;
    int u_xlati18;
    float2 u_xlat31;
    int2 u_xlati31;
    uint u_xlatu31;
    bool u_xlatb31;
    float u_xlat32;
    bool u_xlatb32;
    float2 u_xlat33;
    int u_xlati33;
    bool u_xlatb33;
    float u_xlat42;
    float u_xlat45;
    bool u_xlatb45;
    if((VGlobals._Invisible)==uint(0)){
        u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].mtl_Position.xyz;
        u_xlat0.xyz = fma(mtl_TessCoord.xxx, input.cp[0].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat0.xyz = fma(mtl_TessCoord.zzz, input.cp[2].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat1 = mtl_TessCoord.yyyy * phase0_Input0_1[1];
        u_xlat1 = fma(mtl_TessCoord.xxxx, phase0_Input0_1[0], u_xlat1);
        u_xlat1 = fma(mtl_TessCoord.zzzz, phase0_Input0_1[2], u_xlat1);
        u_xlat2 = mtl_TessCoord.yyyy * phase0_Input0_2[1];
        u_xlat2 = fma(mtl_TessCoord.xxxx, phase0_Input0_2[0], u_xlat2);
        u_xlat2 = fma(mtl_TessCoord.zzzz, phase0_Input0_2[2], u_xlat2);
        u_xlat3.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
        u_xlat3.xyz = fma(mtl_TessCoord.xxx, input.cp[0].NORMAL0.xyz, u_xlat3.xyz);
        u_xlat3.xyz = fma(mtl_TessCoord.zzz, input.cp[2].NORMAL0.xyz, u_xlat3.xyz);
        u_xlat4 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
        u_xlat4 = fma(mtl_TessCoord.xxxx, input.cp[0].TANGENT0, u_xlat4);
        u_xlat4 = fma(mtl_TessCoord.zzzz, input.cp[2].TANGENT0, u_xlat4);
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat3.xyz = float3(u_xlat42) * u_xlat3.xyz;
        u_xlat42 = dot(input.cp[0].mtl_Position.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat5.xyz = float3(u_xlat42) * input.cp[0].NORMAL0.xyz;
        u_xlat42 = dot(input.cp[1].mtl_Position.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat6.xyz = float3(u_xlat42) * input.cp[1].NORMAL0.xyz;
        u_xlat42 = dot(input.cp[2].mtl_Position.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat45 = dot(u_xlat0.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat42 = u_xlat42 + (-u_xlat45);
        u_xlat42 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat42);
        u_xlat7.xyz = float3(u_xlat42) * input.cp[2].NORMAL0.xyz;
        u_xlat6.xyz = u_xlat6.xyz * mtl_TessCoord.yyy;
        u_xlat5.xyz = fma(u_xlat5.xyz, mtl_TessCoord.xxx, u_xlat6.xyz);
        u_xlat5.xyz = fma(u_xlat7.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
        u_xlat0.xyz = fma(u_xlat5.xyz, float3(VGlobals._TessStrength), u_xlat0.xyz);
        u_xlatb45 = int(VGlobals._UseAudioLink)!=0x0;
        u_xlatb5.x = int(VGlobals._AudioLink2Vertex)!=0x0;
        u_xlatb45 = u_xlatb45 && u_xlatb5.x;
        if(u_xlatb45){
            u_xlatb5.xy = (int2(VGlobals._AudioLinkVertexUVMode)==int2(0x1, 0x2));
            u_xlat6.xyz = u_xlat0.xyz + (-VGlobals._AudioLinkVertexStart.xyz);
            u_xlat45 = dot(u_xlat6.xyz, u_xlat6.xyz);
            u_xlat45 = sqrt(u_xlat45);
            u_xlat45 = fma(u_xlat45, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat45 = (u_xlatb5.x) ? u_xlat45 : VGlobals._AudioLinkVertexUVParams.y;
            u_xlat5.x = sin(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat6.x = cos(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat33.xy = u_xlat1.xy + float2(-0.5, -0.5);
            u_xlat5.x = u_xlat5.x * u_xlat33.y;
            u_xlat5.x = fma(u_xlat33.x, u_xlat6.x, (-u_xlat5.x));
            u_xlat5.x = u_xlat5.x + 0.5;
            u_xlat5.x = fma(u_xlat5.x, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat5.x = (u_xlatb5.y) ? u_xlat5.x : u_xlat45;
            if((VGlobals._AudioLinkAsLocal)!=uint(0)){
                u_xlat45 = (-VGlobals._Time.y) * VGlobals._AudioLinkLocalMapParams.x;
                u_xlat45 = u_xlat45 * VGlobals._AudioLinkLocalMapParams.y;
                u_xlat45 = u_xlat45 * 0.0166666675;
                u_xlat45 = fract(u_xlat45);
                u_xlat45 = u_xlat45 + VGlobals._AudioLinkLocalMapParams.z;
                u_xlat6.x = u_xlat45 + u_xlat5.x;
                u_xlat6.y = VGlobals._AudioLinkVertexUVParams.w;
                u_xlat45 = _AudioLinkLocalMap.sample(lil_sampler_trilinear_repeat, u_xlat6.xy, level(0.0)).x;
            } else {
                u_xlat33.x = float(_AudioTexture.get_width(0x0));
                u_xlati33 = int(u_xlat33.x);
                u_xlatb33 = 0x10<u_xlati33;
                if(u_xlatb33){
                    u_xlat5.y = VGlobals._AudioLinkVertexUVParams.w * 0.0625;
                    u_xlat45 = _AudioTexture.sample(lil_sampler_linear_clamp, u_xlat5.xy, level(0.0)).x;
                    u_xlat45 = u_xlat45;
                    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
                } else {
                    u_xlat5.x = fma(VGlobals._Time.y, VGlobals._AudioLinkDefaultValue.z, (-u_xlat5.x));
                    u_xlat5.x = fract(u_xlat5.x);
                    u_xlat5.x = u_xlat5.x + VGlobals._AudioLinkDefaultValue.w;
                    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
                    u_xlat5.x = u_xlat5.x * VGlobals._AudioLinkDefaultValue.y;
                    u_xlat45 = fma((-u_xlat5.x), VGlobals._AudioLinkDefaultValue.x, VGlobals._AudioLinkDefaultValue.x);
                    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
                }
            }
            u_xlat5.xyz = fma(u_xlat3.xyz, VGlobals._AudioLinkVertexStrength.www, VGlobals._AudioLinkVertexStrength.xyz);
            u_xlat0.xyz = fma(u_xlat5.xyz, float3(u_xlat45), u_xlat0.xyz);
        }
        u_xlat5.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat6 = u_xlat5.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
        u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat5.xxxx, u_xlat6);
        u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat5.zzzz, u_xlat6);
        u_xlat6 = u_xlat6 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
        u_xlat7.x = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(u_xlat3.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat3.x = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        output.TEXCOORD4.xyz = u_xlat3.xxx * u_xlat7.xyz;
        u_xlat3.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat4.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat4.zzz, u_xlat3.xyz);
        u_xlat45 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat45 = rsqrt(u_xlat45);
        output.TEXCOORD5.xyz = float3(u_xlat45) * u_xlat3.xyz;
        switch(int(int(VGlobals._IDMaskFrom))){
            case 0x0:
                u_xlatu3 = uint(u_xlat1.x);
                break;
            case 0x1:
                u_xlatu3 = uint(u_xlat1.z);
                break;
            case 0x2:
                u_xlatu3 = uint(u_xlat2.x);
                break;
            case 0x3:
                u_xlatu3 = uint(u_xlat2.z);
                break;
            case 0x4:
                u_xlat17 = mtl_TessCoord.y * input.cp[1].TEXCOORD4.x;
                u_xlat17 = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD4.x, u_xlat17);
                u_xlat17 = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD4.x, u_xlat17);
                u_xlatu3 = uint(u_xlat17);
                break;
            case 0x5:
                u_xlat17 = mtl_TessCoord.y * input.cp[1].TEXCOORD5.x;
                u_xlat17 = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD5.x, u_xlat17);
                u_xlat17 = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD5.x, u_xlat17);
                u_xlatu3 = uint(u_xlat17);
                break;
            case 0x6:
                u_xlat17 = mtl_TessCoord.y * input.cp[1].TEXCOORD6.x;
                u_xlat17 = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD6.x, u_xlat17);
                u_xlat17 = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD6.x, u_xlat17);
                u_xlatu3 = uint(u_xlat17);
                break;
            case 0x7:
                u_xlat17 = mtl_TessCoord.y * input.cp[1].TEXCOORD7.x;
                u_xlat17 = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD7.x, u_xlat17);
                u_xlat17 = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD7.x, u_xlat17);
                u_xlatu3 = uint(u_xlat17);
                break;
            default:
                u_xlatu3 = input.cp[0].TEXCOORD8.x;
                break;
            }
            if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                u_xlat7.x = rint(VGlobals._IDMask1);
                u_xlat7.yzw = rint(float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4));
                u_xlat17 = dot(u_xlat7, float4(1.0, 2.0, 4.0, 8.0));
                u_xlat7.x = rint(VGlobals._IDMask5);
                u_xlat7.yzw = rint(float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8));
                u_xlat31.x = dot(u_xlat7, float4(16.0, 32.0, 64.0, 128.0));
                u_xlat17 = u_xlat31.x + u_xlat17;
                u_xlatu17 = uint(u_xlat17);
                u_xlatb31 = int(u_xlatu3)!=0x0;
                u_xlati17 = int(u_xlatu3 & u_xlatu17);
                u_xlatb17 = int(u_xlatu3)==u_xlati17;
                u_xlati17 = int((uint(u_xlatb17) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            } else {
                u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                u_xlat7.xy = float2(u_xlati31.yx);
                u_xlati8 = int4(u_xlatu3) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                u_xlat8 = float4(u_xlati8.wxyz);
                u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                u_xlat31.xy = float2(u_xlati31.xy);
                u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                u_xlat7.x = (-u_xlat7.x);
                u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                u_xlat8 = (-u_xlat8);
                u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                u_xlat9.zw = u_xlat10.zw;
                u_xlat7.yzw = u_xlat8.yzw;
                u_xlat7 = u_xlat7 * u_xlat9;
                u_xlat10.zw = u_xlat31.xy + float2(1.0, 1.0);
                u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                u_xlat8.yz = (-u_xlat31.xy);
                u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                u_xlat8.w = 1.0;
                u_xlat8 = u_xlat8 * u_xlat10;
                u_xlat9.x = VGlobals._IDMask1;
                u_xlat9.yzw = float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4);
                u_xlat31.x = dot(u_xlat7, u_xlat9);
                u_xlat7.x = VGlobals._IDMask5;
                u_xlat7.yzw = float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8);
                u_xlat45 = dot(u_xlat8, u_xlat7);
                u_xlat31.x = u_xlat45 + u_xlat31.x;
                u_xlati17 = int((float(0.0)!=u_xlat31.x) ? 0xFFFFFFFFu : uint(0));
            }
            if((VGlobals._IDMaskControlsDissolve)!=uint(0)){
                if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                    u_xlat7.x = rint(VGlobals._IDMaskPrior1);
                    u_xlat7.yzw = rint(float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4));
                    u_xlat31.x = dot(u_xlat7, float4(1.0, 2.0, 4.0, 8.0));
                    u_xlat7.x = rint(VGlobals._IDMaskPrior5);
                    u_xlat7.yzw = rint(float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8));
                    u_xlat45 = dot(u_xlat7, float4(16.0, 32.0, 64.0, 128.0));
                    u_xlat31.x = u_xlat45 + u_xlat31.x;
                    u_xlatu31 = uint(u_xlat31.x);
                    u_xlatb45 = int(u_xlatu3)!=0x0;
                    u_xlati31.x = int(u_xlatu3 & u_xlatu31);
                    u_xlatb31 = int(u_xlatu3)==u_xlati31.x;
                    u_xlati18 = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb45) * 0xffffffffu));
                } else {
                    u_xlati31.xy = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                    u_xlat7.xy = float2(u_xlati31.yx);
                    u_xlati8 = int4(u_xlatu3) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                    u_xlat8 = float4(u_xlati8.wxyz);
                    u_xlati3.xz = int2(u_xlatu3) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                    u_xlat3.xz = float2(u_xlati3.xz);
                    u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                    u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                    u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                    u_xlat7.x = (-u_xlat7.x);
                    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                    u_xlat8 = (-u_xlat8);
                    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                    u_xlat9.zw = u_xlat10.zw;
                    u_xlat7.yzw = u_xlat8.yzw;
                    u_xlat7 = u_xlat7 * u_xlat9;
                    u_xlat10.zw = u_xlat3.xz + float2(1.0, 1.0);
                    u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                    u_xlat8.yz = (-u_xlat3.xz);
                    u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                    u_xlat8.w = 1.0;
                    u_xlat8 = u_xlat8 * u_xlat10;
                    u_xlat9.x = VGlobals._IDMaskPrior1;
                    u_xlat9.yzw = float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4);
                    u_xlat3.x = dot(u_xlat7, u_xlat9);
                    u_xlat7.x = VGlobals._IDMaskPrior5;
                    u_xlat7.yzw = float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8);
                    u_xlat31.x = dot(u_xlat8, u_xlat7);
                    u_xlat3.x = u_xlat31.x + u_xlat3.x;
                    u_xlati18 = int((float(0.0)!=u_xlat3.x) ? 0xFFFFFFFFu : uint(0));
                }
                u_xlati4 = int((u_xlati17!=u_xlati18) ? 0xFFFFFFFFu : uint(0));
                u_xlati17 = int(uint(u_xlati17) & uint(u_xlati18));
            } else {
                u_xlati4 = int(int(0xffffffffu));
                u_xlati18 = int(0x0);
            }
            u_xlatb7 = (float4(VGlobals._UDIMDiscardMode, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV)==float4(0.0, 0.0, 1.0, 2.0));
            u_xlatb3 = VGlobals._UDIMDiscardCompile==1.0;
            u_xlatb3 = u_xlatb3 && u_xlatb7.x;
            u_xlat7.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb7.yzw));
            u_xlat8 = u_xlat1 * u_xlat7.xxyy;
            u_xlat31.xy = u_xlat8.zw + u_xlat8.xy;
            u_xlat31.xy = fma(u_xlat2.xy, u_xlat7.zz, u_xlat31.xy);
            u_xlatb32 = VGlobals._UDIMDiscardUV==3.0;
            u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);
            u_xlat31.xy = fma(u_xlat2.zw, float2(u_xlat32), u_xlat31.xy);
            u_xlatb7 = (u_xlat31.xxxx>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb8 = (u_xlat31.xxxx<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati9 = int4((uint4(u_xlatb7) * 0xffffffffu) & (uint4(u_xlatb8) * 0xffffffffu));
            u_xlat9 = as_type<float4>(uint4(u_xlati9) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlatb10 = (u_xlat31.yyyy>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb11 = (u_xlat31.yyyy<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati12 = int4((uint4(u_xlatb10) * 0xffffffffu) & (uint4(u_xlatb11) * 0xffffffffu));
            u_xlat12 = as_type<float4>(uint4(u_xlati12) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow0_0, VGlobals._UDIMDiscardRow0_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow0_2, VGlobals._UDIMDiscardRow0_3);
            u_xlat31.x = dot(u_xlat13, u_xlat9);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow1_0, VGlobals._UDIMDiscardRow1_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow1_2, VGlobals._UDIMDiscardRow1_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat45 = u_xlat45 * u_xlat12.y;
            u_xlat31.x = fma(u_xlat12.x, u_xlat31.x, u_xlat45);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow2_0, VGlobals._UDIMDiscardRow2_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow2_2, VGlobals._UDIMDiscardRow2_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat31.x = fma(u_xlat12.z, u_xlat45, u_xlat31.x);
            u_xlat13.xy = float2(VGlobals._UDIMDiscardRow3_0, VGlobals._UDIMDiscardRow3_1);
            u_xlat13.zw = float2(VGlobals._UDIMDiscardRow3_2, VGlobals._UDIMDiscardRow3_3);
            u_xlat45 = dot(u_xlat13, u_xlat9);
            u_xlat31.x = fma(u_xlat12.w, u_xlat45, u_xlat31.x);
            u_xlatb8.x = u_xlatb10.x;
            u_xlatb8.y = u_xlatb11.w;
            u_xlatb8.z = u_xlatb7.x;
            u_xlat7 = select(float4(0.0, 0.0, 0.0, 0.0), float4(1.0, 1.0, 1.0, 1.0), bool4(u_xlatb8));
            u_xlat45 = dot(u_xlat7, u_xlat7);
            u_xlatb45 = u_xlat45!=0.0;
            u_xlat45 = u_xlatb45 ? 1.0 : float(0.0);
            u_xlat31.x = u_xlat45 * u_xlat31.x;
            u_xlatb31 = 0.00100000005<u_xlat31.x;
            u_xlatb3 = u_xlatb31 && u_xlatb3;
            u_xlati3.x = int((uint(u_xlatb3) * 0xffffffffu) | uint(u_xlati17));
            output.mtl_Position = (u_xlati3.x != 0) ? float4(as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u))) : u_xlat6;
            u_xlati3.x = int(bitFieldInsert(0x1u, 0x1u, uint(u_xlati18), 0x0u));
            u_xlati3.x = int(bitFieldInsert(0x1u, 0x0u, uint(u_xlati4), uint(u_xlati3.x)));
            u_xlat0.w = float(u_xlati3.x);
            output.TEXCOORD0 = u_xlat1;
            output.TEXCOORD1 = u_xlat2;
            output.TEXCOORD2 = u_xlat0;
            phase0_Output0_4.xyz = u_xlat5.xyz;
            phase0_Output0_4.w = 1.0;
            output.TEXCOORD5.w = u_xlat4.w;
        } else {
            output.mtl_Position = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD1 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_4 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD4.xyz = float3(0.0, 0.0, 0.0);
        }
    output.TEXCOORD3 = phase0_Output0_4.xyz;
    output.TEXCOORD9 = phase0_Output0_4.w;
        return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation failed: 

program_source:828:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:838:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
                             ^
program_source:839:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
                                               ^
program_source:1142:50: error: member reference base type 'uint' (aka 'unsigned int') is not a structure or union
                u_xlatu42 = input.cp[0].TEXCOORD8.x;
                            ~~~~~~~~~~~~~~~~~~~~~^~



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float4 COLOR0 [[ attribute(9) ]] ;
    float3 NORMAL0 [[ attribute(10) ]] ;
    float4 TANGENT0 [[ attribute(11) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    uint mtl_VertexID,
    uint mtl_BaseVertex,
    Mtl_VertexIn input)
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseVertex = 0;
#endif
    mtl_VertexID = mtl_VertexID - mtl_BaseVertex;
    Mtl_VertexOut output;
    output.mtl_Position = input.POSITION0;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD1.xy = input.TEXCOORD1.xy;
    output.TEXCOORD2.xy = input.TEXCOORD2.xy;
    output.TEXCOORD3.xy = input.TEXCOORD3.xy;
    output.TEXCOORD4.xy = input.TEXCOORD4.xy;
    output.TEXCOORD5.xy = input.TEXCOORD5.xy;
    output.TEXCOORD6.xy = input.TEXCOORD6.xy;
    output.TEXCOORD7.xy = input.TEXCOORD7.xy;
    output.COLOR0 = input.COLOR0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TANGENT0 = input.TANGENT0;
    output.TEXCOORD8 = mtl_VertexID;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float2 TEXCOORD6 [[ user(TEXCOORD6) ]];
    float2 TEXCOORD7 [[ user(TEXCOORD7) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    uint TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(12) ]] ;
    float2 TEXCOORD0 [[ attribute(1) ]] ;
    float2 TEXCOORD1 [[ attribute(2) ]] ;
    float2 TEXCOORD2 [[ attribute(3) ]] ;
    float2 TEXCOORD3 [[ attribute(4) ]] ;
    float2 TEXCOORD4 [[ attribute(5) ]] ;
    float2 TEXCOORD5 [[ attribute(6) ]] ;
    float2 TEXCOORD6 [[ attribute(7) ]] ;
    float2 TEXCOORD7 [[ attribute(8) ]] ;
    float4 COLOR0 [[ attribute(9) ]] ;
    float3 NORMAL0 [[ attribute(10) ]] ;
    float4 TANGENT0 [[ attribute(11) ]] ;
    uint TEXCOORD8 [[ attribute(13) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
    float3 unity_LightColor0;
    float3 unity_LightColor1;
    float3 unity_LightColor2;
    float3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
    float4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _LightColor0;
    float4 _SpecColor;
    bool4 unity_MetaVertexControl;
    bool4 unity_MetaFragmentControl;
    int unity_VisualizationMode;
    float unity_OneOverOutputBoost;
    float unity_MaxOutputValue;
    float unity_UseLinearSpace;
    float4 _lilBackgroundTexture_TexelSize;
    float4 _LightDirectionOverride;
    float4 _BackfaceColor;
    float4 _Color;
    float4 _MainTex_ST;
    float4 _MainTex_ScrollRotate;
    float4 _MainTexHSVG;
    float4 _Color2nd;
    float4 _Main2ndTex_ST;
    float4 _Main2ndTex_ScrollRotate;
    float4 _Main2ndDistanceFade;
    float4 _Main2ndTexDecalAnimation;
    float4 _Main2ndTexDecalSubParam;
    float4 _Main2ndDissolveMask_ST;
    float4 _Main2ndDissolveColor;
    float4 _Main2ndDissolveParams;
    float4 _Main2ndDissolvePos;
    float4 _Main2ndDissolveNoiseMask_ST;
    float4 _Main2ndDissolveNoiseMask_ScrollRotate;
    float4 _Color3rd;
    float4 _Main3rdTex_ST;
    float4 _Main3rdTex_ScrollRotate;
    float4 _Main3rdDistanceFade;
    float4 _Main3rdTexDecalAnimation;
    float4 _Main3rdTexDecalSubParam;
    float4 _Main3rdDissolveMask_ST;
    float4 _Main3rdDissolveColor;
    float4 _Main3rdDissolveParams;
    float4 _Main3rdDissolvePos;
    float4 _Main3rdDissolveNoiseMask_ST;
    float4 _Main3rdDissolveNoiseMask_ScrollRotate;
    float4 _ShadowColor;
    float4 _Shadow2ndColor;
    float4 _Shadow3rdColor;
    float4 _ShadowBorderColor;
    float4 _ShadowAOShift;
    float4 _ShadowAOShift2;
    float4 _RimShadeColor;
    float4 _BacklightColor;
    float4 _BacklightColorTex_ST;
    float4 _EmissionColor;
    float4 _EmissionBlink;
    float4 _EmissionMap_ST;
    float4 _EmissionMap_ScrollRotate;
    float4 _EmissionBlendMask_ST;
    float4 _EmissionBlendMask_ScrollRotate;
    float4 _Emission2ndColor;
    float4 _Emission2ndBlink;
    float4 _Emission2ndMap_ST;
    float4 _Emission2ndMap_ScrollRotate;
    float4 _Emission2ndBlendMask_ST;
    float4 _Emission2ndBlendMask_ScrollRotate;
    float4 _BumpMap_ST;
    float4 _Bump2ndMap_ST;
    float4 _Bump2ndScaleMask_ST;
    float4 _AnisotropyTangentMap_ST;
    float4 _AnisotropyScaleMask_ST;
    float4 _AnisotropyShiftNoiseMask_ST;
    float4 _ReflectionColor;
    float4 _MetallicGlossMap_ST;
    float4 _ReflectionColorTex_ST;
    float4 _SmoothnessTex_ST;
    float4 _ReflectionCubeColor;
    float4 _ReflectionCubeTex_HDR;
    float4 _MatCapColor;
    float4 _MatCapTex_ST;
    float4 _MatCapBlendMask_ST;
    float4 _MatCapBlendUV1;
    float4 _MatCapBumpMap_ST;
    float4 _MatCap2ndColor;
    float4 _MatCap2ndTex_ST;
    float4 _MatCap2ndBlendMask_ST;
    float4 _MatCap2ndBlendUV1;
    float4 _MatCap2ndBumpMap_ST;
    float4 _RimColor;
    float4 _RimColorTex_ST;
    float4 _RimIndirColor;
    float4 _GlitterColor;
    float4 _GlitterColorTex_ST;
    float4 _GlitterParams1;
    float4 _GlitterParams2;
    float4 _GlitterShapeTex_ST;
    float4 _GlitterAtras;
    float4 _DistanceFade;
    float4 _DistanceFadeColor;
    float4 _DistanceFadeRimColor;
    float4 _DitherTex_TexelSize;
    float4 _AudioLinkMask_ST;
    float4 _AudioLinkMask_ScrollRotate;
    float4 _AudioLinkDefaultValue;
    float4 _AudioLinkUVParams;
    float4 _AudioLinkStart;
    float4 _AudioLinkVertexUVParams;
    float4 _AudioLinkVertexStart;
    float4 _AudioLinkVertexStrength;
    float4 _AudioLinkLocalMapParams;
    float4 _DissolveMask_ST;
    float4 _DissolveColor;
    float4 _DissolveParams;
    float4 _DissolvePos;
    float4 _DissolveNoiseMask_ST;
    float4 _DissolveNoiseMask_ScrollRotate;
    float4 _OutlineColor;
    float4 _OutlineLitColor;
    float4 _OutlineTex_ST;
    float4 _OutlineTex_ScrollRotate;
    float4 _OutlineTexHSVG;
    float _AsUnlit;
    float _Cutoff;
    float _SubpassCutoff;
    float _FlipNormal;
    float _ShiftBackfaceUV;
    float _VertexLightStrength;
    float _LightMinLimit;
    float _LightMaxLimit;
    float _MonochromeLighting;
    float _AAStrength;
    float _AlphaBoostFA;
    float _MainGradationStrength;
    float _Main2ndTexAngle;
    float _Main2ndEnableLighting;
    float _Main2ndDissolveNoiseStrength;
    float _Main3rdTexAngle;
    float _Main3rdEnableLighting;
    float _Main3rdDissolveNoiseStrength;
    float4 _AlphaMask_ST;
    float _AlphaMaskScale;
    float _AlphaMaskValue;
    float _BackfaceForceShadow;
    float _ShadowStrength;
    float _ShadowNormalStrength;
    float _ShadowBorder;
    float _ShadowBlur;
    float _ShadowStrengthMaskLOD;
    float _ShadowBorderMaskLOD;
    float _ShadowBlurMaskLOD;
    float _Shadow2ndNormalStrength;
    float _Shadow2ndBorder;
    float _Shadow2ndBlur;
    float _Shadow3rdNormalStrength;
    float _Shadow3rdBorder;
    float _Shadow3rdBlur;
    float _ShadowMainStrength;
    float _ShadowEnvStrength;
    float _ShadowBorderRange;
    float _ShadowReceive;
    float _Shadow2ndReceive;
    float _Shadow3rdReceive;
    float _ShadowFlatBlur;
    float _ShadowFlatBorder;
    float _RimShadeNormalStrength;
    float _RimShadeBorder;
    float _RimShadeBlur;
    float _RimShadeFresnelPower;
    float _BacklightNormalStrength;
    float _BacklightBorder;
    float _BacklightBlur;
    float _BacklightDirectivity;
    float _BacklightViewStrength;
    float _BacklightBackfaceMask;
    float _BacklightMainStrength;
    float _BumpScale;
    float _Bump2ndScale;
    float _AnisotropyScale;
    float _AnisotropyTangentWidth;
    float _AnisotropyBitangentWidth;
    float _AnisotropyShift;
    float _AnisotropyShiftNoiseScale;
    float _AnisotropySpecularStrength;
    float _Anisotropy2ndTangentWidth;
    float _Anisotropy2ndBitangentWidth;
    float _Anisotropy2ndShift;
    float _Anisotropy2ndShiftNoiseScale;
    float _Anisotropy2ndSpecularStrength;
    float _Reflectance;
    float _SpecularNormalStrength;
    float _SpecularBorder;
    float _SpecularBlur;
    float _ReflectionNormalStrength;
    float _ReflectionCubeEnableLighting;
    float _Smoothness;
    float _Metallic;
    float _GSAAStrength;
    float _MatCapBlend;
    float _MatCapEnableLighting;
    float _MatCapShadowMask;
    float _MatCapVRParallaxStrength;
    float _MatCapBackfaceMask;
    float _MatCapLod;
    float _MatCapNormalStrength;
    float _MatCapMainStrength;
    float _MatCapBumpScale;
    float _MatCap2ndBlend;
    float _MatCap2ndEnableLighting;
    float _MatCap2ndShadowMask;
    float _MatCap2ndVRParallaxStrength;
    float _MatCap2ndBackfaceMask;
    float _MatCap2ndLod;
    float _MatCap2ndNormalStrength;
    float _MatCap2ndMainStrength;
    float _MatCap2ndBumpScale;
    float _RimNormalStrength;
    float _RimBorder;
    float _RimBlur;
    float _RimFresnelPower;
    float _RimEnableLighting;
    float _RimShadowMask;
    float _RimVRParallaxStrength;
    float _RimBackfaceMask;
    float _RimMainStrength;
    float _RimDirStrength;
    float _RimDirRange;
    float _RimIndirRange;
    float _RimIndirBorder;
    float _RimIndirBlur;
    float _GlitterMainStrength;
    float _GlitterPostContrast;
    float _GlitterSensitivity;
    float _GlitterNormalStrength;
    float _GlitterEnableLighting;
    float _GlitterShadowMask;
    float _GlitterVRParallaxStrength;
    float _GlitterBackfaceMask;
    float _GlitterScaleRandomize;
    float _DistanceFadeRimFresnelPower;
    float _EmissionBlend;
    float _EmissionParallaxDepth;
    float _EmissionFluorescence;
    float _EmissionMainStrength;
    float _EmissionGradSpeed;
    float _Emission2ndBlend;
    float _Emission2ndParallaxDepth;
    float _Emission2ndFluorescence;
    float _Emission2ndMainStrength;
    float _Emission2ndGradSpeed;
    float _Parallax;
    float _ParallaxOffset;
    float _DitherMaxValue;
    float _AudioLink2EmissionGrad;
    float _AudioLink2Emission2ndGrad;
    float _DissolveNoiseStrength;
    float _IDMask1;
    float _IDMask2;
    float _IDMask3;
    float _IDMask4;
    float _IDMask5;
    float _IDMask6;
    float _IDMask7;
    float _IDMask8;
    float _IDMaskPrior1;
    float _IDMaskPrior2;
    float _IDMaskPrior3;
    float _IDMaskPrior4;
    float _IDMaskPrior5;
    float _IDMaskPrior6;
    float _IDMaskPrior7;
    float _IDMaskPrior8;
    float _UDIMDiscardCompile;
    float _UDIMDiscardMode;
    float _UDIMDiscardUV;
    float _UDIMDiscardRow3_0;
    float _UDIMDiscardRow3_1;
    float _UDIMDiscardRow3_2;
    float _UDIMDiscardRow3_3;
    float _UDIMDiscardRow2_0;
    float _UDIMDiscardRow2_1;
    float _UDIMDiscardRow2_2;
    float _UDIMDiscardRow2_3;
    float _UDIMDiscardRow1_0;
    float _UDIMDiscardRow1_1;
    float _UDIMDiscardRow1_2;
    float _UDIMDiscardRow1_3;
    float _UDIMDiscardRow0_0;
    float _UDIMDiscardRow0_1;
    float _UDIMDiscardRow0_2;
    float _UDIMDiscardRow0_3;
    float _lilShadowCasterBias;
    float _OutlineLitScale;
    float _OutlineLitOffset;
    float _OutlineWidth;
    float _OutlineEnableLighting;
    float _OutlineVectorScale;
    float _OutlineFixWidth;
    float _OutlineZBias;
    float _TessEdge;
    float _TessStrength;
    float _TessShrink;
    float _TessFactorMax;
    int _IDMaskIndex1;
    int _IDMaskIndex2;
    int _IDMaskIndex3;
    int _IDMaskIndex4;
    int _IDMaskIndex5;
    int _IDMaskIndex6;
    int _IDMaskIndex7;
    int _IDMaskIndex8;
    uint _IDMaskFrom;
    uint _IDMaskIsBitmap;
    uint _IDMaskControlsDissolve;
    uint _Cull;
    uint _OutlineCull;
    uint _Main2ndTexBlendMode;
    uint _Main2ndTexAlphaMode;
    uint _Main2ndTex_UVMode;
    uint _Main2ndTex_Cull;
    uint _Main3rdTexBlendMode;
    uint _Main3rdTexAlphaMode;
    uint _Main3rdTex_UVMode;
    uint _Main3rdTex_Cull;
    uint _AlphaMaskMode;
    uint _ShadowColorType;
    uint _ShadowMaskType;
    uint _Bump2ndMap_UVMode;
    uint _ReflectionBlendMode;
    uint _MatCapBlendMode;
    uint _MatCap2ndBlendMode;
    uint _RimBlendMode;
    uint _GlitterUVMode;
    uint _EmissionMap_UVMode;
    uint _EmissionBlendMode;
    uint _Emission2ndMap_UVMode;
    uint _Emission2ndBlendMode;
    uint _AudioLinkUVMode;
    uint _AudioLinkMask_UVMode;
    uint _AudioLinkVertexUVMode;
    uint _DistanceFadeMode;
    uint _UseDither;
    uint _OutlineVertexR2Width;
    uint _OutlineVectorUVMode;
    uint _Invisible;
    uint _UseMain2ndTex;
    uint _Main2ndTexIsMSDF;
    uint _Main2ndTexIsDecal;
    uint _Main2ndTexIsLeftOnly;
    uint _Main2ndTexIsRightOnly;
    uint _Main2ndTexShouldCopy;
    uint _Main2ndTexShouldFlipMirror;
    uint _Main2ndTexShouldFlipCopy;
    uint _UseMain3rdTex;
    uint _Main3rdTexIsMSDF;
    uint _Main3rdTexIsDecal;
    uint _Main3rdTexIsLeftOnly;
    uint _Main3rdTexIsRightOnly;
    uint _Main3rdTexShouldCopy;
    uint _Main3rdTexShouldFlipMirror;
    uint _Main3rdTexShouldFlipCopy;
    uint _UseShadow;
    uint _ShadowPostAO;
    uint _UseRimShade;
    uint _UseBacklight;
    uint _BacklightReceiveShadow;
    uint _UseBumpMap;
    uint _UseBump2ndMap;
    uint _UseAnisotropy;
    uint _Anisotropy2Reflection;
    uint _Anisotropy2MatCap;
    uint _Anisotropy2MatCap2nd;
    uint _UseReflection;
    uint _ApplySpecular;
    uint _ApplySpecularFA;
    uint _ApplyReflection;
    uint _SpecularToon;
    uint _ReflectionApplyTransparency;
    uint _ReflectionCubeOverride;
    uint _UseMatCap;
    uint _MatCapApplyTransparency;
    uint _MatCapPerspective;
    uint _MatCapZRotCancel;
    uint _MatCapCustomNormal;
    uint _UseMatCap2nd;
    uint _MatCap2ndApplyTransparency;
    uint _MatCap2ndPerspective;
    uint _MatCap2ndZRotCancel;
    uint _MatCap2ndCustomNormal;
    uint _UseRim;
    uint _RimApplyTransparency;
    uint _UseGlitter;
    uint _GlitterColorTex_UVMode;
    uint _GlitterApplyTransparency;
    uint _GlitterApplyShape;
    uint _GlitterAngleRandomize;
    uint _UseEmission;
    uint _EmissionUseGrad;
    uint _UseEmission2nd;
    uint _Emission2ndUseGrad;
    uint _UseParallax;
    uint _UsePOM;
    uint _UseAudioLink;
    uint _AudioLink2Main2nd;
    uint _AudioLink2Main3rd;
    uint _AudioLink2Emission;
    uint _AudioLink2Emission2nd;
    uint _AudioLink2Vertex;
    uint _AudioLinkAsLocal;
    uint _OutlineLitApplyTex;
    uint _OutlineLitShadowReceive;
    uint _OutlineDeleteMesh;
    uint _OutlineDisableInVR;
    float4 _AudioTexture_TexelSize;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    // mtl_VertexID generated in compute kernel,
    // mtl_BaseVertex generated in compute kernel,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(mtl_VertexID, mtl_BaseVertex, vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.TEXCOORD4 = input.cp[controlPointID].TEXCOORD4;
        output.TEXCOORD5 = input.cp[controlPointID].TEXCOORD5;
        output.TEXCOORD6 = input.cp[controlPointID].TEXCOORD6;
        output.TEXCOORD7 = input.cp[controlPointID].TEXCOORD7;
        output.COLOR0 = input.cp[controlPointID].COLOR0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float4 u_xlat1;
    int2 u_xlati1;
    bool4 u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    bool2 u_xlatb3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float3 u_xlat11;
    float u_xlat22;
    bool2 u_xlatb23;
    int2 u_xlati24;
    bool2 u_xlatb24;
    float u_xlat33;
    float u_xlat34;
    // fork_phase2
    {
        if((VGlobals._Invisible)!=uint(0)){
            tessFactor.edgeTessellationFactor[0] = 0.0;
            tessFactor.edgeTessellationFactor[1] = 0.0;
            tessFactor.edgeTessellationFactor[2] = 0.0;
            tessFactor.insideTessellationFactor = 0.0;
            return;
        }
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].mtl_Position.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].mtl_Position.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].mtl_Position.zzz, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].mtl_Position.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].mtl_Position.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].mtl_Position.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat3.xyz = u_xlat2.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat4.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].mtl_Position.yyy;
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].mtl_Position.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].mtl_Position.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5.xyz = u_xlat4.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat4.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat4.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
        u_xlat6.x = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(input.cp[0].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
        u_xlat7.x = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat7.y = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat7.z = dot(input.cp[1].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat7.xyz = float3(u_xlat33) * u_xlat7.xyz;
        u_xlat8.x = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat8.y = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat8.z = dot(input.cp[2].NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat33 = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
        u_xlat9.xyz = u_xlat2.xyz + u_xlat4.xyz;
        u_xlat9.xyz = fma(u_xlat9.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat9.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
        u_xlat34 = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.x = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat4.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = (-u_xlat0.xyz) + u_xlat4.xyz;
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.y = max(u_xlat33, 1.0);
        u_xlat10.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat10.xyz = fma(u_xlat10.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat33 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat33 = sqrt(u_xlat33);
        u_xlat10.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
        u_xlat34 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat34 = sqrt(u_xlat34);
        u_xlat34 = u_xlat34 * VGlobals._ScreenParams.y;
        u_xlat33 = u_xlat33 * VGlobals._TessEdge;
        u_xlat33 = u_xlat34 / u_xlat33;
        u_xlat9.z = max(u_xlat33, 1.0);
        u_xlat9.xyz = min(u_xlat9.xyz, float3(VGlobals._TessFactorMax));
        u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat33 = rsqrt(u_xlat33);
        u_xlat0.xyz = float3(u_xlat33) * u_xlat0.xyz;
        u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
        u_xlat11.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat34 = dot(u_xlat11.xyz, u_xlat11.xyz);
        u_xlat34 = rsqrt(u_xlat34);
        u_xlat11.xyz = u_xlat11.xyz * float3(u_xlat34);
        u_xlat0.y = dot(u_xlat7.xyz, u_xlat11.xyz);
        u_xlat2.xyz = (-u_xlat4.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat22 = rsqrt(u_xlat22);
        u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
        u_xlat0.z = dot(u_xlat8.xyz, u_xlat2.xyz);
        u_xlat2.xyz = abs(u_xlat0.zxy) + abs(u_xlat0.yzx);
        u_xlat0.xyz = fma((-u_xlat2.xyz), float3(0.5, 0.5, 0.5), float3(1.0, 1.0, 1.0));
        u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
        u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xyz;
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat34 = u_xlat0.y + u_xlat0.x;
        u_xlat34 = u_xlat0.z + u_xlat34;
        u_xlat0.w = u_xlat34 * 0.333333343;
        u_xlat1.xy = u_xlat1.xy / abs(u_xlat1.zz);
        u_xlat1.zw = u_xlat3.xy / abs(u_xlat3.zz);
        u_xlat2.xy = u_xlat5.xy / abs(u_xlat5.zz);
        u_xlatb24.xy = (float2(1.00999999, 1.00999999)<u_xlat1.xy);
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat1.zw);
        u_xlati24.xy = int2((uint2(u_xlatb24.xy) * 0xffffffffu) & (uint2(u_xlatb3.xy) * 0xffffffffu));
        u_xlatb3.xy = (float2(1.00999999, 1.00999999)<u_xlat2.xy);
        u_xlati24.xy = int2((uint2(u_xlatb3.xy) * 0xffffffffu) & uint2(u_xlati24.xy));
        u_xlatb1 = (u_xlat1<float4(-1.00999999, -1.00999999, -1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb1.zw) * 0xffffffffu) & (uint2(u_xlatb1.xy) * 0xffffffffu));
        u_xlatb23.xy = (u_xlat2.xy<float2(-1.00999999, -1.00999999));
        u_xlati1.xy = int2((uint2(u_xlatb23.xy) * 0xffffffffu) & uint2(u_xlati1.xy));
        u_xlati1.x = int(uint(u_xlati1.x) | uint(u_xlati24.x));
        u_xlati1.x = int(uint(u_xlati24.y) | uint(u_xlati1.x));
        u_xlati1.x = int(uint(u_xlati1.y) | uint(u_xlati1.x));
        u_xlat0 = (u_xlati1.x != 0) ? float4(0.0, 0.0, 0.0, 0.0) : u_xlat0;
        tessFactor.edgeTessellationFactor[0] = u_xlat0.x;
        tessFactor.edgeTessellationFactor[1] = u_xlat0.y;
        tessFactor.edgeTessellationFactor[2] = u_xlat0.z;
        tessFactor.insideTessellationFactor = u_xlat0.w;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float TEXCOORD5 [[ user(TEXCOORD5) ]];
    float TEXCOORD7 [[ user(TEXCOORD7) ]];
};
		template <typename UVecType> UVecType bitFieldInsert(const UVecType width, const UVecType offset, const UVecType src2, const UVecType src3)
		{
			UVecType bitmask = (((UVecType(1) << width)-1) << offset) & 0xffffffff;
			return ((src2 << offset) & bitmask) | (src3 & ~bitmask);
		}; 
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    // mtl_VertexID unused,
    // mtl_BaseVertex unused,
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    texture2d<float, access::sample > _AudioLinkLocalMap [[ texture(0) ]] ,
    texture2d<float, access::sample > _OutlineWidthMask [[ texture(1) ]] ,
    texture2d<float, access::sample > _OutlineVectorTex [[ texture(2) ]] ,
    texture2d<float, access::sample > _AudioTexture [[ texture(3) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    constexpr sampler lil_sampler_trilinear_repeat(filter::linear,mip_filter::linear,address::repeat);
    constexpr sampler lil_sampler_linear_clamp(filter::linear,mip_filter::nearest,address::clamp_to_edge);
        float4 phase0_Input0_1[3];
        phase0_Input0_1[2] = float4(input.cp[2].TEXCOORD0, input.cp[2].TEXCOORD1);
        phase0_Input0_1[1] = float4(input.cp[1].TEXCOORD0, input.cp[1].TEXCOORD1);
        phase0_Input0_1[0] = float4(input.cp[0].TEXCOORD0, input.cp[0].TEXCOORD1);
        float4 phase0_Input0_2[3];
        phase0_Input0_2[2] = float4(input.cp[2].TEXCOORD2, input.cp[2].TEXCOORD3);
        phase0_Input0_2[1] = float4(input.cp[1].TEXCOORD2, input.cp[1].TEXCOORD3);
        phase0_Input0_2[0] = float4(input.cp[0].TEXCOORD2, input.cp[0].TEXCOORD3);
    float4 phase0_Output0_4;
    float3 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    int u_xlati4;
    uint u_xlatu4;
    bool4 u_xlatb4;
    float4 u_xlat5;
    float4 u_xlat6;
    int u_xlati6;
    bool2 u_xlatb6;
    float4 u_xlat7;
    int4 u_xlati7;
    bool4 u_xlatb7;
    float4 u_xlat8;
    int4 u_xlati8;
    bool4 u_xlatb8;
    float4 u_xlat9;
    int4 u_xlati9;
    float4 u_xlat10;
    bool4 u_xlatb10;
    float4 u_xlat11;
    int4 u_xlati11;
    float4 u_xlat12;
    bool u_xlatb13;
    float3 u_xlat16;
    float3 u_xlat17;
    int2 u_xlati17;
    uint u_xlatu17;
    bool u_xlatb17;
    int u_xlati19;
    float2 u_xlat21;
    bool u_xlatb26;
    float2 u_xlat30;
    bool u_xlatb30;
    bool2 u_xlatb32;
    float u_xlat39;
    int u_xlati39;
    bool u_xlatb39;
    float u_xlat42;
    uint u_xlatu42;
    bool u_xlatb42;
    float u_xlat43;
    int u_xlati43;
    uint u_xlatu43;
    bool u_xlatb43;
    float4 TempArray0[4];
    u_xlatb0 = int(VGlobals._Invisible)!=0x0;
    u_xlatb13 = int(VGlobals._OutlineDisableInVR)!=0x0;
    u_xlatb26 = 9.99999997e-07<abs(VGlobals.hlslcc_mtx4x4glstate_matrix_projection[2].x);
    u_xlatb13 = u_xlatb26 && u_xlatb13;
    u_xlatb0 = u_xlatb13 || u_xlatb0;
    if(!u_xlatb0){
        u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].mtl_Position.xyz;
        u_xlat0.xyz = fma(mtl_TessCoord.xxx, input.cp[0].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat0.xyz = fma(mtl_TessCoord.zzz, input.cp[2].mtl_Position.xyz, u_xlat0.xyz);
        u_xlat1 = mtl_TessCoord.yyyy * phase0_Input0_1[1];
        u_xlat1 = fma(mtl_TessCoord.xxxx, phase0_Input0_1[0], u_xlat1);
        u_xlat1 = fma(mtl_TessCoord.zzzz, phase0_Input0_1[2], u_xlat1);
        u_xlat2 = mtl_TessCoord.yyyy * phase0_Input0_2[1];
        u_xlat2 = fma(mtl_TessCoord.xxxx, phase0_Input0_2[0], u_xlat2);
        u_xlat2 = fma(mtl_TessCoord.zzzz, phase0_Input0_2[2], u_xlat2);
        u_xlat3 = mtl_TessCoord.yyyy * input.cp[1].COLOR0;
        u_xlat3 = fma(mtl_TessCoord.xxxx, input.cp[0].COLOR0, u_xlat3);
        u_xlat3 = fma(mtl_TessCoord.zzzz, input.cp[2].COLOR0, u_xlat3);
        u_xlat4.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
        u_xlat4.xyz = fma(mtl_TessCoord.xxx, input.cp[0].NORMAL0.xyz, u_xlat4.xyz);
        u_xlat4.xyz = fma(mtl_TessCoord.zzz, input.cp[2].NORMAL0.xyz, u_xlat4.xyz);
        u_xlat5 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
        u_xlat5 = fma(mtl_TessCoord.xxxx, input.cp[0].TANGENT0, u_xlat5);
        u_xlat5 = fma(mtl_TessCoord.zzzz, input.cp[2].TANGENT0, u_xlat5);
        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat39 = rsqrt(u_xlat39);
        u_xlat4.xyz = float3(u_xlat39) * u_xlat4.xyz;
        u_xlat39 = dot(input.cp[0].mtl_Position.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[0].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat6.xyz = float3(u_xlat39) * input.cp[0].NORMAL0.xyz;
        u_xlat39 = dot(input.cp[1].mtl_Position.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[1].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat7.xyz = float3(u_xlat39) * input.cp[1].NORMAL0.xyz;
        u_xlat39 = dot(input.cp[2].mtl_Position.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat43 = dot(u_xlat0.xyz, input.cp[2].NORMAL0.xyz);
        u_xlat39 = u_xlat39 + (-u_xlat43);
        u_xlat39 = fma((-VGlobals._TessShrink), 0.00999999978, u_xlat39);
        u_xlat8.xyz = float3(u_xlat39) * input.cp[2].NORMAL0.xyz;
        u_xlat7.xyz = u_xlat7.xyz * mtl_TessCoord.yyy;
        u_xlat6.xyz = fma(u_xlat6.xyz, mtl_TessCoord.xxx, u_xlat7.xyz);
        u_xlat6.xyz = fma(u_xlat8.xyz, mtl_TessCoord.zzz, u_xlat6.xyz);
        u_xlat0.xyz = fma(u_xlat6.xyz, float3(VGlobals._TessStrength), u_xlat0.xyz);
        u_xlat6.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
        u_xlat7.xyz = u_xlat5.yzx * u_xlat4.zxy;
        u_xlat7.xyz = fma(u_xlat4.yzx, u_xlat5.zxy, (-u_xlat7.xyz));
        u_xlat39 = dot(u_xlat7.xyz, u_xlat7.xyz);
        u_xlat39 = rsqrt(u_xlat39);
        u_xlat7.xyz = float3(u_xlat39) * u_xlat7.xyz;
        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat39 = sqrt(u_xlat39);
        u_xlat39 = u_xlat39 * u_xlat5.w;
        u_xlat7.xyz = float3(u_xlat39) * u_xlat7.xyz;
        u_xlatb39 = int(VGlobals._UseAudioLink)!=0x0;
        u_xlatb43 = int(VGlobals._AudioLink2Vertex)!=0x0;
        u_xlatb39 = u_xlatb39 && u_xlatb43;
        if(u_xlatb39){
            u_xlatb32.xy = (int2(VGlobals._AudioLinkVertexUVMode)==int2(0x1, 0x2));
            u_xlat8.xyz = u_xlat0.xyz + (-VGlobals._AudioLinkVertexStart.xyz);
            u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat39 = sqrt(u_xlat39);
            u_xlat39 = fma(u_xlat39, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat39 = (u_xlatb32.x) ? u_xlat39 : VGlobals._AudioLinkVertexUVParams.y;
            u_xlat8.x = sin(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat9.x = cos(VGlobals._AudioLinkVertexUVParams.z);
            u_xlat21.xy = u_xlat1.xy + float2(-0.5, -0.5);
            u_xlat43 = u_xlat8.x * u_xlat21.y;
            u_xlat43 = fma(u_xlat21.x, u_xlat9.x, (-u_xlat43));
            u_xlat43 = u_xlat43 + 0.5;
            u_xlat43 = fma(u_xlat43, VGlobals._AudioLinkVertexUVParams.x, VGlobals._AudioLinkVertexUVParams.y);
            u_xlat8.x = (u_xlatb32.y) ? u_xlat43 : u_xlat39;
            if((VGlobals._AudioLinkAsLocal)!=uint(0)){
                u_xlat39 = (-VGlobals._Time.y) * VGlobals._AudioLinkLocalMapParams.x;
                u_xlat39 = u_xlat39 * VGlobals._AudioLinkLocalMapParams.y;
                u_xlat39 = u_xlat39 * 0.0166666675;
                u_xlat39 = fract(u_xlat39);
                u_xlat39 = u_xlat39 + VGlobals._AudioLinkLocalMapParams.z;
                u_xlat9.x = u_xlat39 + u_xlat8.x;
                u_xlat9.y = VGlobals._AudioLinkVertexUVParams.w;
                u_xlat39 = _AudioLinkLocalMap.sample(lil_sampler_trilinear_repeat, u_xlat9.xy, level(0.0)).x;
            } else {
                u_xlat43 = float(_AudioTexture.get_width(0x0));
                u_xlati43 = int(u_xlat43);
                u_xlatb43 = 0x10<u_xlati43;
                if(u_xlatb43){
                    u_xlat8.y = VGlobals._AudioLinkVertexUVParams.w * 0.0625;
                    u_xlat39 = _AudioTexture.sample(lil_sampler_linear_clamp, u_xlat8.xy, level(0.0)).x;
                    u_xlat39 = u_xlat39;
                    u_xlat39 = clamp(u_xlat39, 0.0f, 1.0f);
                } else {
                    u_xlat43 = fma(VGlobals._Time.y, VGlobals._AudioLinkDefaultValue.z, (-u_xlat8.x));
                    u_xlat43 = fract(u_xlat43);
                    u_xlat43 = u_xlat43 + VGlobals._AudioLinkDefaultValue.w;
                    u_xlat43 = clamp(u_xlat43, 0.0f, 1.0f);
                    u_xlat43 = u_xlat43 * VGlobals._AudioLinkDefaultValue.y;
                    u_xlat39 = fma((-u_xlat43), VGlobals._AudioLinkDefaultValue.x, VGlobals._AudioLinkDefaultValue.x);
                    u_xlat39 = clamp(u_xlat39, 0.0f, 1.0f);
                }
            }
            u_xlat8.xyz = fma(u_xlat4.xyz, VGlobals._AudioLinkVertexStrength.www, VGlobals._AudioLinkVertexStrength.xyz);
            u_xlat0.xyz = fma(u_xlat8.xyz, float3(u_xlat39), u_xlat0.xyz);
        }
        TempArray0[0].xy = u_xlat6.xy;
        TempArray0[1].xy = u_xlat1.zw;
        TempArray0[2].xy = u_xlat2.xy;
        TempArray0[3].xy = u_xlat2.zw;
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz);
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, u_xlat0.yyy, u_xlat8.xyz);
        u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat8.xyz);
        u_xlat39 = VGlobals._OutlineWidth * 0.00999999978;
        u_xlat43 = _OutlineWidthMask.sample(lil_sampler_trilinear_repeat, u_xlat6.xy, level(0.0)).x;
        u_xlat39 = u_xlat39 * u_xlat43;
        u_xlatb6.xy = (int2(VGlobals._OutlineVertexR2Width)==int2(0x1, 0x2));
        u_xlat43 = u_xlat3.x * u_xlat39;
        u_xlat39 = (u_xlatb6.x) ? u_xlat43 : u_xlat39;
        u_xlat42 = u_xlat3.w * u_xlat39;
        u_xlat39 = (u_xlatb6.y) ? u_xlat42 : u_xlat39;
        u_xlat6.xzw = (-u_xlat8.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
        u_xlat42 = dot(u_xlat6.xzw, u_xlat6.xzw);
        u_xlat42 = sqrt(u_xlat42);
        u_xlat42 = min(u_xlat42, 1.0);
        u_xlat42 = u_xlat42 + -1.0;
        u_xlat42 = fma(VGlobals._OutlineFixWidth, u_xlat42, 1.0);
        u_xlat42 = u_xlat39 * u_xlat42;
        u_xlatu43 = VGlobals._OutlineVectorUVMode;
        u_xlat6.xz = TempArray0[int(u_xlatu43)].xy;
        u_xlat6.xzw = _OutlineVectorTex.sample(lil_sampler_trilinear_repeat, u_xlat6.xz, level(0.0)).xyw;
        u_xlat6.x = u_xlat6.x * u_xlat6.w;
        u_xlat6.xz = fma(u_xlat6.xz, float2(2.0, 2.0), float2(-1.0, -1.0));
        u_xlat6.xz = u_xlat6.xz * float2(VGlobals._OutlineVectorScale);
        u_xlat43 = dot(u_xlat6.xz, u_xlat6.xz);
        u_xlat43 = min(u_xlat43, 1.0);
        u_xlat43 = (-u_xlat43) + 1.0;
        u_xlat43 = sqrt(u_xlat43);
        u_xlat8.xyz = u_xlat7.xyz * u_xlat6.zzz;
        u_xlat6.xzw = fma(u_xlat6.xxx, u_xlat5.xyz, u_xlat8.xyz);
        u_xlat6.xzw = fma(float3(u_xlat43), u_xlat4.xyz, u_xlat6.xzw);
        u_xlat3.xyz = fma(u_xlat3.xyz, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
        u_xlat7.xyz = u_xlat7.xyz * u_xlat3.yyy;
        u_xlat5.xyz = fma(u_xlat3.xxx, u_xlat5.xyz, u_xlat7.xyz);
        u_xlat3.xyz = fma(u_xlat3.zzz, u_xlat4.xyz, u_xlat5.xyz);
        u_xlat3.xyz = (u_xlatb6.y) ? u_xlat3.xyz : u_xlat6.xzw;
        u_xlat0.xyz = fma(u_xlat3.xyz, float3(u_xlat42), u_xlat0.xyz);
        u_xlatb3 = VGlobals.unity_OrthoParams.w==0.0;
        u_xlat16.xyz = VGlobals._WorldSpaceCameraPos.xyzx.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz;
        u_xlat16.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz, VGlobals._WorldSpaceCameraPos.xyzx.xxx, u_xlat16.xyz);
        u_xlat16.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz, VGlobals._WorldSpaceCameraPos.xyzx.zzz, u_xlat16.xyz);
        u_xlat16.xyz = u_xlat16.xyz + VGlobals.hlslcc_mtx4x4unity_WorldToObject[3].xyz;
        u_xlat16.xyz = (-u_xlat0.xyz) + u_xlat16.xyz;
        u_xlat5.xyz = VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].zzz;
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz, VGlobals.hlslcc_mtx4x4unity_MatrixV[0].zzz, u_xlat5.xyz);
        u_xlat5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz, VGlobals.hlslcc_mtx4x4unity_MatrixV[2].zzz, u_xlat5.xyz);
        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat16.xyz : u_xlat5.xyz;
        u_xlat42 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat3.xyz = float3(u_xlat42) * u_xlat3.xyz;
        u_xlat0.xyz = fma((-u_xlat3.xyz), float3(VGlobals._OutlineZBias), u_xlat0.xyz);
        u_xlat3.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat5 = u_xlat3.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
        u_xlat5 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat3.xxxx, u_xlat5);
        u_xlat5 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat3.zzzz, u_xlat5);
        u_xlat5 = u_xlat5 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
        u_xlat6.x = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat6.y = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat6.z = dot(u_xlat4.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat4.xyz = float3(u_xlat42) * u_xlat6.xyz;
        u_xlat17.xz = u_xlat4.yy * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].xy;
        u_xlat4.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].xy, u_xlat4.xx, u_xlat17.xz);
        u_xlat4.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].xy, u_xlat4.zz, u_xlat4.xy);
        u_xlat42 = dot(u_xlat4.xy, u_xlat4.xy);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat4.xy = float2(u_xlat42) * u_xlat4.xy;
        u_xlat6.xyz = fma((-u_xlat3.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
        u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat6.xyz = float3(u_xlat42) * u_xlat6.xyz;
        u_xlat30.xy = u_xlat6.yy * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].xy;
        u_xlat30.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].xy, u_xlat6.xx, u_xlat30.xy);
        u_xlat30.xy = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].xy, u_xlat6.zz, u_xlat30.xy);
        u_xlat42 = dot(u_xlat30.xy, u_xlat30.xy);
        u_xlat42 = rsqrt(u_xlat42);
        u_xlat30.xy = float2(u_xlat42) * u_xlat30.xy;
        u_xlat42 = dot(u_xlat4.xy, u_xlat30.xy);
        phase0_Output0_4.w = fma(u_xlat42, 0.5, 0.5);
        u_xlatb42 = -9.99999997e-07<u_xlat39;
        u_xlatb39 = u_xlat39<9.99999997e-07;
        u_xlatb39 = u_xlatb39 && u_xlatb42;
        u_xlatb42 = int(VGlobals._OutlineDeleteMesh)!=0x0;
        u_xlatb39 = u_xlatb39 && u_xlatb42;
        switch(int(int(VGlobals._IDMaskFrom))){
            case 0x0:
                u_xlatu42 = uint(u_xlat1.x);
                break;
            case 0x1:
                u_xlatu42 = uint(u_xlat1.z);
                break;
            case 0x2:
                u_xlatu42 = uint(u_xlat2.x);
                break;
            case 0x3:
                u_xlatu42 = uint(u_xlat2.z);
                break;
            case 0x4:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD4.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD4.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD4.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x5:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD5.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD5.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD5.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x6:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD6.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD6.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD6.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            case 0x7:
                u_xlat4.x = mtl_TessCoord.y * input.cp[1].TEXCOORD7.x;
                u_xlat4.x = fma(mtl_TessCoord.x, input.cp[0].TEXCOORD7.x, u_xlat4.x);
                u_xlat4.x = fma(mtl_TessCoord.z, input.cp[2].TEXCOORD7.x, u_xlat4.x);
                u_xlatu42 = uint(u_xlat4.x);
                break;
            default:
                u_xlatu42 = input.cp[0].TEXCOORD8.x;
                break;
            }
            if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                u_xlat4.x = rint(VGlobals._IDMask1);
                u_xlat4.yzw = rint(float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4));
                u_xlat4.x = dot(u_xlat4, float4(1.0, 2.0, 4.0, 8.0));
                u_xlat6.x = rint(VGlobals._IDMask5);
                u_xlat6.yzw = rint(float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8));
                u_xlat17.x = dot(u_xlat6, float4(16.0, 32.0, 64.0, 128.0));
                u_xlat4.x = u_xlat17.x + u_xlat4.x;
                u_xlatu4 = uint(u_xlat4.x);
                u_xlatb17 = int(u_xlatu42)!=0x0;
                u_xlati4 = int(u_xlatu42 & u_xlatu4);
                u_xlatb4.x = int(u_xlatu42)==u_xlati4;
                u_xlati4 = int((uint(u_xlatb4.x) * 0xffffffffu) & (uint(u_xlatb17) * 0xffffffffu));
            } else {
                u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                u_xlat6.xy = float2(u_xlati17.yx);
                u_xlati7 = int4(u_xlatu42) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                u_xlat7 = float4(u_xlati7.wxyz);
                u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                u_xlat17.xy = float2(u_xlati17.xy);
                u_xlat8.xy = u_xlat6.yx + float2(1.0, 1.0);
                u_xlat8.xy = clamp(u_xlat8.xy, 0.0f, 1.0f);
                u_xlat9 = u_xlat7.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
                u_xlat6.x = (-u_xlat6.x);
                u_xlat6.x = clamp(u_xlat6.x, 0.0f, 1.0f);
                u_xlat7 = (-u_xlat7);
                u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
                u_xlat8.zw = u_xlat9.zw;
                u_xlat6.yzw = u_xlat7.yzw;
                u_xlat6 = u_xlat6 * u_xlat8;
                u_xlat9.zw = u_xlat17.xy + float2(1.0, 1.0);
                u_xlat9.zw = clamp(u_xlat9.zw, 0.0f, 1.0f);
                u_xlat7.yz = (-u_xlat17.xy);
                u_xlat7.yz = clamp(u_xlat7.yz, 0.0f, 1.0f);
                u_xlat7.w = 1.0;
                u_xlat7 = u_xlat7 * u_xlat9;
                u_xlat8.x = VGlobals._IDMask1;
                u_xlat8.yzw = float3(VGlobals._IDMask2, VGlobals._IDMask3, VGlobals._IDMask4);
                u_xlat17.x = dot(u_xlat6, u_xlat8);
                u_xlat6.x = VGlobals._IDMask5;
                u_xlat6.yzw = float3(VGlobals._IDMask6, VGlobals._IDMask7, VGlobals._IDMask8);
                u_xlat30.x = dot(u_xlat7, u_xlat6);
                u_xlat17.x = u_xlat30.x + u_xlat17.x;
                u_xlati4 = int((float(0.0)!=u_xlat17.x) ? 0xFFFFFFFFu : uint(0));
            }
            if((VGlobals._IDMaskControlsDissolve)!=uint(0)){
                if((VGlobals._IDMaskIsBitmap)!=uint(0)){
                    u_xlat6.x = rint(VGlobals._IDMaskPrior1);
                    u_xlat6.yzw = rint(float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4));
                    u_xlat17.x = dot(u_xlat6, float4(1.0, 2.0, 4.0, 8.0));
                    u_xlat6.x = rint(VGlobals._IDMaskPrior5);
                    u_xlat6.yzw = rint(float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8));
                    u_xlat30.x = dot(u_xlat6, float4(16.0, 32.0, 64.0, 128.0));
                    u_xlat17.x = u_xlat30.x + u_xlat17.x;
                    u_xlatu17 = uint(u_xlat17.x);
                    u_xlatb30 = int(u_xlatu42)!=0x0;
                    u_xlati17.x = int(u_xlatu42 & u_xlatu17);
                    u_xlatb17 = int(u_xlatu42)==u_xlati17.x;
                    u_xlati19 = int((uint(u_xlatb17) * 0xffffffffu) & (uint(u_xlatb30) * 0xffffffffu));
                } else {
                    u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex1, VGlobals._IDMaskIndex2));
                    u_xlat7.xy = float2(u_xlati17.yx);
                    u_xlati8 = int4(u_xlatu42) + (-int4(VGlobals._IDMaskIndex3, VGlobals._IDMaskIndex4, VGlobals._IDMaskIndex5, VGlobals._IDMaskIndex6));
                    u_xlat8 = float4(u_xlati8.wxyz);
                    u_xlati17.xy = int2(u_xlatu42) + (-int2(VGlobals._IDMaskIndex7, VGlobals._IDMaskIndex8));
                    u_xlat17.xy = float2(u_xlati17.xy);
                    u_xlat9.xy = u_xlat7.yx + float2(1.0, 1.0);
                    u_xlat9.xy = clamp(u_xlat9.xy, 0.0f, 1.0f);
                    u_xlat10 = u_xlat8.wxyz + float4(1.0, 1.0, 1.0, 1.0);
                    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
                    u_xlat7.x = (-u_xlat7.x);
                    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
                    u_xlat8 = (-u_xlat8);
                    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
                    u_xlat9.zw = u_xlat10.zw;
                    u_xlat7.yzw = u_xlat8.yzw;
                    u_xlat7 = u_xlat7 * u_xlat9;
                    u_xlat10.zw = u_xlat17.xy + float2(1.0, 1.0);
                    u_xlat10.zw = clamp(u_xlat10.zw, 0.0f, 1.0f);
                    u_xlat8.yz = (-u_xlat17.xy);
                    u_xlat8.yz = clamp(u_xlat8.yz, 0.0f, 1.0f);
                    u_xlat8.w = 1.0;
                    u_xlat8 = u_xlat8 * u_xlat10;
                    u_xlat9.x = VGlobals._IDMaskPrior1;
                    u_xlat9.yzw = float3(VGlobals._IDMaskPrior2, VGlobals._IDMaskPrior3, VGlobals._IDMaskPrior4);
                    u_xlat42 = dot(u_xlat7, u_xlat9);
                    u_xlat7.x = VGlobals._IDMaskPrior5;
                    u_xlat7.yzw = float3(VGlobals._IDMaskPrior6, VGlobals._IDMaskPrior7, VGlobals._IDMaskPrior8);
                    u_xlat17.x = dot(u_xlat8, u_xlat7);
                    u_xlat42 = u_xlat42 + u_xlat17.x;
                    u_xlati19 = int((float(0.0)!=u_xlat42) ? 0xFFFFFFFFu : uint(0));
                }
                u_xlati6 = int((u_xlati4!=u_xlati19) ? 0xFFFFFFFFu : uint(0));
                u_xlati4 = int(uint(u_xlati4) & uint(u_xlati19));
            } else {
                u_xlati6 = int(int(0xffffffffu));
                u_xlati19 = int(0x0);
            }
            u_xlati39 = int((uint(u_xlatb39) * 0xffffffffu) | uint(u_xlati4));
            u_xlatb4 = (float4(VGlobals._UDIMDiscardMode, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV, VGlobals._UDIMDiscardUV)==float4(0.0, 0.0, 1.0, 2.0));
            u_xlatb42 = VGlobals._UDIMDiscardCompile==1.0;
            u_xlatb42 = u_xlatb42 && u_xlatb4.x;
            u_xlat4.xyz = select(float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0), bool3(u_xlatb4.yzw));
            u_xlat7 = u_xlat1 * u_xlat4.xxyy;
            u_xlat4.xy = u_xlat7.zw + u_xlat7.xy;
            u_xlat4.xy = fma(u_xlat2.xy, u_xlat4.zz, u_xlat4.xy);
            u_xlatb30 = VGlobals._UDIMDiscardUV==3.0;
            u_xlat30.x = u_xlatb30 ? 1.0 : float(0.0);
            u_xlat4.xy = fma(u_xlat2.zw, u_xlat30.xx, u_xlat4.xy);
            u_xlatb7 = (u_xlat4.xxxx>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb8 = (u_xlat4.xxxx<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati9 = int4((uint4(u_xlatb7) * 0xffffffffu) & (uint4(u_xlatb8) * 0xffffffffu));
            u_xlat9 = as_type<float4>(uint4(u_xlati9) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlatb10 = (u_xlat4.yyyy>=float4(0.0, 1.0, 2.0, 3.0));
            u_xlatb4 = (u_xlat4.yyyy<float4(1.0, 2.0, 3.0, 4.0));
            u_xlati11 = int4((uint4(u_xlatb4) * 0xffffffffu) & (uint4(u_xlatb10) * 0xffffffffu));
            u_xlat11 = as_type<float4>(uint4(u_xlati11) & uint4(0x3f800000u, 0x3f800000u, 0x3f800000u, 0x3f800000u));
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow0_0, VGlobals._UDIMDiscardRow0_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow0_2, VGlobals._UDIMDiscardRow0_3);
            u_xlat4.x = dot(u_xlat12, u_xlat9);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow1_0, VGlobals._UDIMDiscardRow1_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow1_2, VGlobals._UDIMDiscardRow1_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat17.x = u_xlat17.x * u_xlat11.y;
            u_xlat4.x = fma(u_xlat11.x, u_xlat4.x, u_xlat17.x);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow2_0, VGlobals._UDIMDiscardRow2_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow2_2, VGlobals._UDIMDiscardRow2_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat4.x = fma(u_xlat11.z, u_xlat17.x, u_xlat4.x);
            u_xlat12.xy = float2(VGlobals._UDIMDiscardRow3_0, VGlobals._UDIMDiscardRow3_1);
            u_xlat12.zw = float2(VGlobals._UDIMDiscardRow3_2, VGlobals._UDIMDiscardRow3_3);
            u_xlat17.x = dot(u_xlat12, u_xlat9);
            u_xlat4.x = fma(u_xlat11.w, u_xlat17.x, u_xlat4.x);
            u_xlatb8.x = u_xlatb10.x;
            u_xlatb8.y = u_xlatb4.w;
            u_xlatb8.z = u_xlatb7.x;
            u_xlat7 = select(float4(0.0, 0.0, 0.0, 0.0), float4(1.0, 1.0, 1.0, 1.0), bool4(u_xlatb8));
            u_xlat17.x = dot(u_xlat7, u_xlat7);
            u_xlatb17 = u_xlat17.x!=0.0;
            u_xlat17.x = u_xlatb17 ? 1.0 : float(0.0);
            u_xlat4.x = u_xlat17.x * u_xlat4.x;
            u_xlatb4.x = 0.00100000005<u_xlat4.x;
            u_xlatb42 = u_xlatb42 && u_xlatb4.x;
            u_xlati39 = int(uint(u_xlati39) | (uint(u_xlatb42) * 0xffffffffu));
            output.mtl_Position = (int(u_xlati39) != 0) ? float4(as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u)), as_type<float>(int(0xffc00000u))) : u_xlat5;
            u_xlati39 = int(bitFieldInsert(0x1u, 0x1u, uint(u_xlati19), 0x0u));
            u_xlati39 = int(bitFieldInsert(0x1u, 0x0u, uint(u_xlati6), uint(u_xlati39)));
            output.TEXCOORD2.w = float(u_xlati39);
            output.TEXCOORD0 = u_xlat1;
            output.TEXCOORD1 = u_xlat2;
            output.TEXCOORD2.xyz = u_xlat0.xyz;
            phase0_Output0_4.xyz = u_xlat3.xyz;
            output.TEXCOORD7 = 1.0;
        } else {
            output.mtl_Position = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD1 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
            phase0_Output0_4 = float4(0.0, 0.0, 0.0, 0.0);
            output.TEXCOORD7 = 0.0;
        }
    output.TEXCOORD3 = phase0_Output0_4.xyz;
    output.TEXCOORD5 = phase0_Output0_4.w;
        return output;
}
// SHADER_STAGE_DOMAIN_end
Refreshing native plugins compatible for Editor in 1.20 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 3724 Unused Serialized files (Serialized files now loaded: 0)
Unloading 74 unused Assets / (9.3 MB). Loaded Objects now: 4173.
Memory consumption went from 321.9 MB to 312.5 MB.
Total: 9.670539 ms (FindLiveObjects: 0.578569 ms CreateObjectMapping: 0.355069 ms MarkObjects: 3.701355 ms  DeleteObjects: 5.033188 ms)

AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:framework-osx-AVFoundation: e770b220cccbd017edd2c1fefb359320 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
========================================================================
Received Import Request.
  Time since last request: 6363.940886 seconds.
  path: Assets/Scripts/MG/NewMGs/FermentMG.cs
  artifactKey: Guid(aca115fc672ae454ab9782cebfd1819b) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Scripts/MG/NewMGs/FermentMG.cs using Guid(aca115fc672ae454ab9782cebfd1819b) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '26f7ce9cb1a7735f69124f7433c5d3b4') in 0.476521 seconds 
